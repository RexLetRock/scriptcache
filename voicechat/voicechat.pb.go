// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.8
// source: voicechat.proto

package voicechat

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Client to Server
type ChatRequestType int32

const (
	ChatRequestType_REQUEST_UNKNOWN ChatRequestType = 0
	//profile 0x02xx
	ChatRequestType_PROFILE_REQ_GET              ChatRequestType = 513
	ChatRequestType_PROFILE_REQ_UPDATE           ChatRequestType = 514
	ChatRequestType_PROFILE_REQ_REGISTER_TOKEN   ChatRequestType = 515
	ChatRequestType_PROFILE_REQ_GET_TOKENS       ChatRequestType = 516
	ChatRequestType_PROFILE_REQ_CHANGE_STATUS    ChatRequestType = 517
	ChatRequestType_PROFILE_REQ_UNREGISTER_TOKEN ChatRequestType = 518
	ChatRequestType_PROFILE_REQ_LOGIN            ChatRequestType = 519
	ChatRequestType_PROFILE_REQ_LOGOUT           ChatRequestType = 520
	ChatRequestType_PROFILE_STATUS_UPDATE        ChatRequestType = 752
	ChatRequestType_PROFILE_STATUS_NOTIFY        ChatRequestType = 753
	//call 0x03xx
	ChatRequestType_CALL_REQ_CREATE    ChatRequestType = 769
	ChatRequestType_CALL_START         ChatRequestType = 770
	ChatRequestType_CALL_ANSWER        ChatRequestType = 771
	ChatRequestType_CALL_STOP          ChatRequestType = 772
	ChatRequestType_CALL_ICE_SDP       ChatRequestType = 773
	ChatRequestType_CALL_ICE_CANDIDATE ChatRequestType = 774
	ChatRequestType_CALL_BROADCAST     ChatRequestType = 775
	ChatRequestType_CALL_REQ_STATUS    ChatRequestType = 776
	ChatRequestType_CALL_EVENT         ChatRequestType = 777
	//group - 0x05xx
	ChatRequestType_GROUP_REQ_CREATE              ChatRequestType = 1281
	ChatRequestType_GROUP_REQ_UPDATE              ChatRequestType = 1282
	ChatRequestType_GROUP_REQ_LEAVE               ChatRequestType = 1283
	ChatRequestType_GROUP_REQ_DELETE              ChatRequestType = 1284
	ChatRequestType_GROUP_REQ_LIST                ChatRequestType = 1285
	ChatRequestType_GROUP_REQ_BLOCK               ChatRequestType = 1286
	ChatRequestType_GROUP_REQ_UNBLOCK             ChatRequestType = 1287
	ChatRequestType_GROUP_REQ_LAST_MESSAGE        ChatRequestType = 1288
	ChatRequestType_GROUP_REQ_GROUP_INFO          ChatRequestType = 1289
	ChatRequestType_GROUP_REQ_USER_STATUS         ChatRequestType = 1290
	ChatRequestType_GROUP_REQ_DELETE_CONVERSATION ChatRequestType = 1291
	ChatRequestType_GROUP_REQ_CHECK               ChatRequestType = 1292
	ChatRequestType_GROUP_REQ_MUTE                ChatRequestType = 1293
	ChatRequestType_GROUP_REQ_UNMUTE              ChatRequestType = 1294
	ChatRequestType_GROUP_REQ_NEW_REGISTER        ChatRequestType = 1295
	ChatRequestType_GROUP_REQ_PIN                 ChatRequestType = 1296
	ChatRequestType_GROUP_REQ_UNPIN               ChatRequestType = 1297
	ChatRequestType_GROUP_REQ_START_SECRET_CHAT   ChatRequestType = 1298
	ChatRequestType_GROUP_REQ_ACCEPT_SECRET_CHAT  ChatRequestType = 1299
	ChatRequestType_GROUP_REQ_LOGOUT              ChatRequestType = 1300
	ChatRequestType_GROUP_REQ_CREATE_LINK         ChatRequestType = 1301
	ChatRequestType_GROUP_REQ_JOIN_LINK           ChatRequestType = 1302
	ChatRequestType_GROUP_REQ_LIST_LINK           ChatRequestType = 1303
	ChatRequestType_GROUP_REQ_DISABLE_LINK        ChatRequestType = 1304
	ChatRequestType_GROUP_REQ_SYNC                ChatRequestType = 1305
	ChatRequestType_GROUP_REQ_DELETE_SECRET_CHAT  ChatRequestType = 1306
	ChatRequestType_GROUP_REQ_BLOCKED_LIST        ChatRequestType = 1307
	ChatRequestType_GROUP_REQ_PIN_MESSAGE         ChatRequestType = 1308
	ChatRequestType_GROUP_REQ_UNPIN_MESSAGE       ChatRequestType = 1309
	ChatRequestType_GROUP_REQ_PINNED_MESSAGE_LIST ChatRequestType = 1310
	ChatRequestType_GROUP_REQ_ADD_ADMIN           ChatRequestType = 1311
	ChatRequestType_GROUP_REQ_DEL_ADMIN           ChatRequestType = 1312
	ChatRequestType_GROUP_REQ_LINK_GROUP_INFO     ChatRequestType = 1313
	ChatRequestType_GROUP_REQ_MOVE_GROUP          ChatRequestType = 1314
	ChatRequestType_GROUP_REQ_LIST_PENDING_GROUP  ChatRequestType = 1315
	ChatRequestType_GROUP_NEW                     ChatRequestType = 1520
	ChatRequestType_GROUP_UPDATE                  ChatRequestType = 1521
	ChatRequestType_GROUP_DELETE                  ChatRequestType = 1522
	ChatRequestType_GROUP_BROADCAST               ChatRequestType = 1523
	ChatRequestType_GROUP_ADD_USERGROUP           ChatRequestType = 1524
	ChatRequestType_GROUP_REMOVE_USERGROUP        ChatRequestType = 1525
	ChatRequestType_GROUP_PIN_USERGROUP           ChatRequestType = 1526
	ChatRequestType_GROUP_OPERATION_LOG           ChatRequestType = 1527
	ChatRequestType_GROUP_USER_STATUS             ChatRequestType = 1528
	//message 0x06xx
	ChatRequestType_MESSAGE_REQ_CREATE                ChatRequestType = 1537
	ChatRequestType_MESSAGE_REQ_UPDATE                ChatRequestType = 1538
	ChatRequestType_MESSAGE_REQ_DELETE                ChatRequestType = 1539
	ChatRequestType_MESSAGE_REQ_LIST                  ChatRequestType = 1540
	ChatRequestType_MESSAGE_REQ_LIVE_LOCATION         ChatRequestType = 1541
	ChatRequestType_MESSAGE_REQ_MULT_LIVE_LOCATION    ChatRequestType = 1543
	ChatRequestType_MESSAGE_REQ_REACTION              ChatRequestType = 1553
	ChatRequestType_MESSAGE_REQ_REACTION_LIST         ChatRequestType = 1554
	ChatRequestType_MESSAGE_REQ_UPDATE_CACHE_REACTION ChatRequestType = 1555
	ChatRequestType_MESSAGE_REACTION_BROADCAST        ChatRequestType = 1556
	ChatRequestType_MESSAGE_REQ_LIST_V2               ChatRequestType = 1557
	ChatRequestType_MESSAGE_NEW                       ChatRequestType = 1777
	ChatRequestType_MESSAGE_UPDATE                    ChatRequestType = 1778
	ChatRequestType_MESSAGE_DELETE                    ChatRequestType = 1779
	ChatRequestType_MESSAGE_BROADCAST                 ChatRequestType = 1780
	//notification 0x07xx
	ChatRequestType_NOTIFICATION_MESSAGE        ChatRequestType = 1792
	ChatRequestType_DEVICE_NOTIFICATION_MESSAGE ChatRequestType = 1793
	//event 0x08xx
	ChatRequestType_EVENT_MESSAGE   ChatRequestType = 2048
	ChatRequestType_EVENT_BROADCAST ChatRequestType = 2049
	//group call 0x09xx
	ChatRequestType_GROUPCALL_REQ_START  ChatRequestType = 2305
	ChatRequestType_GROUPCALL_REQ_CREATE ChatRequestType = 2306
	ChatRequestType_GROUPCALL_REQ_JOIN   ChatRequestType = 2307
	ChatRequestType_GROUPCALL_REQ_LEAVE  ChatRequestType = 2308
	ChatRequestType_GROUPCALL_REQ_INVITE ChatRequestType = 2309
	ChatRequestType_GROUPCALL_REQ_PING   ChatRequestType = 2310
	ChatRequestType_GROUPCALL_REQ_STOP   ChatRequestType = 2311
	ChatRequestType_GROUPCALL_REQ_STATUS ChatRequestType = 2312
	//cache event
	ChatRequestType_CACHE_CALL_UPDATE ChatRequestType = 1025
)

// Enum value maps for ChatRequestType.
var (
	ChatRequestType_name = map[int32]string{
		0:    "REQUEST_UNKNOWN",
		513:  "PROFILE_REQ_GET",
		514:  "PROFILE_REQ_UPDATE",
		515:  "PROFILE_REQ_REGISTER_TOKEN",
		516:  "PROFILE_REQ_GET_TOKENS",
		517:  "PROFILE_REQ_CHANGE_STATUS",
		518:  "PROFILE_REQ_UNREGISTER_TOKEN",
		519:  "PROFILE_REQ_LOGIN",
		520:  "PROFILE_REQ_LOGOUT",
		752:  "PROFILE_STATUS_UPDATE",
		753:  "PROFILE_STATUS_NOTIFY",
		769:  "CALL_REQ_CREATE",
		770:  "CALL_START",
		771:  "CALL_ANSWER",
		772:  "CALL_STOP",
		773:  "CALL_ICE_SDP",
		774:  "CALL_ICE_CANDIDATE",
		775:  "CALL_BROADCAST",
		776:  "CALL_REQ_STATUS",
		777:  "CALL_EVENT",
		1281: "GROUP_REQ_CREATE",
		1282: "GROUP_REQ_UPDATE",
		1283: "GROUP_REQ_LEAVE",
		1284: "GROUP_REQ_DELETE",
		1285: "GROUP_REQ_LIST",
		1286: "GROUP_REQ_BLOCK",
		1287: "GROUP_REQ_UNBLOCK",
		1288: "GROUP_REQ_LAST_MESSAGE",
		1289: "GROUP_REQ_GROUP_INFO",
		1290: "GROUP_REQ_USER_STATUS",
		1291: "GROUP_REQ_DELETE_CONVERSATION",
		1292: "GROUP_REQ_CHECK",
		1293: "GROUP_REQ_MUTE",
		1294: "GROUP_REQ_UNMUTE",
		1295: "GROUP_REQ_NEW_REGISTER",
		1296: "GROUP_REQ_PIN",
		1297: "GROUP_REQ_UNPIN",
		1298: "GROUP_REQ_START_SECRET_CHAT",
		1299: "GROUP_REQ_ACCEPT_SECRET_CHAT",
		1300: "GROUP_REQ_LOGOUT",
		1301: "GROUP_REQ_CREATE_LINK",
		1302: "GROUP_REQ_JOIN_LINK",
		1303: "GROUP_REQ_LIST_LINK",
		1304: "GROUP_REQ_DISABLE_LINK",
		1305: "GROUP_REQ_SYNC",
		1306: "GROUP_REQ_DELETE_SECRET_CHAT",
		1307: "GROUP_REQ_BLOCKED_LIST",
		1308: "GROUP_REQ_PIN_MESSAGE",
		1309: "GROUP_REQ_UNPIN_MESSAGE",
		1310: "GROUP_REQ_PINNED_MESSAGE_LIST",
		1311: "GROUP_REQ_ADD_ADMIN",
		1312: "GROUP_REQ_DEL_ADMIN",
		1313: "GROUP_REQ_LINK_GROUP_INFO",
		1314: "GROUP_REQ_MOVE_GROUP",
		1315: "GROUP_REQ_LIST_PENDING_GROUP",
		1520: "GROUP_NEW",
		1521: "GROUP_UPDATE",
		1522: "GROUP_DELETE",
		1523: "GROUP_BROADCAST",
		1524: "GROUP_ADD_USERGROUP",
		1525: "GROUP_REMOVE_USERGROUP",
		1526: "GROUP_PIN_USERGROUP",
		1527: "GROUP_OPERATION_LOG",
		1528: "GROUP_USER_STATUS",
		1537: "MESSAGE_REQ_CREATE",
		1538: "MESSAGE_REQ_UPDATE",
		1539: "MESSAGE_REQ_DELETE",
		1540: "MESSAGE_REQ_LIST",
		1541: "MESSAGE_REQ_LIVE_LOCATION",
		1543: "MESSAGE_REQ_MULT_LIVE_LOCATION",
		1553: "MESSAGE_REQ_REACTION",
		1554: "MESSAGE_REQ_REACTION_LIST",
		1555: "MESSAGE_REQ_UPDATE_CACHE_REACTION",
		1556: "MESSAGE_REACTION_BROADCAST",
		1557: "MESSAGE_REQ_LIST_V2",
		1777: "MESSAGE_NEW",
		1778: "MESSAGE_UPDATE",
		1779: "MESSAGE_DELETE",
		1780: "MESSAGE_BROADCAST",
		1792: "NOTIFICATION_MESSAGE",
		1793: "DEVICE_NOTIFICATION_MESSAGE",
		2048: "EVENT_MESSAGE",
		2049: "EVENT_BROADCAST",
		2305: "GROUPCALL_REQ_START",
		2306: "GROUPCALL_REQ_CREATE",
		2307: "GROUPCALL_REQ_JOIN",
		2308: "GROUPCALL_REQ_LEAVE",
		2309: "GROUPCALL_REQ_INVITE",
		2310: "GROUPCALL_REQ_PING",
		2311: "GROUPCALL_REQ_STOP",
		2312: "GROUPCALL_REQ_STATUS",
		1025: "CACHE_CALL_UPDATE",
	}
	ChatRequestType_value = map[string]int32{
		"REQUEST_UNKNOWN":                   0,
		"PROFILE_REQ_GET":                   513,
		"PROFILE_REQ_UPDATE":                514,
		"PROFILE_REQ_REGISTER_TOKEN":        515,
		"PROFILE_REQ_GET_TOKENS":            516,
		"PROFILE_REQ_CHANGE_STATUS":         517,
		"PROFILE_REQ_UNREGISTER_TOKEN":      518,
		"PROFILE_REQ_LOGIN":                 519,
		"PROFILE_REQ_LOGOUT":                520,
		"PROFILE_STATUS_UPDATE":             752,
		"PROFILE_STATUS_NOTIFY":             753,
		"CALL_REQ_CREATE":                   769,
		"CALL_START":                        770,
		"CALL_ANSWER":                       771,
		"CALL_STOP":                         772,
		"CALL_ICE_SDP":                      773,
		"CALL_ICE_CANDIDATE":                774,
		"CALL_BROADCAST":                    775,
		"CALL_REQ_STATUS":                   776,
		"CALL_EVENT":                        777,
		"GROUP_REQ_CREATE":                  1281,
		"GROUP_REQ_UPDATE":                  1282,
		"GROUP_REQ_LEAVE":                   1283,
		"GROUP_REQ_DELETE":                  1284,
		"GROUP_REQ_LIST":                    1285,
		"GROUP_REQ_BLOCK":                   1286,
		"GROUP_REQ_UNBLOCK":                 1287,
		"GROUP_REQ_LAST_MESSAGE":            1288,
		"GROUP_REQ_GROUP_INFO":              1289,
		"GROUP_REQ_USER_STATUS":             1290,
		"GROUP_REQ_DELETE_CONVERSATION":     1291,
		"GROUP_REQ_CHECK":                   1292,
		"GROUP_REQ_MUTE":                    1293,
		"GROUP_REQ_UNMUTE":                  1294,
		"GROUP_REQ_NEW_REGISTER":            1295,
		"GROUP_REQ_PIN":                     1296,
		"GROUP_REQ_UNPIN":                   1297,
		"GROUP_REQ_START_SECRET_CHAT":       1298,
		"GROUP_REQ_ACCEPT_SECRET_CHAT":      1299,
		"GROUP_REQ_LOGOUT":                  1300,
		"GROUP_REQ_CREATE_LINK":             1301,
		"GROUP_REQ_JOIN_LINK":               1302,
		"GROUP_REQ_LIST_LINK":               1303,
		"GROUP_REQ_DISABLE_LINK":            1304,
		"GROUP_REQ_SYNC":                    1305,
		"GROUP_REQ_DELETE_SECRET_CHAT":      1306,
		"GROUP_REQ_BLOCKED_LIST":            1307,
		"GROUP_REQ_PIN_MESSAGE":             1308,
		"GROUP_REQ_UNPIN_MESSAGE":           1309,
		"GROUP_REQ_PINNED_MESSAGE_LIST":     1310,
		"GROUP_REQ_ADD_ADMIN":               1311,
		"GROUP_REQ_DEL_ADMIN":               1312,
		"GROUP_REQ_LINK_GROUP_INFO":         1313,
		"GROUP_REQ_MOVE_GROUP":              1314,
		"GROUP_REQ_LIST_PENDING_GROUP":      1315,
		"GROUP_NEW":                         1520,
		"GROUP_UPDATE":                      1521,
		"GROUP_DELETE":                      1522,
		"GROUP_BROADCAST":                   1523,
		"GROUP_ADD_USERGROUP":               1524,
		"GROUP_REMOVE_USERGROUP":            1525,
		"GROUP_PIN_USERGROUP":               1526,
		"GROUP_OPERATION_LOG":               1527,
		"GROUP_USER_STATUS":                 1528,
		"MESSAGE_REQ_CREATE":                1537,
		"MESSAGE_REQ_UPDATE":                1538,
		"MESSAGE_REQ_DELETE":                1539,
		"MESSAGE_REQ_LIST":                  1540,
		"MESSAGE_REQ_LIVE_LOCATION":         1541,
		"MESSAGE_REQ_MULT_LIVE_LOCATION":    1543,
		"MESSAGE_REQ_REACTION":              1553,
		"MESSAGE_REQ_REACTION_LIST":         1554,
		"MESSAGE_REQ_UPDATE_CACHE_REACTION": 1555,
		"MESSAGE_REACTION_BROADCAST":        1556,
		"MESSAGE_REQ_LIST_V2":               1557,
		"MESSAGE_NEW":                       1777,
		"MESSAGE_UPDATE":                    1778,
		"MESSAGE_DELETE":                    1779,
		"MESSAGE_BROADCAST":                 1780,
		"NOTIFICATION_MESSAGE":              1792,
		"DEVICE_NOTIFICATION_MESSAGE":       1793,
		"EVENT_MESSAGE":                     2048,
		"EVENT_BROADCAST":                   2049,
		"GROUPCALL_REQ_START":               2305,
		"GROUPCALL_REQ_CREATE":              2306,
		"GROUPCALL_REQ_JOIN":                2307,
		"GROUPCALL_REQ_LEAVE":               2308,
		"GROUPCALL_REQ_INVITE":              2309,
		"GROUPCALL_REQ_PING":                2310,
		"GROUPCALL_REQ_STOP":                2311,
		"GROUPCALL_REQ_STATUS":              2312,
		"CACHE_CALL_UPDATE":                 1025,
	}
)

func (x ChatRequestType) Enum() *ChatRequestType {
	p := new(ChatRequestType)
	*p = x
	return p
}

func (x ChatRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[0].Descriptor()
}

func (ChatRequestType) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[0]
}

func (x ChatRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatRequestType.Descriptor instead.
func (ChatRequestType) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{0}
}

// Server respond to Client
type ChatResponseType int32

const (
	ChatResponseType_RESPONSE_UNKNOWN ChatResponseType = 0
	//profile 0x02xx
	ChatResponseType_PROFILE_RSP_GET              ChatResponseType = 513
	ChatResponseType_PROFILE_RSP_UPDATE           ChatResponseType = 514
	ChatResponseType_PROFILE_RSP_REGISTER_TOKEN   ChatResponseType = 515
	ChatResponseType_PROFILE_RSP_GET_TOKENS       ChatResponseType = 516
	ChatResponseType_PROFILE_RSP_CHANGE_STATUS    ChatResponseType = 517
	ChatResponseType_PROFILE_RSP_UNREGISTER_TOKEN ChatResponseType = 518
	ChatResponseType_PROFILE_RSP_LOGIN            ChatResponseType = 519
	ChatResponseType_PROFILE_RSP_LOGOUT           ChatResponseType = 520
	//media 0x03xx
	ChatResponseType_CALL_RSP_CREATE ChatResponseType = 769
	ChatResponseType_CALL_RSP_STATUS ChatResponseType = 776
	//group 0x05xx
	ChatResponseType_GROUP_RSP_CREATE              ChatResponseType = 1281
	ChatResponseType_GROUP_RSP_UPDATE              ChatResponseType = 1282
	ChatResponseType_GROUP_RSP_LEAVE               ChatResponseType = 1283
	ChatResponseType_GROUP_RSP_DELETE              ChatResponseType = 1284
	ChatResponseType_GROUP_RSP_LIST                ChatResponseType = 1285
	ChatResponseType_GROUP_RSP_BLOCK               ChatResponseType = 1286
	ChatResponseType_GROUP_RSP_UNBLOCK             ChatResponseType = 1287
	ChatResponseType_GROUP_RSP_LAST_MESSAGE        ChatResponseType = 1288
	ChatResponseType_GROUP_RSP_GROUP_INFO          ChatResponseType = 1289
	ChatResponseType_GROUP_RSP_USER_STATUS         ChatResponseType = 1290
	ChatResponseType_GROUP_RSP_DELETE_CONVERSATION ChatResponseType = 1291
	ChatResponseType_GROUP_RSP_CHECK               ChatResponseType = 1292
	ChatResponseType_GROUP_RSP_MUTE                ChatResponseType = 1293
	ChatResponseType_GROUP_RSP_UNMUTE              ChatResponseType = 1294
	ChatResponseType_GROUP_RSP_NEW_REGISTER        ChatResponseType = 1295
	ChatResponseType_GROUP_RSP_PIN                 ChatResponseType = 1296
	ChatResponseType_GROUP_RSP_UNPIN               ChatResponseType = 1297
	ChatResponseType_GROUP_RSP_START_SECRET_CHAT   ChatResponseType = 1298
	ChatResponseType_GROUP_RSP_ACCEPT_SECRET_CHAT  ChatResponseType = 1299
	ChatResponseType_GROUP_RSP_LOGOUT              ChatResponseType = 1300
	ChatResponseType_GROUP_RSP_CREATE_LINK         ChatResponseType = 1301
	ChatResponseType_GROUP_RSP_JOIN_LINK           ChatResponseType = 1302
	ChatResponseType_GROUP_RSP_LIST_LINK           ChatResponseType = 1303
	ChatResponseType_GROUP_RSP_DISABLE_LINK        ChatResponseType = 1304
	ChatResponseType_GROUP_RSP_SYNC                ChatResponseType = 1305
	ChatResponseType_GROUP_RSP_DELETE_SECRET_CHAT  ChatResponseType = 1306
	ChatResponseType_GROUP_RSP_BLOCKED_LIST        ChatResponseType = 1307
	ChatResponseType_GROUP_RSP_PIN_MESSAGE         ChatResponseType = 1308
	ChatResponseType_GROUP_RSP_UNPIN_MESSAGE       ChatResponseType = 1309
	ChatResponseType_GROUP_RSP_PINNED_MESSAGE_LIST ChatResponseType = 1310
	ChatResponseType_GROUP_RSP_ADD_ADMIN           ChatResponseType = 1311
	ChatResponseType_GROUP_RSP_DEL_ADMIN           ChatResponseType = 1312
	ChatResponseType_GROUP_RSP_LINK_GROUP_INFO     ChatResponseType = 1313
	ChatResponseType_GROUP_RSP_MOVE_GROUP          ChatResponseType = 1314
	ChatResponseType_GROUP_RSP_LIST_PENDING_GROUP  ChatResponseType = 1315
	//message 0x06xx
	ChatResponseType_MESSAGE_RSP_CREATE                ChatResponseType = 1537
	ChatResponseType_MESSAGE_RSP_UPDATE                ChatResponseType = 1538
	ChatResponseType_MESSAGE_RSP_DELETE                ChatResponseType = 1539
	ChatResponseType_MESSAGE_RSP_LIST                  ChatResponseType = 1540
	ChatResponseType_MESSAGE_RSP_LIVE_LOCATION         ChatResponseType = 1541
	ChatResponseType_MESSAGE_RSP_REACTION              ChatResponseType = 1553
	ChatResponseType_MESSAGE_RSP_REACTION_LIST         ChatResponseType = 1554
	ChatResponseType_MESSAGE_RSP_UPDATE_CACHE_REACTION ChatResponseType = 1555
	ChatResponseType_MESSAGE_RSP_LIST_v2               ChatResponseType = 1557
	//group call 0x09xx
	ChatResponseType_GROUPCALL_RSP_START  ChatResponseType = 2305
	ChatResponseType_GROUPCALL_RSP_CREATE ChatResponseType = 2306
	ChatResponseType_GROUPCALL_RSP_JOIN   ChatResponseType = 2307
	ChatResponseType_GROUPCALL_RSP_LEAVE  ChatResponseType = 2308
	ChatResponseType_GROUPCALL_RSP_INVITE ChatResponseType = 2309
	ChatResponseType_GROUPCALL_RSP_PING   ChatResponseType = 2310
	ChatResponseType_GROUPCALL_RSP_STOP   ChatResponseType = 2311
	ChatResponseType_GROUPCALL_RSP_STATUS ChatResponseType = 2312
)

// Enum value maps for ChatResponseType.
var (
	ChatResponseType_name = map[int32]string{
		0:    "RESPONSE_UNKNOWN",
		513:  "PROFILE_RSP_GET",
		514:  "PROFILE_RSP_UPDATE",
		515:  "PROFILE_RSP_REGISTER_TOKEN",
		516:  "PROFILE_RSP_GET_TOKENS",
		517:  "PROFILE_RSP_CHANGE_STATUS",
		518:  "PROFILE_RSP_UNREGISTER_TOKEN",
		519:  "PROFILE_RSP_LOGIN",
		520:  "PROFILE_RSP_LOGOUT",
		769:  "CALL_RSP_CREATE",
		776:  "CALL_RSP_STATUS",
		1281: "GROUP_RSP_CREATE",
		1282: "GROUP_RSP_UPDATE",
		1283: "GROUP_RSP_LEAVE",
		1284: "GROUP_RSP_DELETE",
		1285: "GROUP_RSP_LIST",
		1286: "GROUP_RSP_BLOCK",
		1287: "GROUP_RSP_UNBLOCK",
		1288: "GROUP_RSP_LAST_MESSAGE",
		1289: "GROUP_RSP_GROUP_INFO",
		1290: "GROUP_RSP_USER_STATUS",
		1291: "GROUP_RSP_DELETE_CONVERSATION",
		1292: "GROUP_RSP_CHECK",
		1293: "GROUP_RSP_MUTE",
		1294: "GROUP_RSP_UNMUTE",
		1295: "GROUP_RSP_NEW_REGISTER",
		1296: "GROUP_RSP_PIN",
		1297: "GROUP_RSP_UNPIN",
		1298: "GROUP_RSP_START_SECRET_CHAT",
		1299: "GROUP_RSP_ACCEPT_SECRET_CHAT",
		1300: "GROUP_RSP_LOGOUT",
		1301: "GROUP_RSP_CREATE_LINK",
		1302: "GROUP_RSP_JOIN_LINK",
		1303: "GROUP_RSP_LIST_LINK",
		1304: "GROUP_RSP_DISABLE_LINK",
		1305: "GROUP_RSP_SYNC",
		1306: "GROUP_RSP_DELETE_SECRET_CHAT",
		1307: "GROUP_RSP_BLOCKED_LIST",
		1308: "GROUP_RSP_PIN_MESSAGE",
		1309: "GROUP_RSP_UNPIN_MESSAGE",
		1310: "GROUP_RSP_PINNED_MESSAGE_LIST",
		1311: "GROUP_RSP_ADD_ADMIN",
		1312: "GROUP_RSP_DEL_ADMIN",
		1313: "GROUP_RSP_LINK_GROUP_INFO",
		1314: "GROUP_RSP_MOVE_GROUP",
		1315: "GROUP_RSP_LIST_PENDING_GROUP",
		1537: "MESSAGE_RSP_CREATE",
		1538: "MESSAGE_RSP_UPDATE",
		1539: "MESSAGE_RSP_DELETE",
		1540: "MESSAGE_RSP_LIST",
		1541: "MESSAGE_RSP_LIVE_LOCATION",
		1553: "MESSAGE_RSP_REACTION",
		1554: "MESSAGE_RSP_REACTION_LIST",
		1555: "MESSAGE_RSP_UPDATE_CACHE_REACTION",
		1557: "MESSAGE_RSP_LIST_v2",
		2305: "GROUPCALL_RSP_START",
		2306: "GROUPCALL_RSP_CREATE",
		2307: "GROUPCALL_RSP_JOIN",
		2308: "GROUPCALL_RSP_LEAVE",
		2309: "GROUPCALL_RSP_INVITE",
		2310: "GROUPCALL_RSP_PING",
		2311: "GROUPCALL_RSP_STOP",
		2312: "GROUPCALL_RSP_STATUS",
	}
	ChatResponseType_value = map[string]int32{
		"RESPONSE_UNKNOWN":                  0,
		"PROFILE_RSP_GET":                   513,
		"PROFILE_RSP_UPDATE":                514,
		"PROFILE_RSP_REGISTER_TOKEN":        515,
		"PROFILE_RSP_GET_TOKENS":            516,
		"PROFILE_RSP_CHANGE_STATUS":         517,
		"PROFILE_RSP_UNREGISTER_TOKEN":      518,
		"PROFILE_RSP_LOGIN":                 519,
		"PROFILE_RSP_LOGOUT":                520,
		"CALL_RSP_CREATE":                   769,
		"CALL_RSP_STATUS":                   776,
		"GROUP_RSP_CREATE":                  1281,
		"GROUP_RSP_UPDATE":                  1282,
		"GROUP_RSP_LEAVE":                   1283,
		"GROUP_RSP_DELETE":                  1284,
		"GROUP_RSP_LIST":                    1285,
		"GROUP_RSP_BLOCK":                   1286,
		"GROUP_RSP_UNBLOCK":                 1287,
		"GROUP_RSP_LAST_MESSAGE":            1288,
		"GROUP_RSP_GROUP_INFO":              1289,
		"GROUP_RSP_USER_STATUS":             1290,
		"GROUP_RSP_DELETE_CONVERSATION":     1291,
		"GROUP_RSP_CHECK":                   1292,
		"GROUP_RSP_MUTE":                    1293,
		"GROUP_RSP_UNMUTE":                  1294,
		"GROUP_RSP_NEW_REGISTER":            1295,
		"GROUP_RSP_PIN":                     1296,
		"GROUP_RSP_UNPIN":                   1297,
		"GROUP_RSP_START_SECRET_CHAT":       1298,
		"GROUP_RSP_ACCEPT_SECRET_CHAT":      1299,
		"GROUP_RSP_LOGOUT":                  1300,
		"GROUP_RSP_CREATE_LINK":             1301,
		"GROUP_RSP_JOIN_LINK":               1302,
		"GROUP_RSP_LIST_LINK":               1303,
		"GROUP_RSP_DISABLE_LINK":            1304,
		"GROUP_RSP_SYNC":                    1305,
		"GROUP_RSP_DELETE_SECRET_CHAT":      1306,
		"GROUP_RSP_BLOCKED_LIST":            1307,
		"GROUP_RSP_PIN_MESSAGE":             1308,
		"GROUP_RSP_UNPIN_MESSAGE":           1309,
		"GROUP_RSP_PINNED_MESSAGE_LIST":     1310,
		"GROUP_RSP_ADD_ADMIN":               1311,
		"GROUP_RSP_DEL_ADMIN":               1312,
		"GROUP_RSP_LINK_GROUP_INFO":         1313,
		"GROUP_RSP_MOVE_GROUP":              1314,
		"GROUP_RSP_LIST_PENDING_GROUP":      1315,
		"MESSAGE_RSP_CREATE":                1537,
		"MESSAGE_RSP_UPDATE":                1538,
		"MESSAGE_RSP_DELETE":                1539,
		"MESSAGE_RSP_LIST":                  1540,
		"MESSAGE_RSP_LIVE_LOCATION":         1541,
		"MESSAGE_RSP_REACTION":              1553,
		"MESSAGE_RSP_REACTION_LIST":         1554,
		"MESSAGE_RSP_UPDATE_CACHE_REACTION": 1555,
		"MESSAGE_RSP_LIST_v2":               1557,
		"GROUPCALL_RSP_START":               2305,
		"GROUPCALL_RSP_CREATE":              2306,
		"GROUPCALL_RSP_JOIN":                2307,
		"GROUPCALL_RSP_LEAVE":               2308,
		"GROUPCALL_RSP_INVITE":              2309,
		"GROUPCALL_RSP_PING":                2310,
		"GROUPCALL_RSP_STOP":                2311,
		"GROUPCALL_RSP_STATUS":              2312,
	}
)

func (x ChatResponseType) Enum() *ChatResponseType {
	p := new(ChatResponseType)
	*p = x
	return p
}

func (x ChatResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[1].Descriptor()
}

func (ChatResponseType) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[1]
}

func (x ChatResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatResponseType.Descriptor instead.
func (ChatResponseType) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{1}
}

type ErrorCode int32

const (
	ErrorCode_ERRORCODE_OK                      ErrorCode = 0
	ErrorCode_ERRORCODE_FAILED                  ErrorCode = 1
	ErrorCode_ERRORCODE_EXPIRED                 ErrorCode = 2
	ErrorCode_ERRORCODE_NONEXISTENT             ErrorCode = 3
	ErrorCode_ERRORCODE_INVALID                 ErrorCode = 4
	ErrorCode_ERRORCODE_WRONG_TYPE              ErrorCode = 5
	ErrorCode_ERRORCODE_PARSING_DATA_FAILURE    ErrorCode = 6
	ErrorCode_ERRORCODE_LOGIN_CONFLICT          ErrorCode = 7
	ErrorCode_ERRORCODE_USER_NOT_FOUND          ErrorCode = 8
	ErrorCode_ERRORCODE_HEADER_DECODING_FAILURE ErrorCode = 9
	ErrorCode_ERRORCODE_WRONG_SESSION           ErrorCode = 10
	ErrorCode_ERRORCODE_APPID_MISMATCH          ErrorCode = 11
	ErrorCode_ERRORCODE_USER_DUPLICATE          ErrorCode = 12
	ErrorCode_ERRORCODE_MESSAGE_DUPLICATE       ErrorCode = 13
	ErrorCode_ERRORCODE_MESSAGE_NOT_FOUND       ErrorCode = 14
	ErrorCode_ERRORCODE_GROUP_NOT_FOUND         ErrorCode = 15
	ErrorCode_ERRORCODE_INVALID_GROUP           ErrorCode = 16
	ErrorCode_ERRORCODE_REACTION_NOT_FOUND      ErrorCode = 17
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:  "ERRORCODE_OK",
		1:  "ERRORCODE_FAILED",
		2:  "ERRORCODE_EXPIRED",
		3:  "ERRORCODE_NONEXISTENT",
		4:  "ERRORCODE_INVALID",
		5:  "ERRORCODE_WRONG_TYPE",
		6:  "ERRORCODE_PARSING_DATA_FAILURE",
		7:  "ERRORCODE_LOGIN_CONFLICT",
		8:  "ERRORCODE_USER_NOT_FOUND",
		9:  "ERRORCODE_HEADER_DECODING_FAILURE",
		10: "ERRORCODE_WRONG_SESSION",
		11: "ERRORCODE_APPID_MISMATCH",
		12: "ERRORCODE_USER_DUPLICATE",
		13: "ERRORCODE_MESSAGE_DUPLICATE",
		14: "ERRORCODE_MESSAGE_NOT_FOUND",
		15: "ERRORCODE_GROUP_NOT_FOUND",
		16: "ERRORCODE_INVALID_GROUP",
		17: "ERRORCODE_REACTION_NOT_FOUND",
	}
	ErrorCode_value = map[string]int32{
		"ERRORCODE_OK":                      0,
		"ERRORCODE_FAILED":                  1,
		"ERRORCODE_EXPIRED":                 2,
		"ERRORCODE_NONEXISTENT":             3,
		"ERRORCODE_INVALID":                 4,
		"ERRORCODE_WRONG_TYPE":              5,
		"ERRORCODE_PARSING_DATA_FAILURE":    6,
		"ERRORCODE_LOGIN_CONFLICT":          7,
		"ERRORCODE_USER_NOT_FOUND":          8,
		"ERRORCODE_HEADER_DECODING_FAILURE": 9,
		"ERRORCODE_WRONG_SESSION":           10,
		"ERRORCODE_APPID_MISMATCH":          11,
		"ERRORCODE_USER_DUPLICATE":          12,
		"ERRORCODE_MESSAGE_DUPLICATE":       13,
		"ERRORCODE_MESSAGE_NOT_FOUND":       14,
		"ERRORCODE_GROUP_NOT_FOUND":         15,
		"ERRORCODE_INVALID_GROUP":           16,
		"ERRORCODE_REACTION_NOT_FOUND":      17,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[2].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[2]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{2}
}

type TokenPlatformType int32

const (
	TokenPlatformType_TOKEN_PLATFORM_UNKNOWN     TokenPlatformType = 0
	TokenPlatformType_TOKEN_PLATFORM_ANDROID     TokenPlatformType = 1
	TokenPlatformType_TOKEN_PLATFORM_IOS         TokenPlatformType = 2
	TokenPlatformType_TOKEN_PLATFORM_WEB         TokenPlatformType = 3
	TokenPlatformType_TOKEN_PLATFORM_IOS_PUSHKIT TokenPlatformType = 4
)

// Enum value maps for TokenPlatformType.
var (
	TokenPlatformType_name = map[int32]string{
		0: "TOKEN_PLATFORM_UNKNOWN",
		1: "TOKEN_PLATFORM_ANDROID",
		2: "TOKEN_PLATFORM_IOS",
		3: "TOKEN_PLATFORM_WEB",
		4: "TOKEN_PLATFORM_IOS_PUSHKIT",
	}
	TokenPlatformType_value = map[string]int32{
		"TOKEN_PLATFORM_UNKNOWN":     0,
		"TOKEN_PLATFORM_ANDROID":     1,
		"TOKEN_PLATFORM_IOS":         2,
		"TOKEN_PLATFORM_WEB":         3,
		"TOKEN_PLATFORM_IOS_PUSHKIT": 4,
	}
)

func (x TokenPlatformType) Enum() *TokenPlatformType {
	p := new(TokenPlatformType)
	*p = x
	return p
}

func (x TokenPlatformType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenPlatformType) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[3].Descriptor()
}

func (TokenPlatformType) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[3]
}

func (x TokenPlatformType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenPlatformType.Descriptor instead.
func (TokenPlatformType) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{3}
}

type OnlineStatus int32

const (
	OnlineStatus_ONLINESTATUS_UNKNOWN   OnlineStatus = 0
	OnlineStatus_ONLINESTATUS_ONLINE    OnlineStatus = 1
	OnlineStatus_ONLINESTATUS_OFFLINE   OnlineStatus = 2
	OnlineStatus_ONLINESTATUS_IDLE      OnlineStatus = 3
	OnlineStatus_ONLINESTATUS_INVISIBLE OnlineStatus = 4
	OnlineStatus_ONLINESTATUS_AWAY      OnlineStatus = 5
	OnlineStatus_ONLINESTATUS_BUSY      OnlineStatus = 6
)

// Enum value maps for OnlineStatus.
var (
	OnlineStatus_name = map[int32]string{
		0: "ONLINESTATUS_UNKNOWN",
		1: "ONLINESTATUS_ONLINE",
		2: "ONLINESTATUS_OFFLINE",
		3: "ONLINESTATUS_IDLE",
		4: "ONLINESTATUS_INVISIBLE",
		5: "ONLINESTATUS_AWAY",
		6: "ONLINESTATUS_BUSY",
	}
	OnlineStatus_value = map[string]int32{
		"ONLINESTATUS_UNKNOWN":   0,
		"ONLINESTATUS_ONLINE":    1,
		"ONLINESTATUS_OFFLINE":   2,
		"ONLINESTATUS_IDLE":      3,
		"ONLINESTATUS_INVISIBLE": 4,
		"ONLINESTATUS_AWAY":      5,
		"ONLINESTATUS_BUSY":      6,
	}
)

func (x OnlineStatus) Enum() *OnlineStatus {
	p := new(OnlineStatus)
	*p = x
	return p
}

func (x OnlineStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnlineStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[4].Descriptor()
}

func (OnlineStatus) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[4]
}

func (x OnlineStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnlineStatus.Descriptor instead.
func (OnlineStatus) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{4}
}

// Group API
type GroupType int32

const (
	GroupType_GROUP_TYPE_UNKNOWN   GroupType = 0
	GroupType_GROUP_TYPE_PRIVATE   GroupType = 1
	GroupType_GROUP_TYPE_GROUP     GroupType = 2
	GroupType_GROUP_TYPE_PUBLIC    GroupType = 3
	GroupType_GROUP_TYPE_COMMUNITY GroupType = 4
	GroupType_GROUP_TYPE_OFFICIAL  GroupType = 5
)

// Enum value maps for GroupType.
var (
	GroupType_name = map[int32]string{
		0: "GROUP_TYPE_UNKNOWN",
		1: "GROUP_TYPE_PRIVATE",
		2: "GROUP_TYPE_GROUP",
		3: "GROUP_TYPE_PUBLIC",
		4: "GROUP_TYPE_COMMUNITY",
		5: "GROUP_TYPE_OFFICIAL",
	}
	GroupType_value = map[string]int32{
		"GROUP_TYPE_UNKNOWN":   0,
		"GROUP_TYPE_PRIVATE":   1,
		"GROUP_TYPE_GROUP":     2,
		"GROUP_TYPE_PUBLIC":    3,
		"GROUP_TYPE_COMMUNITY": 4,
		"GROUP_TYPE_OFFICIAL":  5,
	}
)

func (x GroupType) Enum() *GroupType {
	p := new(GroupType)
	*p = x
	return p
}

func (x GroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[5].Descriptor()
}

func (GroupType) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[5]
}

func (x GroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupType.Descriptor instead.
func (GroupType) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{5}
}

type GroupMode int32

const (
	GroupMode_GROUP_MODE_UNKNOWN GroupMode = 0
	GroupMode_GROUP_MODE_ADMIN   GroupMode = 1
	GroupMode_GROUP_MODE_NORMAL  GroupMode = 2
)

// Enum value maps for GroupMode.
var (
	GroupMode_name = map[int32]string{
		0: "GROUP_MODE_UNKNOWN",
		1: "GROUP_MODE_ADMIN",
		2: "GROUP_MODE_NORMAL",
	}
	GroupMode_value = map[string]int32{
		"GROUP_MODE_UNKNOWN": 0,
		"GROUP_MODE_ADMIN":   1,
		"GROUP_MODE_NORMAL":  2,
	}
)

func (x GroupMode) Enum() *GroupMode {
	p := new(GroupMode)
	*p = x
	return p
}

func (x GroupMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupMode) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[6].Descriptor()
}

func (GroupMode) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[6]
}

func (x GroupMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupMode.Descriptor instead.
func (GroupMode) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{6}
}

type GroupSortType int32

const (
	GroupSortType_GROUP_SORT_BY_RANDOM       GroupSortType = 0
	GroupSortType_GROUP_SORT_BY_LAST_MESSAGE GroupSortType = 1
	GroupSortType_GROUP_SORT_BY_CREATED_AT   GroupSortType = 2
)

// Enum value maps for GroupSortType.
var (
	GroupSortType_name = map[int32]string{
		0: "GROUP_SORT_BY_RANDOM",
		1: "GROUP_SORT_BY_LAST_MESSAGE",
		2: "GROUP_SORT_BY_CREATED_AT",
	}
	GroupSortType_value = map[string]int32{
		"GROUP_SORT_BY_RANDOM":       0,
		"GROUP_SORT_BY_LAST_MESSAGE": 1,
		"GROUP_SORT_BY_CREATED_AT":   2,
	}
)

func (x GroupSortType) Enum() *GroupSortType {
	p := new(GroupSortType)
	*p = x
	return p
}

func (x GroupSortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupSortType) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[7].Descriptor()
}

func (GroupSortType) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[7]
}

func (x GroupSortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupSortType.Descriptor instead.
func (GroupSortType) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{7}
}

type ReactionCode int32

const (
	ReactionCode_REACTIONCODE_LIKE  ReactionCode = 0
	ReactionCode_REACTIONCODE_LOVE  ReactionCode = 1
	ReactionCode_REACTIONCODE_HAHA  ReactionCode = 2
	ReactionCode_REACTIONCODE_YAY   ReactionCode = 3
	ReactionCode_REACTIONCODE_WOW   ReactionCode = 4
	ReactionCode_REACTIONCODE_SAD   ReactionCode = 5
	ReactionCode_REACTIONCODE_ANGRY ReactionCode = 6
)

// Enum value maps for ReactionCode.
var (
	ReactionCode_name = map[int32]string{
		0: "REACTIONCODE_LIKE",
		1: "REACTIONCODE_LOVE",
		2: "REACTIONCODE_HAHA",
		3: "REACTIONCODE_YAY",
		4: "REACTIONCODE_WOW",
		5: "REACTIONCODE_SAD",
		6: "REACTIONCODE_ANGRY",
	}
	ReactionCode_value = map[string]int32{
		"REACTIONCODE_LIKE":  0,
		"REACTIONCODE_LOVE":  1,
		"REACTIONCODE_HAHA":  2,
		"REACTIONCODE_YAY":   3,
		"REACTIONCODE_WOW":   4,
		"REACTIONCODE_SAD":   5,
		"REACTIONCODE_ANGRY": 6,
	}
)

func (x ReactionCode) Enum() *ReactionCode {
	p := new(ReactionCode)
	*p = x
	return p
}

func (x ReactionCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReactionCode) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[8].Descriptor()
}

func (ReactionCode) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[8]
}

func (x ReactionCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReactionCode.Descriptor instead.
func (ReactionCode) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{8}
}

type BroadcastGroupType int32

const (
	BroadcastGroupType_BROADCAST_GROUP_TYPE_NEW                BroadcastGroupType = 0
	BroadcastGroupType_BROADCAST_GROUP_TYPE_UPDATE             BroadcastGroupType = 1
	BroadcastGroupType_BROADCAST_GROUP_TYPE_DELETE             BroadcastGroupType = 2
	BroadcastGroupType_BROADCAST_GROUP_TYPE_REGISTRATION       BroadcastGroupType = 3
	BroadcastGroupType_BROADCAST_GROUP_TYPE_START_SECRET_CHAT  BroadcastGroupType = 4
	BroadcastGroupType_BROADCAST_GROUP_TYPE_ACCEPT_SECRET_CHAT BroadcastGroupType = 5
	BroadcastGroupType_BROADCAST_GROUP_TYPE_DELETE_SECRET_CHAT BroadcastGroupType = 6
	BroadcastGroupType_BROADCAST_GROUP_TYPE_NEW_REGISTER       BroadcastGroupType = 7
	BroadcastGroupType_BROADCAST_GROUP_TYPE_GROUPCALL_START    BroadcastGroupType = 8
	BroadcastGroupType_BROADCAST_GROUP_TYPE_GROUPCALL_CREATE   BroadcastGroupType = 9
	BroadcastGroupType_BROADCAST_GROUP_TYPE_GROUPCALL_JOIN     BroadcastGroupType = 10
	BroadcastGroupType_BROADCAST_GROUP_TYPE_GROUPCALL_LEAVE    BroadcastGroupType = 11
	BroadcastGroupType_BROADCAST_GROUP_TYPE_GROUPCALL_INVITE   BroadcastGroupType = 12
	BroadcastGroupType_BROADCAST_GROUP_TYPE_GROUPCALL_STOP     BroadcastGroupType = 13
)

// Enum value maps for BroadcastGroupType.
var (
	BroadcastGroupType_name = map[int32]string{
		0:  "BROADCAST_GROUP_TYPE_NEW",
		1:  "BROADCAST_GROUP_TYPE_UPDATE",
		2:  "BROADCAST_GROUP_TYPE_DELETE",
		3:  "BROADCAST_GROUP_TYPE_REGISTRATION",
		4:  "BROADCAST_GROUP_TYPE_START_SECRET_CHAT",
		5:  "BROADCAST_GROUP_TYPE_ACCEPT_SECRET_CHAT",
		6:  "BROADCAST_GROUP_TYPE_DELETE_SECRET_CHAT",
		7:  "BROADCAST_GROUP_TYPE_NEW_REGISTER",
		8:  "BROADCAST_GROUP_TYPE_GROUPCALL_START",
		9:  "BROADCAST_GROUP_TYPE_GROUPCALL_CREATE",
		10: "BROADCAST_GROUP_TYPE_GROUPCALL_JOIN",
		11: "BROADCAST_GROUP_TYPE_GROUPCALL_LEAVE",
		12: "BROADCAST_GROUP_TYPE_GROUPCALL_INVITE",
		13: "BROADCAST_GROUP_TYPE_GROUPCALL_STOP",
	}
	BroadcastGroupType_value = map[string]int32{
		"BROADCAST_GROUP_TYPE_NEW":                0,
		"BROADCAST_GROUP_TYPE_UPDATE":             1,
		"BROADCAST_GROUP_TYPE_DELETE":             2,
		"BROADCAST_GROUP_TYPE_REGISTRATION":       3,
		"BROADCAST_GROUP_TYPE_START_SECRET_CHAT":  4,
		"BROADCAST_GROUP_TYPE_ACCEPT_SECRET_CHAT": 5,
		"BROADCAST_GROUP_TYPE_DELETE_SECRET_CHAT": 6,
		"BROADCAST_GROUP_TYPE_NEW_REGISTER":       7,
		"BROADCAST_GROUP_TYPE_GROUPCALL_START":    8,
		"BROADCAST_GROUP_TYPE_GROUPCALL_CREATE":   9,
		"BROADCAST_GROUP_TYPE_GROUPCALL_JOIN":     10,
		"BROADCAST_GROUP_TYPE_GROUPCALL_LEAVE":    11,
		"BROADCAST_GROUP_TYPE_GROUPCALL_INVITE":   12,
		"BROADCAST_GROUP_TYPE_GROUPCALL_STOP":     13,
	}
)

func (x BroadcastGroupType) Enum() *BroadcastGroupType {
	p := new(BroadcastGroupType)
	*p = x
	return p
}

func (x BroadcastGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BroadcastGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[9].Descriptor()
}

func (BroadcastGroupType) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[9]
}

func (x BroadcastGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BroadcastGroupType.Descriptor instead.
func (BroadcastGroupType) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{9}
}

type MessageStatus int32

const (
	MessageStatus_MESSAGE_STATUS_UNKNOWN  MessageStatus = 0
	MessageStatus_MESSAGE_STATUS_SENT     MessageStatus = 1
	MessageStatus_MESSAGE_STATUS_RECEIVED MessageStatus = 2
	MessageStatus_MESSAGE_STATUS_SEEN     MessageStatus = 3
	MessageStatus_MESSAGE_STATUS_DELETED  MessageStatus = 4
)

// Enum value maps for MessageStatus.
var (
	MessageStatus_name = map[int32]string{
		0: "MESSAGE_STATUS_UNKNOWN",
		1: "MESSAGE_STATUS_SENT",
		2: "MESSAGE_STATUS_RECEIVED",
		3: "MESSAGE_STATUS_SEEN",
		4: "MESSAGE_STATUS_DELETED",
	}
	MessageStatus_value = map[string]int32{
		"MESSAGE_STATUS_UNKNOWN":  0,
		"MESSAGE_STATUS_SENT":     1,
		"MESSAGE_STATUS_RECEIVED": 2,
		"MESSAGE_STATUS_SEEN":     3,
		"MESSAGE_STATUS_DELETED":  4,
	}
)

func (x MessageStatus) Enum() *MessageStatus {
	p := new(MessageStatus)
	*p = x
	return p
}

func (x MessageStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[10].Descriptor()
}

func (MessageStatus) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[10]
}

func (x MessageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageStatus.Descriptor instead.
func (MessageStatus) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{10}
}

type MessageType int32

const (
	MessageType_MESSAGE_TYPE_TEXT          MessageType = 0
	MessageType_MESSAGE_TYPE_CALL          MessageType = 1
	MessageType_MESSAGE_TYPE_IMAGE         MessageType = 2
	MessageType_MESSAGE_TYPE_AUDIO         MessageType = 3
	MessageType_MESSAGE_TYPE_VIDEO         MessageType = 4
	MessageType_MESSAGE_TYPE_FIRST_MESSAGE MessageType = 5
	MessageType_MESSAGE_TYPE_GROUP_UPDATE  MessageType = 6
	MessageType_MESSAGE_TYPE_LEAVE_GROUP   MessageType = 7
	MessageType_MESSAGE_TYPE_REPLY         MessageType = 8
	MessageType_MESSAGE_TYPE_FORWARD       MessageType = 9
	MessageType_MESSAGE_TYPE_STICKER       MessageType = 10
	MessageType_MESSAGE_TYPE_LINK          MessageType = 11
	MessageType_MESSAGE_TYPE_FILE          MessageType = 12
	MessageType_MESSAGE_TYPE_SCREENSHOT    MessageType = 13
	MessageType_MESSAGE_TYPE_LOCATION      MessageType = 14
	MessageType_MESSAGE_TYPE_LIVE_LOCATION MessageType = 15
	MessageType_MESSAGE_TYPE_GROUPCALL     MessageType = 16
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:  "MESSAGE_TYPE_TEXT",
		1:  "MESSAGE_TYPE_CALL",
		2:  "MESSAGE_TYPE_IMAGE",
		3:  "MESSAGE_TYPE_AUDIO",
		4:  "MESSAGE_TYPE_VIDEO",
		5:  "MESSAGE_TYPE_FIRST_MESSAGE",
		6:  "MESSAGE_TYPE_GROUP_UPDATE",
		7:  "MESSAGE_TYPE_LEAVE_GROUP",
		8:  "MESSAGE_TYPE_REPLY",
		9:  "MESSAGE_TYPE_FORWARD",
		10: "MESSAGE_TYPE_STICKER",
		11: "MESSAGE_TYPE_LINK",
		12: "MESSAGE_TYPE_FILE",
		13: "MESSAGE_TYPE_SCREENSHOT",
		14: "MESSAGE_TYPE_LOCATION",
		15: "MESSAGE_TYPE_LIVE_LOCATION",
		16: "MESSAGE_TYPE_GROUPCALL",
	}
	MessageType_value = map[string]int32{
		"MESSAGE_TYPE_TEXT":          0,
		"MESSAGE_TYPE_CALL":          1,
		"MESSAGE_TYPE_IMAGE":         2,
		"MESSAGE_TYPE_AUDIO":         3,
		"MESSAGE_TYPE_VIDEO":         4,
		"MESSAGE_TYPE_FIRST_MESSAGE": 5,
		"MESSAGE_TYPE_GROUP_UPDATE":  6,
		"MESSAGE_TYPE_LEAVE_GROUP":   7,
		"MESSAGE_TYPE_REPLY":         8,
		"MESSAGE_TYPE_FORWARD":       9,
		"MESSAGE_TYPE_STICKER":       10,
		"MESSAGE_TYPE_LINK":          11,
		"MESSAGE_TYPE_FILE":          12,
		"MESSAGE_TYPE_SCREENSHOT":    13,
		"MESSAGE_TYPE_LOCATION":      14,
		"MESSAGE_TYPE_LIVE_LOCATION": 15,
		"MESSAGE_TYPE_GROUPCALL":     16,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[11].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[11]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{11}
}

type BroadcastMessageType int32

const (
	BroadcastMessageType_BROADCAST_MESSAGE_TYPE_NEW                 BroadcastMessageType = 0
	BroadcastMessageType_BROADCAST_MESSAGE_TYPE_UPDATE              BroadcastMessageType = 1
	BroadcastMessageType_BROADCAST_MESSAGE_TYPE_DELETE              BroadcastMessageType = 2
	BroadcastMessageType_BROADCAST_MESSAGE_TYPE_NEW_SECRET          BroadcastMessageType = 3
	BroadcastMessageType_BROADCAST_MESSAGE_TYPE_LIVE_LOCATION       BroadcastMessageType = 4
	BroadcastMessageType_BROADCAST_MESSAGE_TYPE_LIVE_LOCATION_START BroadcastMessageType = 5
	BroadcastMessageType_BROADCAST_MESSAGE_TYPE_LIVE_LOCATION_STOP  BroadcastMessageType = 6
	BroadcastMessageType_BROADCAST_MESSAGE_TYPE_GROUPCALL           BroadcastMessageType = 7
	BroadcastMessageType_BROADCAST_MESSAGE_TYPE_REACTION            BroadcastMessageType = 8
)

// Enum value maps for BroadcastMessageType.
var (
	BroadcastMessageType_name = map[int32]string{
		0: "BROADCAST_MESSAGE_TYPE_NEW",
		1: "BROADCAST_MESSAGE_TYPE_UPDATE",
		2: "BROADCAST_MESSAGE_TYPE_DELETE",
		3: "BROADCAST_MESSAGE_TYPE_NEW_SECRET",
		4: "BROADCAST_MESSAGE_TYPE_LIVE_LOCATION",
		5: "BROADCAST_MESSAGE_TYPE_LIVE_LOCATION_START",
		6: "BROADCAST_MESSAGE_TYPE_LIVE_LOCATION_STOP",
		7: "BROADCAST_MESSAGE_TYPE_GROUPCALL",
		8: "BROADCAST_MESSAGE_TYPE_REACTION",
	}
	BroadcastMessageType_value = map[string]int32{
		"BROADCAST_MESSAGE_TYPE_NEW":                 0,
		"BROADCAST_MESSAGE_TYPE_UPDATE":              1,
		"BROADCAST_MESSAGE_TYPE_DELETE":              2,
		"BROADCAST_MESSAGE_TYPE_NEW_SECRET":          3,
		"BROADCAST_MESSAGE_TYPE_LIVE_LOCATION":       4,
		"BROADCAST_MESSAGE_TYPE_LIVE_LOCATION_START": 5,
		"BROADCAST_MESSAGE_TYPE_LIVE_LOCATION_STOP":  6,
		"BROADCAST_MESSAGE_TYPE_GROUPCALL":           7,
		"BROADCAST_MESSAGE_TYPE_REACTION":            8,
	}
)

func (x BroadcastMessageType) Enum() *BroadcastMessageType {
	p := new(BroadcastMessageType)
	*p = x
	return p
}

func (x BroadcastMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BroadcastMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[12].Descriptor()
}

func (BroadcastMessageType) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[12]
}

func (x BroadcastMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BroadcastMessageType.Descriptor instead.
func (BroadcastMessageType) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{12}
}

type LiveLocationStatus int32

const (
	LiveLocationStatus_LIVE_LOCATION_STATUS_START  LiveLocationStatus = 0
	LiveLocationStatus_LIVE_LOCATION_STATUS_UPDATE LiveLocationStatus = 1
	LiveLocationStatus_LIVE_LOCATION_STATUS_STOP   LiveLocationStatus = 2
)

// Enum value maps for LiveLocationStatus.
var (
	LiveLocationStatus_name = map[int32]string{
		0: "LIVE_LOCATION_STATUS_START",
		1: "LIVE_LOCATION_STATUS_UPDATE",
		2: "LIVE_LOCATION_STATUS_STOP",
	}
	LiveLocationStatus_value = map[string]int32{
		"LIVE_LOCATION_STATUS_START":  0,
		"LIVE_LOCATION_STATUS_UPDATE": 1,
		"LIVE_LOCATION_STATUS_STOP":   2,
	}
)

func (x LiveLocationStatus) Enum() *LiveLocationStatus {
	p := new(LiveLocationStatus)
	*p = x
	return p
}

func (x LiveLocationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LiveLocationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[13].Descriptor()
}

func (LiveLocationStatus) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[13]
}

func (x LiveLocationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LiveLocationStatus.Descriptor instead.
func (LiveLocationStatus) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{13}
}

type MediaType int32

const (
	MediaType_MEDIA_TYPE_UNKNOWN MediaType = 0
	MediaType_MEDIA_TYPE_AUDIO   MediaType = 1
	MediaType_MEDIA_TYPE_VIDEO   MediaType = 2
)

// Enum value maps for MediaType.
var (
	MediaType_name = map[int32]string{
		0: "MEDIA_TYPE_UNKNOWN",
		1: "MEDIA_TYPE_AUDIO",
		2: "MEDIA_TYPE_VIDEO",
	}
	MediaType_value = map[string]int32{
		"MEDIA_TYPE_UNKNOWN": 0,
		"MEDIA_TYPE_AUDIO":   1,
		"MEDIA_TYPE_VIDEO":   2,
	}
)

func (x MediaType) Enum() *MediaType {
	p := new(MediaType)
	*p = x
	return p
}

func (x MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[14].Descriptor()
}

func (MediaType) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[14]
}

func (x MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaType.Descriptor instead.
func (MediaType) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{14}
}

type CallType int32

const (
	CallType_CALL_TYPE_UNKNOWN CallType = 0
	CallType_CALL_TYPE_PRIVATE CallType = 1
	CallType_CALL_TYPE_GROUP   CallType = 2
)

// Enum value maps for CallType.
var (
	CallType_name = map[int32]string{
		0: "CALL_TYPE_UNKNOWN",
		1: "CALL_TYPE_PRIVATE",
		2: "CALL_TYPE_GROUP",
	}
	CallType_value = map[string]int32{
		"CALL_TYPE_UNKNOWN": 0,
		"CALL_TYPE_PRIVATE": 1,
		"CALL_TYPE_GROUP":   2,
	}
)

func (x CallType) Enum() *CallType {
	p := new(CallType)
	*p = x
	return p
}

func (x CallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallType) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[15].Descriptor()
}

func (CallType) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[15]
}

func (x CallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallType.Descriptor instead.
func (CallType) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{15}
}

type CallStatus int32

const (
	CallStatus_CALL_STATUS_UNKNOWN  CallStatus = 0
	CallStatus_CALL_STATUS_ONGOING  CallStatus = 1
	CallStatus_CALL_STATUS_TIMEOUT  CallStatus = 2
	CallStatus_CALL_STATUS_FINISHED CallStatus = 3
	CallStatus_CALL_STATUS_SEEN     CallStatus = 4
	CallStatus_CALL_STATUS_SENT     CallStatus = 5
)

// Enum value maps for CallStatus.
var (
	CallStatus_name = map[int32]string{
		0: "CALL_STATUS_UNKNOWN",
		1: "CALL_STATUS_ONGOING",
		2: "CALL_STATUS_TIMEOUT",
		3: "CALL_STATUS_FINISHED",
		4: "CALL_STATUS_SEEN",
		5: "CALL_STATUS_SENT",
	}
	CallStatus_value = map[string]int32{
		"CALL_STATUS_UNKNOWN":  0,
		"CALL_STATUS_ONGOING":  1,
		"CALL_STATUS_TIMEOUT":  2,
		"CALL_STATUS_FINISHED": 3,
		"CALL_STATUS_SEEN":     4,
		"CALL_STATUS_SENT":     5,
	}
)

func (x CallStatus) Enum() *CallStatus {
	p := new(CallStatus)
	*p = x
	return p
}

func (x CallStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[16].Descriptor()
}

func (CallStatus) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[16]
}

func (x CallStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallStatus.Descriptor instead.
func (CallStatus) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{16}
}

type CallStreamType int32

const (
	CallStreamType_CALL_STREAM_TYPE_UNKNOWN CallStreamType = 0
	CallStreamType_CALL_STREAM_TYPE_P2P     CallStreamType = 1
	CallStreamType_CALL_STREAM_TYPE_RELAY   CallStreamType = 2
)

// Enum value maps for CallStreamType.
var (
	CallStreamType_name = map[int32]string{
		0: "CALL_STREAM_TYPE_UNKNOWN",
		1: "CALL_STREAM_TYPE_P2P",
		2: "CALL_STREAM_TYPE_RELAY",
	}
	CallStreamType_value = map[string]int32{
		"CALL_STREAM_TYPE_UNKNOWN": 0,
		"CALL_STREAM_TYPE_P2P":     1,
		"CALL_STREAM_TYPE_RELAY":   2,
	}
)

func (x CallStreamType) Enum() *CallStreamType {
	p := new(CallStreamType)
	*p = x
	return p
}

func (x CallStreamType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallStreamType) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[17].Descriptor()
}

func (CallStreamType) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[17]
}

func (x CallStreamType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallStreamType.Descriptor instead.
func (CallStreamType) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{17}
}

type TypeUpdate int32

const (
	TypeUpdate_TYPECALLUPDATE_NORMAL    TypeUpdate = 0
	TypeUpdate_TYPECALLUPDATE_CONNECTED TypeUpdate = 1
)

// Enum value maps for TypeUpdate.
var (
	TypeUpdate_name = map[int32]string{
		0: "TYPECALLUPDATE_NORMAL",
		1: "TYPECALLUPDATE_CONNECTED",
	}
	TypeUpdate_value = map[string]int32{
		"TYPECALLUPDATE_NORMAL":    0,
		"TYPECALLUPDATE_CONNECTED": 1,
	}
)

func (x TypeUpdate) Enum() *TypeUpdate {
	p := new(TypeUpdate)
	*p = x
	return p
}

func (x TypeUpdate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeUpdate) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[18].Descriptor()
}

func (TypeUpdate) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[18]
}

func (x TypeUpdate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeUpdate.Descriptor instead.
func (TypeUpdate) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{18}
}

type CallAnswer int32

const (
	CallAnswer_CALL_ANSWER_UNKNOWN CallAnswer = 0
	CallAnswer_CALL_ANSWER_ACCEPT  CallAnswer = 1
	CallAnswer_CALL_ANSWER_REJECT  CallAnswer = 2
	CallAnswer_CALL_ANSWER_TIMEOUT CallAnswer = 3
	CallAnswer_CALL_ANSWER_FAILED  CallAnswer = 4
)

// Enum value maps for CallAnswer.
var (
	CallAnswer_name = map[int32]string{
		0: "CALL_ANSWER_UNKNOWN",
		1: "CALL_ANSWER_ACCEPT",
		2: "CALL_ANSWER_REJECT",
		3: "CALL_ANSWER_TIMEOUT",
		4: "CALL_ANSWER_FAILED",
	}
	CallAnswer_value = map[string]int32{
		"CALL_ANSWER_UNKNOWN": 0,
		"CALL_ANSWER_ACCEPT":  1,
		"CALL_ANSWER_REJECT":  2,
		"CALL_ANSWER_TIMEOUT": 3,
		"CALL_ANSWER_FAILED":  4,
	}
)

func (x CallAnswer) Enum() *CallAnswer {
	p := new(CallAnswer)
	*p = x
	return p
}

func (x CallAnswer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallAnswer) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[19].Descriptor()
}

func (CallAnswer) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[19]
}

func (x CallAnswer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallAnswer.Descriptor instead.
func (CallAnswer) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{19}
}

type StopCallType int32

const (
	StopCallType_STOPCALL_TYPE_UNKNOWN StopCallType = 0
	StopCallType_STOPCALL_TYPE_TIMEOUT StopCallType = 1 // timeout of connecting to media server
	StopCallType_STOPCALL_TYPE_HANGUP  StopCallType = 2 // user stop the call
)

// Enum value maps for StopCallType.
var (
	StopCallType_name = map[int32]string{
		0: "STOPCALL_TYPE_UNKNOWN",
		1: "STOPCALL_TYPE_TIMEOUT",
		2: "STOPCALL_TYPE_HANGUP",
	}
	StopCallType_value = map[string]int32{
		"STOPCALL_TYPE_UNKNOWN": 0,
		"STOPCALL_TYPE_TIMEOUT": 1,
		"STOPCALL_TYPE_HANGUP":  2,
	}
)

func (x StopCallType) Enum() *StopCallType {
	p := new(StopCallType)
	*p = x
	return p
}

func (x StopCallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopCallType) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[20].Descriptor()
}

func (StopCallType) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[20]
}

func (x StopCallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopCallType.Descriptor instead.
func (StopCallType) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{20}
}

type SdpType int32

const (
	SdpType_SDP_TYPE_UNKNOWN SdpType = 0
	SdpType_SDP_TYPE_OFFER   SdpType = 1
	SdpType_SDP_TYPE_ANSWER  SdpType = 2
)

// Enum value maps for SdpType.
var (
	SdpType_name = map[int32]string{
		0: "SDP_TYPE_UNKNOWN",
		1: "SDP_TYPE_OFFER",
		2: "SDP_TYPE_ANSWER",
	}
	SdpType_value = map[string]int32{
		"SDP_TYPE_UNKNOWN": 0,
		"SDP_TYPE_OFFER":   1,
		"SDP_TYPE_ANSWER":  2,
	}
)

func (x SdpType) Enum() *SdpType {
	p := new(SdpType)
	*p = x
	return p
}

func (x SdpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SdpType) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[21].Descriptor()
}

func (SdpType) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[21]
}

func (x SdpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SdpType.Descriptor instead.
func (SdpType) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{21}
}

type CallEventType int32

const (
	CallEventType_CALL_EVENT_UNKNOWN      CallEventType = 0
	CallEventType_CALL_EVENT_DISCONNECTED CallEventType = 1
	CallEventType_CALL_EVENT_CONNECTED    CallEventType = 2
)

// Enum value maps for CallEventType.
var (
	CallEventType_name = map[int32]string{
		0: "CALL_EVENT_UNKNOWN",
		1: "CALL_EVENT_DISCONNECTED",
		2: "CALL_EVENT_CONNECTED",
	}
	CallEventType_value = map[string]int32{
		"CALL_EVENT_UNKNOWN":      0,
		"CALL_EVENT_DISCONNECTED": 1,
		"CALL_EVENT_CONNECTED":    2,
	}
)

func (x CallEventType) Enum() *CallEventType {
	p := new(CallEventType)
	*p = x
	return p
}

func (x CallEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CallEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[22].Descriptor()
}

func (CallEventType) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[22]
}

func (x CallEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CallEventType.Descriptor instead.
func (CallEventType) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{22}
}

type EventType int32

const (
	EventType_EVENT_TYPE_UNKNOWN                 EventType = 0
	EventType_EVENT_TYPE_CALL_CANCEL             EventType = 1
	EventType_EVENT_TYPE_CALL_RESET              EventType = 2
	EventType_EVENT_TYPE_CALL_RECEIVED_EVENT     EventType = 3
	EventType_EVENT_TYPE_CALL_REQUEST_VIDEO      EventType = 4
	EventType_EVENT_TYPE_CALL_INACTIVE_VIDEO     EventType = 5
	EventType_EVENT_TYPE_CALL_ACTIVE_VIDEO       EventType = 6
	EventType_EVENT_TYPE_CALL_CHECKING_AVAILABLE EventType = 7
	EventType_EVENT_TYPE_MESSAGING_START_TYPING  EventType = 8
	EventType_EVENT_TYPE_MESSAGING_STOP_TYPING   EventType = 9
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_UNKNOWN",
		1: "EVENT_TYPE_CALL_CANCEL",
		2: "EVENT_TYPE_CALL_RESET",
		3: "EVENT_TYPE_CALL_RECEIVED_EVENT",
		4: "EVENT_TYPE_CALL_REQUEST_VIDEO",
		5: "EVENT_TYPE_CALL_INACTIVE_VIDEO",
		6: "EVENT_TYPE_CALL_ACTIVE_VIDEO",
		7: "EVENT_TYPE_CALL_CHECKING_AVAILABLE",
		8: "EVENT_TYPE_MESSAGING_START_TYPING",
		9: "EVENT_TYPE_MESSAGING_STOP_TYPING",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_UNKNOWN":                 0,
		"EVENT_TYPE_CALL_CANCEL":             1,
		"EVENT_TYPE_CALL_RESET":              2,
		"EVENT_TYPE_CALL_RECEIVED_EVENT":     3,
		"EVENT_TYPE_CALL_REQUEST_VIDEO":      4,
		"EVENT_TYPE_CALL_INACTIVE_VIDEO":     5,
		"EVENT_TYPE_CALL_ACTIVE_VIDEO":       6,
		"EVENT_TYPE_CALL_CHECKING_AVAILABLE": 7,
		"EVENT_TYPE_MESSAGING_START_TYPING":  8,
		"EVENT_TYPE_MESSAGING_STOP_TYPING":   9,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[23].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[23]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{23}
}

type GroupCallType int32

const (
	GroupCallType_GROUPCALL_TYPE_UNKNOWN GroupCallType = 0
	GroupCallType_GROUPCALL_TYPE_AUDIO   GroupCallType = 1
	GroupCallType_GROUPCALL_TYPE_VIDEO   GroupCallType = 2
)

// Enum value maps for GroupCallType.
var (
	GroupCallType_name = map[int32]string{
		0: "GROUPCALL_TYPE_UNKNOWN",
		1: "GROUPCALL_TYPE_AUDIO",
		2: "GROUPCALL_TYPE_VIDEO",
	}
	GroupCallType_value = map[string]int32{
		"GROUPCALL_TYPE_UNKNOWN": 0,
		"GROUPCALL_TYPE_AUDIO":   1,
		"GROUPCALL_TYPE_VIDEO":   2,
	}
)

func (x GroupCallType) Enum() *GroupCallType {
	p := new(GroupCallType)
	*p = x
	return p
}

func (x GroupCallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupCallType) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[24].Descriptor()
}

func (GroupCallType) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[24]
}

func (x GroupCallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupCallType.Descriptor instead.
func (GroupCallType) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{24}
}

type GroupCallStatus int32

const (
	GroupCallStatus_GROUPCALL_STATUS_UNKNOWN  GroupCallStatus = 0
	GroupCallStatus_GROUPCALL_STATUS_ONGOING  GroupCallStatus = 1
	GroupCallStatus_GROUPCALL_STATUS_FINISHED GroupCallStatus = 2
)

// Enum value maps for GroupCallStatus.
var (
	GroupCallStatus_name = map[int32]string{
		0: "GROUPCALL_STATUS_UNKNOWN",
		1: "GROUPCALL_STATUS_ONGOING",
		2: "GROUPCALL_STATUS_FINISHED",
	}
	GroupCallStatus_value = map[string]int32{
		"GROUPCALL_STATUS_UNKNOWN":  0,
		"GROUPCALL_STATUS_ONGOING":  1,
		"GROUPCALL_STATUS_FINISHED": 2,
	}
)

func (x GroupCallStatus) Enum() *GroupCallStatus {
	p := new(GroupCallStatus)
	*p = x
	return p
}

func (x GroupCallStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupCallStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_voicechat_proto_enumTypes[25].Descriptor()
}

func (GroupCallStatus) Type() protoreflect.EnumType {
	return &file_voicechat_proto_enumTypes[25]
}

func (x GroupCallStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupCallStatus.Descriptor instead.
func (GroupCallStatus) EnumDescriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{25}
}

type ErrorMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error ErrorCode `protobuf:"varint,1,opt,name=error,proto3,enum=voicechat.ErrorCode" json:"error,omitempty"`
	Msg   string    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ErrorMessage) Reset() {
	*x = ErrorMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorMessage) ProtoMessage() {}

func (x *ErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorMessage.ProtoReflect.Descriptor instead.
func (*ErrorMessage) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{0}
}

func (x *ErrorMessage) GetError() ErrorCode {
	if x != nil {
		return x.Error
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *ErrorMessage) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId        uint32 `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	ServerIp        uint32 `protobuf:"varint,2,opt,name=server_ip,json=serverIp,proto3" json:"server_ip,omitempty"`
	ServerPort      uint32 `protobuf:"varint,3,opt,name=server_port,json=serverPort,proto3" json:"server_port,omitempty"`
	ConnectionId    uint32 `protobuf:"varint,4,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	Uin             uint64 `protobuf:"varint,5,opt,name=uin,proto3" json:"uin,omitempty"`
	AppId           uint32 `protobuf:"varint,6,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	EventStartT     uint64 `protobuf:"varint,7,opt,name=event_start_t,json=eventStartT,proto3" json:"event_start_t,omitempty"`
	EventEndT       uint64 `protobuf:"varint,8,opt,name=event_end_t,json=eventEndT,proto3" json:"event_end_t,omitempty"`
	MessageId       uint32 `protobuf:"varint,9,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Session         string `protobuf:"bytes,10,opt,name=session,proto3" json:"session,omitempty"`
	DeviceId        string `protobuf:"bytes,11,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	ClientOs        string `protobuf:"bytes,12,opt,name=client_os,json=clientOs,proto3" json:"client_os,omitempty"`
	ClientOsVersion string `protobuf:"bytes,13,opt,name=client_os_version,json=clientOsVersion,proto3" json:"client_os_version,omitempty"`
	Dir             uint32 `protobuf:"varint,14,opt,name=dir,proto3" json:"dir,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{1}
}

func (x *Header) GetServerId() uint32 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *Header) GetServerIp() uint32 {
	if x != nil {
		return x.ServerIp
	}
	return 0
}

func (x *Header) GetServerPort() uint32 {
	if x != nil {
		return x.ServerPort
	}
	return 0
}

func (x *Header) GetConnectionId() uint32 {
	if x != nil {
		return x.ConnectionId
	}
	return 0
}

func (x *Header) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *Header) GetAppId() uint32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *Header) GetEventStartT() uint64 {
	if x != nil {
		return x.EventStartT
	}
	return 0
}

func (x *Header) GetEventEndT() uint64 {
	if x != nil {
		return x.EventEndT
	}
	return 0
}

func (x *Header) GetMessageId() uint32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *Header) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *Header) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Header) GetClientOs() string {
	if x != nil {
		return x.ClientOs
	}
	return ""
}

func (x *Header) GetClientOsVersion() string {
	if x != nil {
		return x.ClientOsVersion
	}
	return ""
}

func (x *Header) GetDir() uint32 {
	if x != nil {
		return x.Dir
	}
	return 0
}

type UserProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin      uint64 `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Birthday string `protobuf:"bytes,3,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Address  string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *UserProfile) Reset() {
	*x = UserProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfile) ProtoMessage() {}

func (x *UserProfile) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfile.ProtoReflect.Descriptor instead.
func (*UserProfile) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{2}
}

func (x *UserProfile) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *UserProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserProfile) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *UserProfile) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Uin    uint64  `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
}

func (x *GetProfileReq) Reset() {
	*x = GetProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileReq) ProtoMessage() {}

func (x *GetProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileReq.ProtoReflect.Descriptor instead.
func (*GetProfileReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{3}
}

func (x *GetProfileReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetProfileReq) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

type GetProfileResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header      *Header      `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result      ErrorCode    `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Uin         uint64       `protobuf:"varint,3,opt,name=uin,proto3" json:"uin,omitempty"`
	UserProfile *UserProfile `protobuf:"bytes,4,opt,name=user_profile,json=userProfile,proto3" json:"user_profile,omitempty"`
}

func (x *GetProfileResp) Reset() {
	*x = GetProfileResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfileResp) ProtoMessage() {}

func (x *GetProfileResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfileResp.ProtoReflect.Descriptor instead.
func (*GetProfileResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{4}
}

func (x *GetProfileResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetProfileResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *GetProfileResp) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *GetProfileResp) GetUserProfile() *UserProfile {
	if x != nil {
		return x.UserProfile
	}
	return nil
}

type UpdateProfileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header      *Header      `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Uin         uint64       `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	UserProfile *UserProfile `protobuf:"bytes,3,opt,name=user_profile,json=userProfile,proto3" json:"user_profile,omitempty"`
}

func (x *UpdateProfileReq) Reset() {
	*x = UpdateProfileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileReq) ProtoMessage() {}

func (x *UpdateProfileReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileReq.ProtoReflect.Descriptor instead.
func (*UpdateProfileReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateProfileReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateProfileReq) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *UpdateProfileReq) GetUserProfile() *UserProfile {
	if x != nil {
		return x.UserProfile
	}
	return nil
}

type UpdateProfileResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header      *Header      `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result      ErrorCode    `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Uin         uint64       `protobuf:"varint,3,opt,name=uin,proto3" json:"uin,omitempty"`
	UserProfile *UserProfile `protobuf:"bytes,4,opt,name=user_profile,json=userProfile,proto3" json:"user_profile,omitempty"`
}

func (x *UpdateProfileResp) Reset() {
	*x = UpdateProfileResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfileResp) ProtoMessage() {}

func (x *UpdateProfileResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfileResp.ProtoReflect.Descriptor instead.
func (*UpdateProfileResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateProfileResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateProfileResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *UpdateProfileResp) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *UpdateProfileResp) GetUserProfile() *UserProfile {
	if x != nil {
		return x.UserProfile
	}
	return nil
}

type RegisterProfileTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header   *Header           `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Uin      uint64            `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	Type     TokenPlatformType `protobuf:"varint,3,opt,name=type,proto3,enum=voicechat.TokenPlatformType" json:"type,omitempty"`
	Token    string            `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	DeviceId string            `protobuf:"bytes,5,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *RegisterProfileTokenReq) Reset() {
	*x = RegisterProfileTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterProfileTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterProfileTokenReq) ProtoMessage() {}

func (x *RegisterProfileTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterProfileTokenReq.ProtoReflect.Descriptor instead.
func (*RegisterProfileTokenReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{7}
}

func (x *RegisterProfileTokenReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RegisterProfileTokenReq) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *RegisterProfileTokenReq) GetType() TokenPlatformType {
	if x != nil {
		return x.Type
	}
	return TokenPlatformType_TOKEN_PLATFORM_UNKNOWN
}

func (x *RegisterProfileTokenReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RegisterProfileTokenReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type RegisterProfileTokenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header   *Header           `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result   ErrorCode         `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Uin      uint64            `protobuf:"varint,3,opt,name=uin,proto3" json:"uin,omitempty"`
	Type     TokenPlatformType `protobuf:"varint,4,opt,name=type,proto3,enum=voicechat.TokenPlatformType" json:"type,omitempty"`
	Token    string            `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	DeviceId string            `protobuf:"bytes,6,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *RegisterProfileTokenResp) Reset() {
	*x = RegisterProfileTokenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterProfileTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterProfileTokenResp) ProtoMessage() {}

func (x *RegisterProfileTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterProfileTokenResp.ProtoReflect.Descriptor instead.
func (*RegisterProfileTokenResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{8}
}

func (x *RegisterProfileTokenResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RegisterProfileTokenResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *RegisterProfileTokenResp) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *RegisterProfileTokenResp) GetType() TokenPlatformType {
	if x != nil {
		return x.Type
	}
	return TokenPlatformType_TOKEN_PLATFORM_UNKNOWN
}

func (x *RegisterProfileTokenResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RegisterProfileTokenResp) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type UnregisterProfileTokenReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Uin    uint64  `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	Token  string  `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UnregisterProfileTokenReq) Reset() {
	*x = UnregisterProfileTokenReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregisterProfileTokenReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterProfileTokenReq) ProtoMessage() {}

func (x *UnregisterProfileTokenReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterProfileTokenReq.ProtoReflect.Descriptor instead.
func (*UnregisterProfileTokenReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{9}
}

func (x *UnregisterProfileTokenReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UnregisterProfileTokenReq) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *UnregisterProfileTokenReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UnregisterProfileTokenResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Uin    uint64    `protobuf:"varint,3,opt,name=uin,proto3" json:"uin,omitempty"`
	Token  string    `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UnregisterProfileTokenResp) Reset() {
	*x = UnregisterProfileTokenResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregisterProfileTokenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterProfileTokenResp) ProtoMessage() {}

func (x *UnregisterProfileTokenResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterProfileTokenResp.ProtoReflect.Descriptor instead.
func (*UnregisterProfileTokenResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{10}
}

func (x *UnregisterProfileTokenResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UnregisterProfileTokenResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *UnregisterProfileTokenResp) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *UnregisterProfileTokenResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type UserStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin           uint64       `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"`
	OnlineStatus  OnlineStatus `protobuf:"varint,2,opt,name=online_status,json=onlineStatus,proto3,enum=voicechat.OnlineStatus" json:"online_status,omitempty"`
	MessageStatus string       `protobuf:"bytes,3,opt,name=message_status,json=messageStatus,proto3" json:"message_status,omitempty"`
	LastSeenAt    uint32       `protobuf:"varint,4,opt,name=last_seen_at,json=lastSeenAt,proto3" json:"last_seen_at,omitempty"`
}

func (x *UserStatus) Reset() {
	*x = UserStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatus) ProtoMessage() {}

func (x *UserStatus) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatus.ProtoReflect.Descriptor instead.
func (*UserStatus) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{11}
}

func (x *UserStatus) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *UserStatus) GetOnlineStatus() OnlineStatus {
	if x != nil {
		return x.OnlineStatus
	}
	return OnlineStatus_ONLINESTATUS_UNKNOWN
}

func (x *UserStatus) GetMessageStatus() string {
	if x != nil {
		return x.MessageStatus
	}
	return ""
}

func (x *UserStatus) GetLastSeenAt() uint32 {
	if x != nil {
		return x.LastSeenAt
	}
	return 0
}

type ChangeStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PROFILE_REQ_CHANGE_STATUS = 0x0205;
	Header     *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Uin        uint64      `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	UserStatus *UserStatus `protobuf:"bytes,3,opt,name=user_status,json=userStatus,proto3" json:"user_status,omitempty"`
	IsLogin    bool        `protobuf:"varint,4,opt,name=is_login,json=isLogin,proto3" json:"is_login,omitempty"`
}

func (x *ChangeStatusReq) Reset() {
	*x = ChangeStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeStatusReq) ProtoMessage() {}

func (x *ChangeStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeStatusReq.ProtoReflect.Descriptor instead.
func (*ChangeStatusReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{12}
}

func (x *ChangeStatusReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ChangeStatusReq) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *ChangeStatusReq) GetUserStatus() *UserStatus {
	if x != nil {
		return x.UserStatus
	}
	return nil
}

func (x *ChangeStatusReq) GetIsLogin() bool {
	if x != nil {
		return x.IsLogin
	}
	return false
}

type ChangeStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PROFILE_RSP_CHANGE_STATUS = 0x0205;
	Header     *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Uin        uint64      `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	UserStatus *UserStatus `protobuf:"bytes,3,opt,name=user_status,json=userStatus,proto3" json:"user_status,omitempty"`
}

func (x *ChangeStatusResp) Reset() {
	*x = ChangeStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeStatusResp) ProtoMessage() {}

func (x *ChangeStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeStatusResp.ProtoReflect.Descriptor instead.
func (*ChangeStatusResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{13}
}

func (x *ChangeStatusResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ChangeStatusResp) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *ChangeStatusResp) GetUserStatus() *UserStatus {
	if x != nil {
		return x.UserStatus
	}
	return nil
}

type StatusUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PROFILE_STATUS_UPDATE = 0x02f0;
	Header     *Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Uin        uint64        `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	UserStatus []*UserStatus `protobuf:"bytes,3,rep,name=user_status,json=userStatus,proto3" json:"user_status,omitempty"`
}

func (x *StatusUpdate) Reset() {
	*x = StatusUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusUpdate) ProtoMessage() {}

func (x *StatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusUpdate.ProtoReflect.Descriptor instead.
func (*StatusUpdate) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{14}
}

func (x *StatusUpdate) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StatusUpdate) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *StatusUpdate) GetUserStatus() []*UserStatus {
	if x != nil {
		return x.UserStatus
	}
	return nil
}

type IMC_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImcId   uint32 `protobuf:"varint,1,opt,name=imc_id,json=imcId,proto3" json:"imc_id,omitempty"`
	ImcIp   uint32 `protobuf:"varint,2,opt,name=imc_ip,json=imcIp,proto3" json:"imc_ip,omitempty"`
	ImcPort uint32 `protobuf:"varint,3,opt,name=imc_port,json=imcPort,proto3" json:"imc_port,omitempty"`
}

func (x *IMC_Info) Reset() {
	*x = IMC_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMC_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMC_Info) ProtoMessage() {}

func (x *IMC_Info) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMC_Info.ProtoReflect.Descriptor instead.
func (*IMC_Info) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{15}
}

func (x *IMC_Info) GetImcId() uint32 {
	if x != nil {
		return x.ImcId
	}
	return 0
}

func (x *IMC_Info) GetImcIp() uint32 {
	if x != nil {
		return x.ImcIp
	}
	return 0
}

func (x *IMC_Info) GetImcPort() uint32 {
	if x != nil {
		return x.ImcPort
	}
	return 0
}

type StatusNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PROFILE_STATUS_NOTIFY = 0x02f1;
	Header     *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Uin        uint64      `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	UserStatus *UserStatus `protobuf:"bytes,3,opt,name=user_status,json=userStatus,proto3" json:"user_status,omitempty"`
	ReceiveIds []uint32    `protobuf:"varint,4,rep,packed,name=receive_ids,json=receiveIds,proto3" json:"receive_ids,omitempty"`
	ImcInfo    *IMC_Info   `protobuf:"bytes,5,opt,name=imc_info,json=imcInfo,proto3" json:"imc_info,omitempty"`
}

func (x *StatusNotify) Reset() {
	*x = StatusNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusNotify) ProtoMessage() {}

func (x *StatusNotify) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusNotify.ProtoReflect.Descriptor instead.
func (*StatusNotify) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{16}
}

func (x *StatusNotify) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StatusNotify) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *StatusNotify) GetUserStatus() *UserStatus {
	if x != nil {
		return x.UserStatus
	}
	return nil
}

func (x *StatusNotify) GetReceiveIds() []uint32 {
	if x != nil {
		return x.ReceiveIds
	}
	return nil
}

func (x *StatusNotify) GetImcInfo() *IMC_Info {
	if x != nil {
		return x.ImcInfo
	}
	return nil
}

type LoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PROFILE_REQ_LOGIN = 0x0207;
	Header      *Header      `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Session     string       `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	DeviceId    string       `protobuf:"bytes,6,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Version     uint32       `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Uin         uint64       `protobuf:"varint,4,opt,name=uin,proto3" json:"uin,omitempty"`
	IsNew       bool         `protobuf:"varint,7,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"`
	LoginStatus OnlineStatus `protobuf:"varint,5,opt,name=login_status,json=loginStatus,proto3,enum=voicechat.OnlineStatus" json:"login_status,omitempty"`
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{17}
}

func (x *LoginReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LoginReq) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *LoginReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *LoginReq) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *LoginReq) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *LoginReq) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *LoginReq) GetLoginStatus() OnlineStatus {
	if x != nil {
		return x.LoginStatus
	}
	return OnlineStatus_ONLINESTATUS_UNKNOWN
}

type LoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PROFILE_RSP_LOGIN = 0x0207;
	Header     *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result     ErrorCode   `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	UserStatus *UserStatus `protobuf:"bytes,3,opt,name=user_status,json=userStatus,proto3" json:"user_status,omitempty"`
	Uin        uint64      `protobuf:"varint,4,opt,name=uin,proto3" json:"uin,omitempty"`
}

func (x *LoginResp) Reset() {
	*x = LoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResp) ProtoMessage() {}

func (x *LoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResp.ProtoReflect.Descriptor instead.
func (*LoginResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{18}
}

func (x *LoginResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LoginResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *LoginResp) GetUserStatus() *UserStatus {
	if x != nil {
		return x.UserStatus
	}
	return nil
}

func (x *LoginResp) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

type LogoutReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PROFILE_REQ_LOGOUT = 0x0208;
	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Uin     uint64  `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	Version uint32  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *LogoutReq) Reset() {
	*x = LogoutReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutReq) ProtoMessage() {}

func (x *LogoutReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutReq.ProtoReflect.Descriptor instead.
func (*LogoutReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{19}
}

func (x *LogoutReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LogoutReq) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *LogoutReq) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type LogoutResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PROFILE_RSP_LOGOUT = 0x0208;
	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *LogoutResp) Reset() {
	*x = LogoutResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutResp) ProtoMessage() {}

func (x *LogoutResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutResp.ProtoReflect.Descriptor instead.
func (*LogoutResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{20}
}

func (x *LogoutResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LogoutResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

type DeliveryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin       uint64 `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"`
	MessageId uint64 `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	SeenAt    uint64 `protobuf:"varint,3,opt,name=seen_at,json=seenAt,proto3" json:"seen_at,omitempty"`
}

func (x *DeliveryInfo) Reset() {
	*x = DeliveryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliveryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliveryInfo) ProtoMessage() {}

func (x *DeliveryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliveryInfo.ProtoReflect.Descriptor instead.
func (*DeliveryInfo) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{21}
}

func (x *DeliveryInfo) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *DeliveryInfo) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *DeliveryInfo) GetSeenAt() uint64 {
	if x != nil {
		return x.SeenAt
	}
	return 0
}

type SecretInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin           uint64 `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"`
	DeviceId      string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	IdentityKey   string `protobuf:"bytes,3,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
	BaseKey       string `protobuf:"bytes,4,opt,name=base_key,json=baseKey,proto3" json:"base_key,omitempty"`
	OneTimePreKey string `protobuf:"bytes,5,opt,name=one_time_pre_key,json=oneTimePreKey,proto3" json:"one_time_pre_key,omitempty"`
}

func (x *SecretInfo) Reset() {
	*x = SecretInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretInfo) ProtoMessage() {}

func (x *SecretInfo) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretInfo.ProtoReflect.Descriptor instead.
func (*SecretInfo) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{22}
}

func (x *SecretInfo) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *SecretInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *SecretInfo) GetIdentityKey() string {
	if x != nil {
		return x.IdentityKey
	}
	return ""
}

func (x *SecretInfo) GetBaseKey() string {
	if x != nil {
		return x.BaseKey
	}
	return ""
}

func (x *SecretInfo) GetOneTimePreKey() string {
	if x != nil {
		return x.OneTimePreKey
	}
	return ""
}

type PinnedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId uint64 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	PinnedAt  uint64 `protobuf:"varint,2,opt,name=pinned_at,json=pinnedAt,proto3" json:"pinned_at,omitempty"`
	OrderId   uint64 `protobuf:"varint,3,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *PinnedMessage) Reset() {
	*x = PinnedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinnedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinnedMessage) ProtoMessage() {}

func (x *PinnedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinnedMessage.ProtoReflect.Descriptor instead.
func (*PinnedMessage) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{23}
}

func (x *PinnedMessage) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *PinnedMessage) GetPinnedAt() uint64 {
	if x != nil {
		return x.PinnedAt
	}
	return 0
}

func (x *PinnedMessage) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin       uint64 `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"`
	MessageId uint64 `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{24}
}

func (x *Location) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *Location) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId            uint64           `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	AvatarUrl          string           `protobuf:"bytes,2,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Name               string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description        string           `protobuf:"bytes,25,opt,name=description,proto3" json:"description,omitempty"`
	Type               GroupType        `protobuf:"varint,4,opt,name=type,proto3,enum=voicechat.GroupType" json:"type,omitempty"`
	Mode               GroupMode        `protobuf:"varint,30,opt,name=mode,proto3,enum=voicechat.GroupMode" json:"mode,omitempty"`
	OwnerUin           uint64           `protobuf:"varint,5,opt,name=owner_uin,json=ownerUin,proto3" json:"owner_uin,omitempty"`
	CreatorUin         uint64           `protobuf:"varint,20,opt,name=creator_uin,json=creatorUin,proto3" json:"creator_uin,omitempty"`
	OccupantsUins      []uint64         `protobuf:"varint,6,rep,packed,name=occupants_uins,json=occupantsUins,proto3" json:"occupants_uins,omitempty"`
	AdminUins          []uint64         `protobuf:"varint,24,rep,packed,name=admin_uins,json=adminUins,proto3" json:"admin_uins,omitempty"`
	CreatedAt          uint64           `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          uint64           `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	LastMessageId      uint64           `protobuf:"varint,9,opt,name=last_message_id,json=lastMessageId,proto3" json:"last_message_id,omitempty"`
	Locations          []*Location      `protobuf:"bytes,26,rep,name=locations,proto3" json:"locations,omitempty"`
	BlockedUins        []uint64         `protobuf:"varint,10,rep,packed,name=blocked_uins,json=blockedUins,proto3" json:"blocked_uins,omitempty"`
	RemovedUins        []uint64         `protobuf:"varint,15,rep,packed,name=removed_uins,json=removedUins,proto3" json:"removed_uins,omitempty"`
	MutedUins          []uint64         `protobuf:"varint,16,rep,packed,name=muted_uins,json=mutedUins,proto3" json:"muted_uins,omitempty"`
	LastActiveMessages []*DeliveryInfo  `protobuf:"bytes,17,rep,name=last_active_messages,json=lastActiveMessages,proto3" json:"last_active_messages,omitempty"`
	PinnedUins         []uint64         `protobuf:"varint,19,rep,packed,name=pinned_uins,json=pinnedUins,proto3" json:"pinned_uins,omitempty"`
	Secrets            []*SecretInfo    `protobuf:"bytes,22,rep,name=secrets,proto3" json:"secrets,omitempty"`
	PinnedMessages     []*PinnedMessage `protobuf:"bytes,23,rep,name=pinned_messages,json=pinnedMessages,proto3" json:"pinned_messages,omitempty"`
	Background         string           `protobuf:"bytes,27,opt,name=background,proto3" json:"background,omitempty"`
	//realtime information
	LastMessage      *Message           `protobuf:"bytes,11,opt,name=last_message,json=lastMessage,proto3" json:"last_message,omitempty"`
	ReceivedList     []*DeliveryInfo    `protobuf:"bytes,12,rep,name=received_list,json=receivedList,proto3" json:"received_list,omitempty"`
	SeenList         []*DeliveryInfo    `protobuf:"bytes,13,rep,name=seen_list,json=seenList,proto3" json:"seen_list,omitempty"`
	StatusList       []*UserStatus      `protobuf:"bytes,14,rep,name=status_list,json=statusList,proto3" json:"status_list,omitempty"`
	LastMessages     []uint64           `protobuf:"varint,18,rep,packed,name=last_messages,json=lastMessages,proto3" json:"last_messages,omitempty"`
	UnreadCnt        uint32             `protobuf:"varint,21,opt,name=unread_cnt,json=unreadCnt,proto3" json:"unread_cnt,omitempty"`
	LastSosMessages  []*LiveLocationReq `protobuf:"bytes,28,rep,name=last_sos_messages,json=lastSosMessages,proto3" json:"last_sos_messages,omitempty"`
	CurrentGroupcall *GroupCall         `protobuf:"bytes,29,opt,name=current_groupcall,json=currentGroupcall,proto3" json:"current_groupcall,omitempty"`
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{25}
}

func (x *Group) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *Group) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *Group) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Group) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Group) GetType() GroupType {
	if x != nil {
		return x.Type
	}
	return GroupType_GROUP_TYPE_UNKNOWN
}

func (x *Group) GetMode() GroupMode {
	if x != nil {
		return x.Mode
	}
	return GroupMode_GROUP_MODE_UNKNOWN
}

func (x *Group) GetOwnerUin() uint64 {
	if x != nil {
		return x.OwnerUin
	}
	return 0
}

func (x *Group) GetCreatorUin() uint64 {
	if x != nil {
		return x.CreatorUin
	}
	return 0
}

func (x *Group) GetOccupantsUins() []uint64 {
	if x != nil {
		return x.OccupantsUins
	}
	return nil
}

func (x *Group) GetAdminUins() []uint64 {
	if x != nil {
		return x.AdminUins
	}
	return nil
}

func (x *Group) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Group) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Group) GetLastMessageId() uint64 {
	if x != nil {
		return x.LastMessageId
	}
	return 0
}

func (x *Group) GetLocations() []*Location {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *Group) GetBlockedUins() []uint64 {
	if x != nil {
		return x.BlockedUins
	}
	return nil
}

func (x *Group) GetRemovedUins() []uint64 {
	if x != nil {
		return x.RemovedUins
	}
	return nil
}

func (x *Group) GetMutedUins() []uint64 {
	if x != nil {
		return x.MutedUins
	}
	return nil
}

func (x *Group) GetLastActiveMessages() []*DeliveryInfo {
	if x != nil {
		return x.LastActiveMessages
	}
	return nil
}

func (x *Group) GetPinnedUins() []uint64 {
	if x != nil {
		return x.PinnedUins
	}
	return nil
}

func (x *Group) GetSecrets() []*SecretInfo {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *Group) GetPinnedMessages() []*PinnedMessage {
	if x != nil {
		return x.PinnedMessages
	}
	return nil
}

func (x *Group) GetBackground() string {
	if x != nil {
		return x.Background
	}
	return ""
}

func (x *Group) GetLastMessage() *Message {
	if x != nil {
		return x.LastMessage
	}
	return nil
}

func (x *Group) GetReceivedList() []*DeliveryInfo {
	if x != nil {
		return x.ReceivedList
	}
	return nil
}

func (x *Group) GetSeenList() []*DeliveryInfo {
	if x != nil {
		return x.SeenList
	}
	return nil
}

func (x *Group) GetStatusList() []*UserStatus {
	if x != nil {
		return x.StatusList
	}
	return nil
}

func (x *Group) GetLastMessages() []uint64 {
	if x != nil {
		return x.LastMessages
	}
	return nil
}

func (x *Group) GetUnreadCnt() uint32 {
	if x != nil {
		return x.UnreadCnt
	}
	return 0
}

func (x *Group) GetLastSosMessages() []*LiveLocationReq {
	if x != nil {
		return x.LastSosMessages
	}
	return nil
}

func (x *Group) GetCurrentGroupcall() *GroupCall {
	if x != nil {
		return x.CurrentGroupcall
	}
	return nil
}

type CreateGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header        *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Appid         uint64    `protobuf:"varint,2,opt,name=appid,proto3" json:"appid,omitempty"`
	Name          string    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description   string    `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	Type          GroupType `protobuf:"varint,4,opt,name=type,proto3,enum=voicechat.GroupType" json:"type,omitempty"`
	Mode          GroupMode `protobuf:"varint,12,opt,name=mode,proto3,enum=voicechat.GroupMode" json:"mode,omitempty"`
	AvatarUrl     string    `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	OwnerUin      uint64    `protobuf:"varint,6,opt,name=owner_uin,json=ownerUin,proto3" json:"owner_uin,omitempty"`
	OccupantsUins []uint64  `protobuf:"varint,7,rep,packed,name=occupants_uins,json=occupantsUins,proto3" json:"occupants_uins,omitempty"`
	SenderName    string    `protobuf:"bytes,8,opt,name=sender_name,json=senderName,proto3" json:"sender_name,omitempty"`
	SenderAvatar  string    `protobuf:"bytes,9,opt,name=sender_avatar,json=senderAvatar,proto3" json:"sender_avatar,omitempty"`
	Background    string    `protobuf:"bytes,11,opt,name=background,proto3" json:"background,omitempty"`
}

func (x *CreateGroupReq) Reset() {
	*x = CreateGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupReq) ProtoMessage() {}

func (x *CreateGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupReq.ProtoReflect.Descriptor instead.
func (*CreateGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{26}
}

func (x *CreateGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateGroupReq) GetAppid() uint64 {
	if x != nil {
		return x.Appid
	}
	return 0
}

func (x *CreateGroupReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateGroupReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateGroupReq) GetType() GroupType {
	if x != nil {
		return x.Type
	}
	return GroupType_GROUP_TYPE_UNKNOWN
}

func (x *CreateGroupReq) GetMode() GroupMode {
	if x != nil {
		return x.Mode
	}
	return GroupMode_GROUP_MODE_UNKNOWN
}

func (x *CreateGroupReq) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *CreateGroupReq) GetOwnerUin() uint64 {
	if x != nil {
		return x.OwnerUin
	}
	return 0
}

func (x *CreateGroupReq) GetOccupantsUins() []uint64 {
	if x != nil {
		return x.OccupantsUins
	}
	return nil
}

func (x *CreateGroupReq) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *CreateGroupReq) GetSenderAvatar() string {
	if x != nil {
		return x.SenderAvatar
	}
	return ""
}

func (x *CreateGroupReq) GetBackground() string {
	if x != nil {
		return x.Background
	}
	return ""
}

type CreateGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Group  *Group    `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *CreateGroupResp) Reset() {
	*x = CreateGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupResp) ProtoMessage() {}

func (x *CreateGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupResp.ProtoReflect.Descriptor instead.
func (*CreateGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{27}
}

func (x *CreateGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *CreateGroupResp) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type UpdateGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header      *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId     uint64    `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	OwnerUin    uint64    `protobuf:"varint,7,opt,name=owner_uin,json=ownerUin,proto3" json:"owner_uin,omitempty"`
	Name        string    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Mode        GroupMode `protobuf:"varint,10,opt,name=mode,proto3,enum=voicechat.GroupMode" json:"mode,omitempty"`
	Description string    `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	AvatarUrl   string    `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Background  string    `protobuf:"bytes,9,opt,name=background,proto3" json:"background,omitempty"`
	PullAll     []uint64  `protobuf:"varint,5,rep,packed,name=pull_all,json=pullAll,proto3" json:"pull_all,omitempty"`
	PushAll     []uint64  `protobuf:"varint,6,rep,packed,name=push_all,json=pushAll,proto3" json:"push_all,omitempty"`
}

func (x *UpdateGroupReq) Reset() {
	*x = UpdateGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupReq) ProtoMessage() {}

func (x *UpdateGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupReq.ProtoReflect.Descriptor instead.
func (*UpdateGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateGroupReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UpdateGroupReq) GetOwnerUin() uint64 {
	if x != nil {
		return x.OwnerUin
	}
	return 0
}

func (x *UpdateGroupReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateGroupReq) GetMode() GroupMode {
	if x != nil {
		return x.Mode
	}
	return GroupMode_GROUP_MODE_UNKNOWN
}

func (x *UpdateGroupReq) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateGroupReq) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *UpdateGroupReq) GetBackground() string {
	if x != nil {
		return x.Background
	}
	return ""
}

func (x *UpdateGroupReq) GetPullAll() []uint64 {
	if x != nil {
		return x.PullAll
	}
	return nil
}

func (x *UpdateGroupReq) GetPushAll() []uint64 {
	if x != nil {
		return x.PushAll
	}
	return nil
}

type UpdateGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Group  *Group    `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *UpdateGroupResp) Reset() {
	*x = UpdateGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroupResp) ProtoMessage() {}

func (x *UpdateGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroupResp.ProtoReflect.Descriptor instead.
func (*UpdateGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *UpdateGroupResp) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type DeleteGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *DeleteGroupReq) Reset() {
	*x = DeleteGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupReq) ProtoMessage() {}

func (x *DeleteGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupReq.ProtoReflect.Descriptor instead.
func (*DeleteGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteGroupReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type DeleteGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *DeleteGroupResp) Reset() {
	*x = DeleteGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupResp) ProtoMessage() {}

func (x *DeleteGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupResp.ProtoReflect.Descriptor instead.
func (*DeleteGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

type LeaveGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *LeaveGroupReq) Reset() {
	*x = LeaveGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveGroupReq) ProtoMessage() {}

func (x *LeaveGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveGroupReq.ProtoReflect.Descriptor instead.
func (*LeaveGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{32}
}

func (x *LeaveGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LeaveGroupReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type LeaveGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *LeaveGroupResp) Reset() {
	*x = LeaveGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveGroupResp) ProtoMessage() {}

func (x *LeaveGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveGroupResp.ProtoReflect.Descriptor instead.
func (*LeaveGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{33}
}

func (x *LeaveGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LeaveGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

type ListGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Uin    uint64        `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	Pindex uint32        `protobuf:"varint,3,opt,name=pindex,proto3" json:"pindex,omitempty"`
	Psize  uint32        `protobuf:"varint,4,opt,name=psize,proto3" json:"psize,omitempty"`
	SortBy GroupSortType `protobuf:"varint,5,opt,name=sort_by,json=sortBy,proto3,enum=voicechat.GroupSortType" json:"sort_by,omitempty"`
}

func (x *ListGroupReq) Reset() {
	*x = ListGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupReq) ProtoMessage() {}

func (x *ListGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupReq.ProtoReflect.Descriptor instead.
func (*ListGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{34}
}

func (x *ListGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListGroupReq) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *ListGroupReq) GetPindex() uint32 {
	if x != nil {
		return x.Pindex
	}
	return 0
}

func (x *ListGroupReq) GetPsize() uint32 {
	if x != nil {
		return x.Psize
	}
	return 0
}

func (x *ListGroupReq) GetSortBy() GroupSortType {
	if x != nil {
		return x.SortBy
	}
	return GroupSortType_GROUP_SORT_BY_RANDOM
}

type ListGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Groups []*Group  `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *ListGroupResp) Reset() {
	*x = ListGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupResp) ProtoMessage() {}

func (x *ListGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupResp.ProtoReflect.Descriptor instead.
func (*ListGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{35}
}

func (x *ListGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *ListGroupResp) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type BlockGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId    uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	BlockedUin uint64  `protobuf:"varint,3,opt,name=blocked_uin,json=blockedUin,proto3" json:"blocked_uin,omitempty"`
}

func (x *BlockGroupReq) Reset() {
	*x = BlockGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockGroupReq) ProtoMessage() {}

func (x *BlockGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockGroupReq.ProtoReflect.Descriptor instead.
func (*BlockGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{36}
}

func (x *BlockGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BlockGroupReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *BlockGroupReq) GetBlockedUin() uint64 {
	if x != nil {
		return x.BlockedUin
	}
	return 0
}

type BlockGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *BlockGroupResp) Reset() {
	*x = BlockGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockGroupResp) ProtoMessage() {}

func (x *BlockGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockGroupResp.ProtoReflect.Descriptor instead.
func (*BlockGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{37}
}

func (x *BlockGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BlockGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

type UnblockGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId    uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	BlockedUin uint64  `protobuf:"varint,3,opt,name=blocked_uin,json=blockedUin,proto3" json:"blocked_uin,omitempty"`
}

func (x *UnblockGroupReq) Reset() {
	*x = UnblockGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnblockGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockGroupReq) ProtoMessage() {}

func (x *UnblockGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockGroupReq.ProtoReflect.Descriptor instead.
func (*UnblockGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{38}
}

func (x *UnblockGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UnblockGroupReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UnblockGroupReq) GetBlockedUin() uint64 {
	if x != nil {
		return x.BlockedUin
	}
	return 0
}

type UnblockGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *UnblockGroupResp) Reset() {
	*x = UnblockGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnblockGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockGroupResp) ProtoMessage() {}

func (x *UnblockGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockGroupResp.ProtoReflect.Descriptor instead.
func (*UnblockGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{39}
}

func (x *UnblockGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UnblockGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

type BlockedListGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Uin    uint64  `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	Pindex uint32  `protobuf:"varint,3,opt,name=pindex,proto3" json:"pindex,omitempty"`
	Psize  uint32  `protobuf:"varint,4,opt,name=psize,proto3" json:"psize,omitempty"`
}

func (x *BlockedListGroupReq) Reset() {
	*x = BlockedListGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockedListGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockedListGroupReq) ProtoMessage() {}

func (x *BlockedListGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockedListGroupReq.ProtoReflect.Descriptor instead.
func (*BlockedListGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{40}
}

func (x *BlockedListGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BlockedListGroupReq) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *BlockedListGroupReq) GetPindex() uint32 {
	if x != nil {
		return x.Pindex
	}
	return 0
}

func (x *BlockedListGroupReq) GetPsize() uint32 {
	if x != nil {
		return x.Psize
	}
	return 0
}

type BlockedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin     uint64 `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"`
	GroupId uint64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *BlockedInfo) Reset() {
	*x = BlockedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockedInfo) ProtoMessage() {}

func (x *BlockedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockedInfo.ProtoReflect.Descriptor instead.
func (*BlockedInfo) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{41}
}

func (x *BlockedInfo) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *BlockedInfo) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type BlockedListGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode      `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	List   []*BlockedInfo `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *BlockedListGroupResp) Reset() {
	*x = BlockedListGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockedListGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockedListGroupResp) ProtoMessage() {}

func (x *BlockedListGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockedListGroupResp.ProtoReflect.Descriptor instead.
func (*BlockedListGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{42}
}

func (x *BlockedListGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BlockedListGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *BlockedListGroupResp) GetList() []*BlockedInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type LastMessageGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *LastMessageGroupReq) Reset() {
	*x = LastMessageGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastMessageGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastMessageGroupReq) ProtoMessage() {}

func (x *LastMessageGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastMessageGroupReq.ProtoReflect.Descriptor instead.
func (*LastMessageGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{43}
}

func (x *LastMessageGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LastMessageGroupReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type LastMessageGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result  ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Message *Message  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LastMessageGroupResp) Reset() {
	*x = LastMessageGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastMessageGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastMessageGroupResp) ProtoMessage() {}

func (x *LastMessageGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastMessageGroupResp.ProtoReflect.Descriptor instead.
func (*LastMessageGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{44}
}

func (x *LastMessageGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LastMessageGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *LastMessageGroupResp) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type GroupInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *GroupInfoReq) Reset() {
	*x = GroupInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoReq) ProtoMessage() {}

func (x *GroupInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoReq.ProtoReflect.Descriptor instead.
func (*GroupInfoReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{45}
}

func (x *GroupInfoReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GroupInfoReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type GroupInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Group  *Group    `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *GroupInfoResp) Reset() {
	*x = GroupInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoResp) ProtoMessage() {}

func (x *GroupInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoResp.ProtoReflect.Descriptor instead.
func (*GroupInfoResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{46}
}

func (x *GroupInfoResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GroupInfoResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *GroupInfoResp) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type GroupUserStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Pindex  uint32  `protobuf:"varint,3,opt,name=pindex,proto3" json:"pindex,omitempty"`
	Psize   uint32  `protobuf:"varint,4,opt,name=psize,proto3" json:"psize,omitempty"`
}

func (x *GroupUserStatusReq) Reset() {
	*x = GroupUserStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupUserStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupUserStatusReq) ProtoMessage() {}

func (x *GroupUserStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupUserStatusReq.ProtoReflect.Descriptor instead.
func (*GroupUserStatusReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{47}
}

func (x *GroupUserStatusReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GroupUserStatusReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupUserStatusReq) GetPindex() uint32 {
	if x != nil {
		return x.Pindex
	}
	return 0
}

func (x *GroupUserStatusReq) GetPsize() uint32 {
	if x != nil {
		return x.Psize
	}
	return 0
}

type GroupUserStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result     ErrorCode     `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Pindex     uint32        `protobuf:"varint,3,opt,name=pindex,proto3" json:"pindex,omitempty"`
	Psize      uint32        `protobuf:"varint,4,opt,name=psize,proto3" json:"psize,omitempty"`
	TotalCnt   uint32        `protobuf:"varint,5,opt,name=total_cnt,json=totalCnt,proto3" json:"total_cnt,omitempty"`
	StatusList []*UserStatus `protobuf:"bytes,6,rep,name=status_list,json=statusList,proto3" json:"status_list,omitempty"`
}

func (x *GroupUserStatusResp) Reset() {
	*x = GroupUserStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupUserStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupUserStatusResp) ProtoMessage() {}

func (x *GroupUserStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupUserStatusResp.ProtoReflect.Descriptor instead.
func (*GroupUserStatusResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{48}
}

func (x *GroupUserStatusResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GroupUserStatusResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *GroupUserStatusResp) GetPindex() uint32 {
	if x != nil {
		return x.Pindex
	}
	return 0
}

func (x *GroupUserStatusResp) GetPsize() uint32 {
	if x != nil {
		return x.Psize
	}
	return 0
}

func (x *GroupUserStatusResp) GetTotalCnt() uint32 {
	if x != nil {
		return x.TotalCnt
	}
	return 0
}

func (x *GroupUserStatusResp) GetStatusList() []*UserStatus {
	if x != nil {
		return x.StatusList
	}
	return nil
}

type DeleteConversationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *DeleteConversationReq) Reset() {
	*x = DeleteConversationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConversationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConversationReq) ProtoMessage() {}

func (x *DeleteConversationReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConversationReq.ProtoReflect.Descriptor instead.
func (*DeleteConversationReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{49}
}

func (x *DeleteConversationReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteConversationReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type DeleteConversationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *DeleteConversationResp) Reset() {
	*x = DeleteConversationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConversationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConversationResp) ProtoMessage() {}

func (x *DeleteConversationResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConversationResp.ProtoReflect.Descriptor instead.
func (*DeleteConversationResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{50}
}

func (x *DeleteConversationResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteConversationResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

type CheckGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header        *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Type          GroupType `protobuf:"varint,2,opt,name=type,proto3,enum=voicechat.GroupType" json:"type,omitempty"`
	OccupantsUins []uint64  `protobuf:"varint,3,rep,packed,name=occupants_uins,json=occupantsUins,proto3" json:"occupants_uins,omitempty"`
}

func (x *CheckGroupReq) Reset() {
	*x = CheckGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckGroupReq) ProtoMessage() {}

func (x *CheckGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckGroupReq.ProtoReflect.Descriptor instead.
func (*CheckGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{51}
}

func (x *CheckGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CheckGroupReq) GetType() GroupType {
	if x != nil {
		return x.Type
	}
	return GroupType_GROUP_TYPE_UNKNOWN
}

func (x *CheckGroupReq) GetOccupantsUins() []uint64 {
	if x != nil {
		return x.OccupantsUins
	}
	return nil
}

type CheckGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Group  *Group    `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *CheckGroupResp) Reset() {
	*x = CheckGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckGroupResp) ProtoMessage() {}

func (x *CheckGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckGroupResp.ProtoReflect.Descriptor instead.
func (*CheckGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{52}
}

func (x *CheckGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CheckGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *CheckGroupResp) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type MuteGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *MuteGroupReq) Reset() {
	*x = MuteGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuteGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteGroupReq) ProtoMessage() {}

func (x *MuteGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteGroupReq.ProtoReflect.Descriptor instead.
func (*MuteGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{53}
}

func (x *MuteGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MuteGroupReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type MuteGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *MuteGroupResp) Reset() {
	*x = MuteGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuteGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteGroupResp) ProtoMessage() {}

func (x *MuteGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteGroupResp.ProtoReflect.Descriptor instead.
func (*MuteGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{54}
}

func (x *MuteGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MuteGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

type UnmuteGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *UnmuteGroupReq) Reset() {
	*x = UnmuteGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmuteGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmuteGroupReq) ProtoMessage() {}

func (x *UnmuteGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmuteGroupReq.ProtoReflect.Descriptor instead.
func (*UnmuteGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{55}
}

func (x *UnmuteGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UnmuteGroupReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type UnmuteGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *UnmuteGroupResp) Reset() {
	*x = UnmuteGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmuteGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmuteGroupResp) ProtoMessage() {}

func (x *UnmuteGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmuteGroupResp.ProtoReflect.Descriptor instead.
func (*UnmuteGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{56}
}

func (x *UnmuteGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UnmuteGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

type NewRegisterGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header         *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Uin            uint64   `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	Name           string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Phone          string   `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	RecipientsUins []uint64 `protobuf:"varint,4,rep,packed,name=recipients_uins,json=recipientsUins,proto3" json:"recipients_uins,omitempty"`
}

func (x *NewRegisterGroupReq) Reset() {
	*x = NewRegisterGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRegisterGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRegisterGroupReq) ProtoMessage() {}

func (x *NewRegisterGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRegisterGroupReq.ProtoReflect.Descriptor instead.
func (*NewRegisterGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{57}
}

func (x *NewRegisterGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *NewRegisterGroupReq) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *NewRegisterGroupReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewRegisterGroupReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *NewRegisterGroupReq) GetRecipientsUins() []uint64 {
	if x != nil {
		return x.RecipientsUins
	}
	return nil
}

type NewRegisterGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *NewRegisterGroupResp) Reset() {
	*x = NewRegisterGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRegisterGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRegisterGroupResp) ProtoMessage() {}

func (x *NewRegisterGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRegisterGroupResp.ProtoReflect.Descriptor instead.
func (*NewRegisterGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{58}
}

func (x *NewRegisterGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *NewRegisterGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

type PinGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *PinGroupReq) Reset() {
	*x = PinGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinGroupReq) ProtoMessage() {}

func (x *PinGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinGroupReq.ProtoReflect.Descriptor instead.
func (*PinGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{59}
}

func (x *PinGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PinGroupReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type PinGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *PinGroupResp) Reset() {
	*x = PinGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinGroupResp) ProtoMessage() {}

func (x *PinGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinGroupResp.ProtoReflect.Descriptor instead.
func (*PinGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{60}
}

func (x *PinGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PinGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

type UnpinGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *UnpinGroupReq) Reset() {
	*x = UnpinGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnpinGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpinGroupReq) ProtoMessage() {}

func (x *UnpinGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpinGroupReq.ProtoReflect.Descriptor instead.
func (*UnpinGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{61}
}

func (x *UnpinGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UnpinGroupReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type UnpinGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *UnpinGroupResp) Reset() {
	*x = UnpinGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnpinGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpinGroupResp) ProtoMessage() {}

func (x *UnpinGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpinGroupResp.ProtoReflect.Descriptor instead.
func (*UnpinGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{62}
}

func (x *UnpinGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UnpinGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

type StartSecretChatGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header        *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	OwnerUin      uint64  `protobuf:"varint,2,opt,name=owner_uin,json=ownerUin,proto3" json:"owner_uin,omitempty"`
	DeviceId      string  `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	IdentityKey   string  `protobuf:"bytes,4,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
	BaseKey       string  `protobuf:"bytes,5,opt,name=base_key,json=baseKey,proto3" json:"base_key,omitempty"`
	OneTimePreKey string  `protobuf:"bytes,6,opt,name=one_time_pre_key,json=oneTimePreKey,proto3" json:"one_time_pre_key,omitempty"`
	ReceiverUin   uint64  `protobuf:"varint,7,opt,name=receiver_uin,json=receiverUin,proto3" json:"receiver_uin,omitempty"`
}

func (x *StartSecretChatGroupReq) Reset() {
	*x = StartSecretChatGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartSecretChatGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSecretChatGroupReq) ProtoMessage() {}

func (x *StartSecretChatGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSecretChatGroupReq.ProtoReflect.Descriptor instead.
func (*StartSecretChatGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{63}
}

func (x *StartSecretChatGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StartSecretChatGroupReq) GetOwnerUin() uint64 {
	if x != nil {
		return x.OwnerUin
	}
	return 0
}

func (x *StartSecretChatGroupReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *StartSecretChatGroupReq) GetIdentityKey() string {
	if x != nil {
		return x.IdentityKey
	}
	return ""
}

func (x *StartSecretChatGroupReq) GetBaseKey() string {
	if x != nil {
		return x.BaseKey
	}
	return ""
}

func (x *StartSecretChatGroupReq) GetOneTimePreKey() string {
	if x != nil {
		return x.OneTimePreKey
	}
	return ""
}

func (x *StartSecretChatGroupReq) GetReceiverUin() uint64 {
	if x != nil {
		return x.ReceiverUin
	}
	return 0
}

type StartSecretChatGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Group  *Group    `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *StartSecretChatGroupResp) Reset() {
	*x = StartSecretChatGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartSecretChatGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSecretChatGroupResp) ProtoMessage() {}

func (x *StartSecretChatGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSecretChatGroupResp.ProtoReflect.Descriptor instead.
func (*StartSecretChatGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{64}
}

func (x *StartSecretChatGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StartSecretChatGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *StartSecretChatGroupResp) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type LogoutGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *LogoutGroupReq) Reset() {
	*x = LogoutGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutGroupReq) ProtoMessage() {}

func (x *LogoutGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutGroupReq.ProtoReflect.Descriptor instead.
func (*LogoutGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{65}
}

func (x *LogoutGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

type LogoutGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *LogoutGroupResp) Reset() {
	*x = LogoutGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutGroupResp) ProtoMessage() {}

func (x *LogoutGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutGroupResp.ProtoReflect.Descriptor instead.
func (*LogoutGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{66}
}

func (x *LogoutGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LogoutGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

type AcceptSecretChatGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header        *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId       uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	AcceptUin     uint64  `protobuf:"varint,3,opt,name=accept_uin,json=acceptUin,proto3" json:"accept_uin,omitempty"`
	DeviceId      string  `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	IdentityKey   string  `protobuf:"bytes,5,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
	BaseKey       string  `protobuf:"bytes,6,opt,name=base_key,json=baseKey,proto3" json:"base_key,omitempty"`
	OneTimePreKey string  `protobuf:"bytes,7,opt,name=one_time_pre_key,json=oneTimePreKey,proto3" json:"one_time_pre_key,omitempty"`
}

func (x *AcceptSecretChatGroupReq) Reset() {
	*x = AcceptSecretChatGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptSecretChatGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptSecretChatGroupReq) ProtoMessage() {}

func (x *AcceptSecretChatGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptSecretChatGroupReq.ProtoReflect.Descriptor instead.
func (*AcceptSecretChatGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{67}
}

func (x *AcceptSecretChatGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AcceptSecretChatGroupReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *AcceptSecretChatGroupReq) GetAcceptUin() uint64 {
	if x != nil {
		return x.AcceptUin
	}
	return 0
}

func (x *AcceptSecretChatGroupReq) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *AcceptSecretChatGroupReq) GetIdentityKey() string {
	if x != nil {
		return x.IdentityKey
	}
	return ""
}

func (x *AcceptSecretChatGroupReq) GetBaseKey() string {
	if x != nil {
		return x.BaseKey
	}
	return ""
}

func (x *AcceptSecretChatGroupReq) GetOneTimePreKey() string {
	if x != nil {
		return x.OneTimePreKey
	}
	return ""
}

type AcceptSecretChatGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Group  *Group    `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *AcceptSecretChatGroupResp) Reset() {
	*x = AcceptSecretChatGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptSecretChatGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptSecretChatGroupResp) ProtoMessage() {}

func (x *AcceptSecretChatGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptSecretChatGroupResp.ProtoReflect.Descriptor instead.
func (*AcceptSecretChatGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{68}
}

func (x *AcceptSecretChatGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AcceptSecretChatGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *AcceptSecretChatGroupResp) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type DeleteSecretChatGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *DeleteSecretChatGroupReq) Reset() {
	*x = DeleteSecretChatGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSecretChatGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecretChatGroupReq) ProtoMessage() {}

func (x *DeleteSecretChatGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecretChatGroupReq.ProtoReflect.Descriptor instead.
func (*DeleteSecretChatGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{69}
}

func (x *DeleteSecretChatGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteSecretChatGroupReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type DeleteSecretChatGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *DeleteSecretChatGroupResp) Reset() {
	*x = DeleteSecretChatGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSecretChatGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecretChatGroupResp) ProtoMessage() {}

func (x *DeleteSecretChatGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecretChatGroupResp.ProtoReflect.Descriptor instead.
func (*DeleteSecretChatGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{70}
}

func (x *DeleteSecretChatGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteSecretChatGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

type CreateLinkGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *CreateLinkGroupReq) Reset() {
	*x = CreateLinkGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLinkGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLinkGroupReq) ProtoMessage() {}

func (x *CreateLinkGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLinkGroupReq.ProtoReflect.Descriptor instead.
func (*CreateLinkGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{71}
}

func (x *CreateLinkGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateLinkGroupReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type CreateLinkGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Link   string    `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *CreateLinkGroupResp) Reset() {
	*x = CreateLinkGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLinkGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLinkGroupResp) ProtoMessage() {}

func (x *CreateLinkGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLinkGroupResp.ProtoReflect.Descriptor instead.
func (*CreateLinkGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{72}
}

func (x *CreateLinkGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateLinkGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *CreateLinkGroupResp) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type JoinLinkGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Token   string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Uin     uint64  `protobuf:"varint,3,opt,name=uin,proto3" json:"uin,omitempty"`
	GroupId uint64  `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *JoinLinkGroupReq) Reset() {
	*x = JoinLinkGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinLinkGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinLinkGroupReq) ProtoMessage() {}

func (x *JoinLinkGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinLinkGroupReq.ProtoReflect.Descriptor instead.
func (*JoinLinkGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{73}
}

func (x *JoinLinkGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *JoinLinkGroupReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JoinLinkGroupReq) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *JoinLinkGroupReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type JoinLinkGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Group  *Group    `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *JoinLinkGroupResp) Reset() {
	*x = JoinLinkGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinLinkGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinLinkGroupResp) ProtoMessage() {}

func (x *JoinLinkGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinLinkGroupResp.ProtoReflect.Descriptor instead.
func (*JoinLinkGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{74}
}

func (x *JoinLinkGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *JoinLinkGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *JoinLinkGroupResp) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type ListLinkGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Pindex  uint32  `protobuf:"varint,3,opt,name=pindex,proto3" json:"pindex,omitempty"`
	Psize   uint32  `protobuf:"varint,4,opt,name=psize,proto3" json:"psize,omitempty"`
}

func (x *ListLinkGroupReq) Reset() {
	*x = ListLinkGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLinkGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLinkGroupReq) ProtoMessage() {}

func (x *ListLinkGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLinkGroupReq.ProtoReflect.Descriptor instead.
func (*ListLinkGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{75}
}

func (x *ListLinkGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListLinkGroupReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ListLinkGroupReq) GetPindex() uint32 {
	if x != nil {
		return x.Pindex
	}
	return 0
}

func (x *ListLinkGroupReq) GetPsize() uint32 {
	if x != nil {
		return x.Psize
	}
	return 0
}

type ListLinkGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Links  []string  `protobuf:"bytes,3,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *ListLinkGroupResp) Reset() {
	*x = ListLinkGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLinkGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLinkGroupResp) ProtoMessage() {}

func (x *ListLinkGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLinkGroupResp.ProtoReflect.Descriptor instead.
func (*ListLinkGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{76}
}

func (x *ListLinkGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListLinkGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *ListLinkGroupResp) GetLinks() []string {
	if x != nil {
		return x.Links
	}
	return nil
}

type DisableLinkGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Token  string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *DisableLinkGroupReq) Reset() {
	*x = DisableLinkGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableLinkGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableLinkGroupReq) ProtoMessage() {}

func (x *DisableLinkGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableLinkGroupReq.ProtoReflect.Descriptor instead.
func (*DisableLinkGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{77}
}

func (x *DisableLinkGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DisableLinkGroupReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type DisableLinkGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *DisableLinkGroupResp) Reset() {
	*x = DisableLinkGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableLinkGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableLinkGroupResp) ProtoMessage() {}

func (x *DisableLinkGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableLinkGroupResp.ProtoReflect.Descriptor instead.
func (*DisableLinkGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{78}
}

func (x *DisableLinkGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DisableLinkGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

type LinkGroupInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Token   string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	GroupId uint64  `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *LinkGroupInfoReq) Reset() {
	*x = LinkGroupInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkGroupInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkGroupInfoReq) ProtoMessage() {}

func (x *LinkGroupInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkGroupInfoReq.ProtoReflect.Descriptor instead.
func (*LinkGroupInfoReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{79}
}

func (x *LinkGroupInfoReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LinkGroupInfoReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LinkGroupInfoReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type LinkGroupInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Group  *Group    `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *LinkGroupInfoResp) Reset() {
	*x = LinkGroupInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkGroupInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkGroupInfoResp) ProtoMessage() {}

func (x *LinkGroupInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkGroupInfoResp.ProtoReflect.Descriptor instead.
func (*LinkGroupInfoResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{80}
}

func (x *LinkGroupInfoResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LinkGroupInfoResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *LinkGroupInfoResp) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type SyncGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header        *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Uin           uint64  `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	Pindex        uint32  `protobuf:"varint,3,opt,name=pindex,proto3" json:"pindex,omitempty"`
	Psize         uint32  `protobuf:"varint,4,opt,name=psize,proto3" json:"psize,omitempty"`
	LastUpdatedAt uint64  `protobuf:"varint,5,opt,name=last_updated_at,json=lastUpdatedAt,proto3" json:"last_updated_at,omitempty"`
}

func (x *SyncGroupReq) Reset() {
	*x = SyncGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncGroupReq) ProtoMessage() {}

func (x *SyncGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncGroupReq.ProtoReflect.Descriptor instead.
func (*SyncGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{81}
}

func (x *SyncGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SyncGroupReq) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *SyncGroupReq) GetPindex() uint32 {
	if x != nil {
		return x.Pindex
	}
	return 0
}

func (x *SyncGroupReq) GetPsize() uint32 {
	if x != nil {
		return x.Psize
	}
	return 0
}

func (x *SyncGroupReq) GetLastUpdatedAt() uint64 {
	if x != nil {
		return x.LastUpdatedAt
	}
	return 0
}

type SyncGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header        *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result        ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	LastUpdatedAt uint64    `protobuf:"varint,3,opt,name=last_updated_at,json=lastUpdatedAt,proto3" json:"last_updated_at,omitempty"`
	TotalPageCnt  uint64    `protobuf:"varint,4,opt,name=total_page_cnt,json=totalPageCnt,proto3" json:"total_page_cnt,omitempty"`
	UpdatedList   []*Group  `protobuf:"bytes,5,rep,name=updated_list,json=updatedList,proto3" json:"updated_list,omitempty"`
	AddedList     []*Group  `protobuf:"bytes,6,rep,name=added_list,json=addedList,proto3" json:"added_list,omitempty"`
	DeletedList   []*Group  `protobuf:"bytes,7,rep,name=deleted_list,json=deletedList,proto3" json:"deleted_list,omitempty"`
}

func (x *SyncGroupResp) Reset() {
	*x = SyncGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncGroupResp) ProtoMessage() {}

func (x *SyncGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncGroupResp.ProtoReflect.Descriptor instead.
func (*SyncGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{82}
}

func (x *SyncGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SyncGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *SyncGroupResp) GetLastUpdatedAt() uint64 {
	if x != nil {
		return x.LastUpdatedAt
	}
	return 0
}

func (x *SyncGroupResp) GetTotalPageCnt() uint64 {
	if x != nil {
		return x.TotalPageCnt
	}
	return 0
}

func (x *SyncGroupResp) GetUpdatedList() []*Group {
	if x != nil {
		return x.UpdatedList
	}
	return nil
}

func (x *SyncGroupResp) GetAddedList() []*Group {
	if x != nil {
		return x.AddedList
	}
	return nil
}

func (x *SyncGroupResp) GetDeletedList() []*Group {
	if x != nil {
		return x.DeletedList
	}
	return nil
}

type MoveGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Uin        uint64  `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	SrcGroupId uint64  `protobuf:"varint,3,opt,name=src_group_id,json=srcGroupId,proto3" json:"src_group_id,omitempty"`
	DstGroupId uint64  `protobuf:"varint,4,opt,name=dst_group_id,json=dstGroupId,proto3" json:"dst_group_id,omitempty"`
}

func (x *MoveGroupReq) Reset() {
	*x = MoveGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveGroupReq) ProtoMessage() {}

func (x *MoveGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveGroupReq.ProtoReflect.Descriptor instead.
func (*MoveGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{83}
}

func (x *MoveGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MoveGroupReq) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *MoveGroupReq) GetSrcGroupId() uint64 {
	if x != nil {
		return x.SrcGroupId
	}
	return 0
}

func (x *MoveGroupReq) GetDstGroupId() uint64 {
	if x != nil {
		return x.DstGroupId
	}
	return 0
}

type MoveGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Group  *Group    `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *MoveGroupResp) Reset() {
	*x = MoveGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveGroupResp) ProtoMessage() {}

func (x *MoveGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveGroupResp.ProtoReflect.Descriptor instead.
func (*MoveGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{84}
}

func (x *MoveGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MoveGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *MoveGroupResp) GetGroup() *Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type PinMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId   uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MessageId uint64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	OrderId   uint64  `protobuf:"varint,4,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *PinMessageReq) Reset() {
	*x = PinMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinMessageReq) ProtoMessage() {}

func (x *PinMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinMessageReq.ProtoReflect.Descriptor instead.
func (*PinMessageReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{85}
}

func (x *PinMessageReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PinMessageReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *PinMessageReq) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *PinMessageReq) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

type PinMessageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *PinMessageResp) Reset() {
	*x = PinMessageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PinMessageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinMessageResp) ProtoMessage() {}

func (x *PinMessageResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinMessageResp.ProtoReflect.Descriptor instead.
func (*PinMessageResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{86}
}

func (x *PinMessageResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PinMessageResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

type UnpinMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId   uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MessageId uint64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	UnpinAll  bool    `protobuf:"varint,4,opt,name=unpin_all,json=unpinAll,proto3" json:"unpin_all,omitempty"`
}

func (x *UnpinMessageReq) Reset() {
	*x = UnpinMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnpinMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpinMessageReq) ProtoMessage() {}

func (x *UnpinMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpinMessageReq.ProtoReflect.Descriptor instead.
func (*UnpinMessageReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{87}
}

func (x *UnpinMessageReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UnpinMessageReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UnpinMessageReq) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *UnpinMessageReq) GetUnpinAll() bool {
	if x != nil {
		return x.UnpinAll
	}
	return false
}

type UnpinMessageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *UnpinMessageResp) Reset() {
	*x = UnpinMessageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnpinMessageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpinMessageResp) ProtoMessage() {}

func (x *UnpinMessageResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpinMessageResp.ProtoReflect.Descriptor instead.
func (*UnpinMessageResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{88}
}

func (x *UnpinMessageResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UnpinMessageResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

type ListPinnedMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *ListPinnedMessageReq) Reset() {
	*x = ListPinnedMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPinnedMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPinnedMessageReq) ProtoMessage() {}

func (x *ListPinnedMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPinnedMessageReq.ProtoReflect.Descriptor instead.
func (*ListPinnedMessageReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{89}
}

func (x *ListPinnedMessageReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListPinnedMessageReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type ListPinnedMessageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header   *Header    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result   ErrorCode  `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Messages []*Message `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *ListPinnedMessageResp) Reset() {
	*x = ListPinnedMessageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPinnedMessageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPinnedMessageResp) ProtoMessage() {}

func (x *ListPinnedMessageResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPinnedMessageResp.ProtoReflect.Descriptor instead.
func (*ListPinnedMessageResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{90}
}

func (x *ListPinnedMessageResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListPinnedMessageResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *ListPinnedMessageResp) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

type ReactionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ReactionCode `protobuf:"varint,1,opt,name=type,proto3,enum=voicechat.ReactionCode" json:"type,omitempty"`
	Cnt  int32        `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt,omitempty"`
}

func (x *ReactionItem) Reset() {
	*x = ReactionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactionItem) ProtoMessage() {}

func (x *ReactionItem) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactionItem.ProtoReflect.Descriptor instead.
func (*ReactionItem) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{91}
}

func (x *ReactionItem) GetType() ReactionCode {
	if x != nil {
		return x.Type
	}
	return ReactionCode_REACTIONCODE_LIKE
}

func (x *ReactionItem) GetCnt() int32 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

type ReactionListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ReactionCode `protobuf:"varint,1,opt,name=type,proto3,enum=voicechat.ReactionCode" json:"type,omitempty"`
	Cnt  int32        `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt,omitempty"`
	Uins []uint64     `protobuf:"varint,3,rep,packed,name=uins,proto3" json:"uins,omitempty"`
}

func (x *ReactionListItem) Reset() {
	*x = ReactionListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactionListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactionListItem) ProtoMessage() {}

func (x *ReactionListItem) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactionListItem.ProtoReflect.Descriptor instead.
func (*ReactionListItem) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{92}
}

func (x *ReactionListItem) GetType() ReactionCode {
	if x != nil {
		return x.Type
	}
	return ReactionCode_REACTIONCODE_LIKE
}

func (x *ReactionListItem) GetCnt() int32 {
	if x != nil {
		return x.Cnt
	}
	return 0
}

func (x *ReactionListItem) GetUins() []uint64 {
	if x != nil {
		return x.Uins
	}
	return nil
}

type Reaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId uint64                  `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	GroupId   uint64                  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Reactions map[string]int32        `protobuf:"bytes,3,rep,name=reactions,proto3" json:"reactions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Uins      map[uint64]ReactionCode `protobuf:"bytes,4,rep,name=uins,proto3" json:"uins,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=voicechat.ReactionCode"`
}

func (x *Reaction) Reset() {
	*x = Reaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reaction) ProtoMessage() {}

func (x *Reaction) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reaction.ProtoReflect.Descriptor instead.
func (*Reaction) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{93}
}

func (x *Reaction) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *Reaction) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *Reaction) GetReactions() map[string]int32 {
	if x != nil {
		return x.Reactions
	}
	return nil
}

func (x *Reaction) GetUins() map[uint64]ReactionCode {
	if x != nil {
		return x.Uins
	}
	return nil
}

type BroadcastReactionItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId      uint64          `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MessageId    uint64          `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	SenderUin    uint64          `protobuf:"varint,3,opt,name=sender_uin,json=senderUin,proto3" json:"sender_uin,omitempty"`
	TypeReaction uint32          `protobuf:"varint,4,opt,name=type_reaction,json=typeReaction,proto3" json:"type_reaction,omitempty"`
	Reactions    []*ReactionItem `protobuf:"bytes,5,rep,name=reactions,proto3" json:"reactions,omitempty"`
}

func (x *BroadcastReactionItem) Reset() {
	*x = BroadcastReactionItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastReactionItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastReactionItem) ProtoMessage() {}

func (x *BroadcastReactionItem) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastReactionItem.ProtoReflect.Descriptor instead.
func (*BroadcastReactionItem) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{94}
}

func (x *BroadcastReactionItem) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *BroadcastReactionItem) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *BroadcastReactionItem) GetSenderUin() uint64 {
	if x != nil {
		return x.SenderUin
	}
	return 0
}

func (x *BroadcastReactionItem) GetTypeReaction() uint32 {
	if x != nil {
		return x.TypeReaction
	}
	return 0
}

func (x *BroadcastReactionItem) GetReactions() []*ReactionItem {
	if x != nil {
		return x.Reactions
	}
	return nil
}

type BroadcastReaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header         *Header                `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Type           BroadcastMessageType   `protobuf:"varint,2,opt,name=type,proto3,enum=voicechat.BroadcastMessageType" json:"type,omitempty"`
	GroupType      GroupType              `protobuf:"varint,3,opt,name=group_type,json=groupType,proto3,enum=voicechat.GroupType" json:"group_type,omitempty"`
	RecipientInfos []*Header              `protobuf:"bytes,4,rep,name=recipient_infos,json=recipientInfos,proto3" json:"recipient_infos,omitempty"`
	MutedUins      []uint64               `protobuf:"varint,5,rep,packed,name=muted_uins,json=mutedUins,proto3" json:"muted_uins,omitempty"`
	Message        *BroadcastReactionItem `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BroadcastReaction) Reset() {
	*x = BroadcastReaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastReaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastReaction) ProtoMessage() {}

func (x *BroadcastReaction) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastReaction.ProtoReflect.Descriptor instead.
func (*BroadcastReaction) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{95}
}

func (x *BroadcastReaction) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BroadcastReaction) GetType() BroadcastMessageType {
	if x != nil {
		return x.Type
	}
	return BroadcastMessageType_BROADCAST_MESSAGE_TYPE_NEW
}

func (x *BroadcastReaction) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_GROUP_TYPE_UNKNOWN
}

func (x *BroadcastReaction) GetRecipientInfos() []*Header {
	if x != nil {
		return x.RecipientInfos
	}
	return nil
}

func (x *BroadcastReaction) GetMutedUins() []uint64 {
	if x != nil {
		return x.MutedUins
	}
	return nil
}

func (x *BroadcastReaction) GetMessage() *BroadcastReactionItem {
	if x != nil {
		return x.Message
	}
	return nil
}

type ReactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId   uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MessageId uint64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Type      uint64  `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ReactionReq) Reset() {
	*x = ReactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactionReq) ProtoMessage() {}

func (x *ReactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactionReq.ProtoReflect.Descriptor instead.
func (*ReactionReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{96}
}

func (x *ReactionReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ReactionReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ReactionReq) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ReactionReq) GetType() uint64 {
	if x != nil {
		return x.Type
	}
	return 0
}

type ReactionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header         `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result    ErrorCode       `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Reactions []*ReactionItem `protobuf:"bytes,3,rep,name=reactions,proto3" json:"reactions,omitempty"`
}

func (x *ReactionResp) Reset() {
	*x = ReactionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactionResp) ProtoMessage() {}

func (x *ReactionResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactionResp.ProtoReflect.Descriptor instead.
func (*ReactionResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{97}
}

func (x *ReactionResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ReactionResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *ReactionResp) GetReactions() []*ReactionItem {
	if x != nil {
		return x.Reactions
	}
	return nil
}

type ListReactionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header             `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result    ErrorCode           `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Reactions []*ReactionListItem `protobuf:"bytes,3,rep,name=reactions,proto3" json:"reactions,omitempty"`
}

func (x *ListReactionResp) Reset() {
	*x = ListReactionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReactionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReactionResp) ProtoMessage() {}

func (x *ListReactionResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReactionResp.ProtoReflect.Descriptor instead.
func (*ListReactionResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{98}
}

func (x *ListReactionResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListReactionResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *ListReactionResp) GetReactions() []*ReactionListItem {
	if x != nil {
		return x.Reactions
	}
	return nil
}

type AddAdminGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId   uint64   `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	AdminUins []uint64 `protobuf:"varint,3,rep,packed,name=admin_uins,json=adminUins,proto3" json:"admin_uins,omitempty"`
}

func (x *AddAdminGroupReq) Reset() {
	*x = AddAdminGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAdminGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAdminGroupReq) ProtoMessage() {}

func (x *AddAdminGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAdminGroupReq.ProtoReflect.Descriptor instead.
func (*AddAdminGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{99}
}

func (x *AddAdminGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AddAdminGroupReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *AddAdminGroupReq) GetAdminUins() []uint64 {
	if x != nil {
		return x.AdminUins
	}
	return nil
}

type AddAdminGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *AddAdminGroupResp) Reset() {
	*x = AddAdminGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAdminGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAdminGroupResp) ProtoMessage() {}

func (x *AddAdminGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAdminGroupResp.ProtoReflect.Descriptor instead.
func (*AddAdminGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{100}
}

func (x *AddAdminGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AddAdminGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

type DeleteAdminGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId   uint64   `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	AdminUins []uint64 `protobuf:"varint,3,rep,packed,name=admin_uins,json=adminUins,proto3" json:"admin_uins,omitempty"`
}

func (x *DeleteAdminGroupReq) Reset() {
	*x = DeleteAdminGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdminGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdminGroupReq) ProtoMessage() {}

func (x *DeleteAdminGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdminGroupReq.ProtoReflect.Descriptor instead.
func (*DeleteAdminGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{101}
}

func (x *DeleteAdminGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteAdminGroupReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *DeleteAdminGroupReq) GetAdminUins() []uint64 {
	if x != nil {
		return x.AdminUins
	}
	return nil
}

type DeleteAdminGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *DeleteAdminGroupResp) Reset() {
	*x = DeleteAdminGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAdminGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAdminGroupResp) ProtoMessage() {}

func (x *DeleteAdminGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAdminGroupResp.ProtoReflect.Descriptor instead.
func (*DeleteAdminGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{102}
}

func (x *DeleteAdminGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteAdminGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

type ListPendingGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Uin    uint64  `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	Pindex uint32  `protobuf:"varint,3,opt,name=pindex,proto3" json:"pindex,omitempty"`
	Psize  uint32  `protobuf:"varint,4,opt,name=psize,proto3" json:"psize,omitempty"`
}

func (x *ListPendingGroupReq) Reset() {
	*x = ListPendingGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPendingGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPendingGroupReq) ProtoMessage() {}

func (x *ListPendingGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPendingGroupReq.ProtoReflect.Descriptor instead.
func (*ListPendingGroupReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{103}
}

func (x *ListPendingGroupReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListPendingGroupReq) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *ListPendingGroupReq) GetPindex() uint32 {
	if x != nil {
		return x.Pindex
	}
	return 0
}

func (x *ListPendingGroupReq) GetPsize() uint32 {
	if x != nil {
		return x.Psize
	}
	return 0
}

type ListPendingGroupResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Groups []*Group  `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *ListPendingGroupResp) Reset() {
	*x = ListPendingGroupResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPendingGroupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPendingGroupResp) ProtoMessage() {}

func (x *ListPendingGroupResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPendingGroupResp.ProtoReflect.Descriptor instead.
func (*ListPendingGroupResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{104}
}

func (x *ListPendingGroupResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListPendingGroupResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *ListPendingGroupResp) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type GroupUserStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GROUP_USER_STATUS = 0x05f8;
	Header   *Header      `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Uin      uint64       `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	Status   OnlineStatus `protobuf:"varint,3,opt,name=status,proto3,enum=voicechat.OnlineStatus" json:"status,omitempty"`
	GroupIds []uint64     `protobuf:"varint,4,rep,packed,name=group_ids,json=groupIds,proto3" json:"group_ids,omitempty"`
}

func (x *GroupUserStatus) Reset() {
	*x = GroupUserStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupUserStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupUserStatus) ProtoMessage() {}

func (x *GroupUserStatus) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupUserStatus.ProtoReflect.Descriptor instead.
func (*GroupUserStatus) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{105}
}

func (x *GroupUserStatus) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GroupUserStatus) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *GroupUserStatus) GetStatus() OnlineStatus {
	if x != nil {
		return x.Status
	}
	return OnlineStatus_ONLINESTATUS_UNKNOWN
}

func (x *GroupUserStatus) GetGroupIds() []uint64 {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

type UpdateGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId            uint64     `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Name               string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Mode               GroupMode  `protobuf:"varint,16,opt,name=mode,proto3,enum=voicechat.GroupMode" json:"mode,omitempty"`
	Description        string     `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	AvatarUrl          string     `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	OwnerUin           uint64     `protobuf:"varint,4,opt,name=owner_uin,json=ownerUin,proto3" json:"owner_uin,omitempty"`
	Background         string     `protobuf:"bytes,14,opt,name=background,proto3" json:"background,omitempty"`
	PullAll            []uint64   `protobuf:"varint,5,rep,packed,name=pull_all,json=pullAll,proto3" json:"pull_all,omitempty"`
	PushAll            []uint64   `protobuf:"varint,6,rep,packed,name=push_all,json=pushAll,proto3" json:"push_all,omitempty"`
	BlockedAll         []uint64   `protobuf:"varint,7,rep,packed,name=blocked_all,json=blockedAll,proto3" json:"blocked_all,omitempty"`
	UnblockedAll       []uint64   `protobuf:"varint,8,rep,packed,name=unblocked_all,json=unblockedAll,proto3" json:"unblocked_all,omitempty"`
	AddedAdminAll      []uint64   `protobuf:"varint,11,rep,packed,name=added_admin_all,json=addedAdminAll,proto3" json:"added_admin_all,omitempty"`
	DeletedAdminAll    []uint64   `protobuf:"varint,12,rep,packed,name=deleted_admin_all,json=deletedAdminAll,proto3" json:"deleted_admin_all,omitempty"`
	PinnedMessage      *Message   `protobuf:"bytes,9,opt,name=pinned_message,json=pinnedMessage,proto3" json:"pinned_message,omitempty"`
	UnpinnedMessageAll []*Message `protobuf:"bytes,10,rep,name=unpinned_message_all,json=unpinnedMessageAll,proto3" json:"unpinned_message_all,omitempty"`
	Groupcall          *GroupCall `protobuf:"bytes,15,opt,name=groupcall,proto3" json:"groupcall,omitempty"`
}

func (x *UpdateGroup) Reset() {
	*x = UpdateGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGroup) ProtoMessage() {}

func (x *UpdateGroup) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGroup.ProtoReflect.Descriptor instead.
func (*UpdateGroup) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{106}
}

func (x *UpdateGroup) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UpdateGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateGroup) GetMode() GroupMode {
	if x != nil {
		return x.Mode
	}
	return GroupMode_GROUP_MODE_UNKNOWN
}

func (x *UpdateGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateGroup) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *UpdateGroup) GetOwnerUin() uint64 {
	if x != nil {
		return x.OwnerUin
	}
	return 0
}

func (x *UpdateGroup) GetBackground() string {
	if x != nil {
		return x.Background
	}
	return ""
}

func (x *UpdateGroup) GetPullAll() []uint64 {
	if x != nil {
		return x.PullAll
	}
	return nil
}

func (x *UpdateGroup) GetPushAll() []uint64 {
	if x != nil {
		return x.PushAll
	}
	return nil
}

func (x *UpdateGroup) GetBlockedAll() []uint64 {
	if x != nil {
		return x.BlockedAll
	}
	return nil
}

func (x *UpdateGroup) GetUnblockedAll() []uint64 {
	if x != nil {
		return x.UnblockedAll
	}
	return nil
}

func (x *UpdateGroup) GetAddedAdminAll() []uint64 {
	if x != nil {
		return x.AddedAdminAll
	}
	return nil
}

func (x *UpdateGroup) GetDeletedAdminAll() []uint64 {
	if x != nil {
		return x.DeletedAdminAll
	}
	return nil
}

func (x *UpdateGroup) GetPinnedMessage() *Message {
	if x != nil {
		return x.PinnedMessage
	}
	return nil
}

func (x *UpdateGroup) GetUnpinnedMessageAll() []*Message {
	if x != nil {
		return x.UnpinnedMessageAll
	}
	return nil
}

func (x *UpdateGroup) GetGroupcall() *GroupCall {
	if x != nil {
		return x.Groupcall
	}
	return nil
}

type DeleteGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *DeleteGroup) Reset() {
	*x = DeleteGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroup) ProtoMessage() {}

func (x *DeleteGroup) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroup.ProtoReflect.Descriptor instead.
func (*DeleteGroup) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{107}
}

func (x *DeleteGroup) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type NewRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin     uint64 `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Phone   string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	GroupId uint64 `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *NewRegistration) Reset() {
	*x = NewRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewRegistration) ProtoMessage() {}

func (x *NewRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewRegistration.ProtoReflect.Descriptor instead.
func (*NewRegistration) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{108}
}

func (x *NewRegistration) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *NewRegistration) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewRegistration) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *NewRegistration) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type StartSecretChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId       uint64   `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Uin           uint64   `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	RecipientUins []uint64 `protobuf:"varint,7,rep,packed,name=recipient_uins,json=recipientUins,proto3" json:"recipient_uins,omitempty"`
	DeviceId      string   `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	IdentityKey   string   `protobuf:"bytes,4,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
	BaseKey       string   `protobuf:"bytes,5,opt,name=base_key,json=baseKey,proto3" json:"base_key,omitempty"`
	OneTimePreKey string   `protobuf:"bytes,6,opt,name=one_time_pre_key,json=oneTimePreKey,proto3" json:"one_time_pre_key,omitempty"`
}

func (x *StartSecretChat) Reset() {
	*x = StartSecretChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartSecretChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSecretChat) ProtoMessage() {}

func (x *StartSecretChat) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSecretChat.ProtoReflect.Descriptor instead.
func (*StartSecretChat) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{109}
}

func (x *StartSecretChat) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *StartSecretChat) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *StartSecretChat) GetRecipientUins() []uint64 {
	if x != nil {
		return x.RecipientUins
	}
	return nil
}

func (x *StartSecretChat) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *StartSecretChat) GetIdentityKey() string {
	if x != nil {
		return x.IdentityKey
	}
	return ""
}

func (x *StartSecretChat) GetBaseKey() string {
	if x != nil {
		return x.BaseKey
	}
	return ""
}

func (x *StartSecretChat) GetOneTimePreKey() string {
	if x != nil {
		return x.OneTimePreKey
	}
	return ""
}

type AcceptSecretChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId       uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Uin           uint64 `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	DeviceId      string `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	IdentityKey   string `protobuf:"bytes,4,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
	BaseKey       string `protobuf:"bytes,5,opt,name=base_key,json=baseKey,proto3" json:"base_key,omitempty"`
	OneTimePreKey string `protobuf:"bytes,6,opt,name=one_time_pre_key,json=oneTimePreKey,proto3" json:"one_time_pre_key,omitempty"`
}

func (x *AcceptSecretChat) Reset() {
	*x = AcceptSecretChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceptSecretChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptSecretChat) ProtoMessage() {}

func (x *AcceptSecretChat) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptSecretChat.ProtoReflect.Descriptor instead.
func (*AcceptSecretChat) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{110}
}

func (x *AcceptSecretChat) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *AcceptSecretChat) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *AcceptSecretChat) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *AcceptSecretChat) GetIdentityKey() string {
	if x != nil {
		return x.IdentityKey
	}
	return ""
}

func (x *AcceptSecretChat) GetBaseKey() string {
	if x != nil {
		return x.BaseKey
	}
	return ""
}

func (x *AcceptSecretChat) GetOneTimePreKey() string {
	if x != nil {
		return x.OneTimePreKey
	}
	return ""
}

type DeleteSecretChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId     uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName   string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	GroupAvatar string `protobuf:"bytes,3,opt,name=group_avatar,json=groupAvatar,proto3" json:"group_avatar,omitempty"`
}

func (x *DeleteSecretChat) Reset() {
	*x = DeleteSecretChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSecretChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecretChat) ProtoMessage() {}

func (x *DeleteSecretChat) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecretChat.ProtoReflect.Descriptor instead.
func (*DeleteSecretChat) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{111}
}

func (x *DeleteSecretChat) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *DeleteSecretChat) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *DeleteSecretChat) GetGroupAvatar() string {
	if x != nil {
		return x.GroupAvatar
	}
	return ""
}

type JoinGroupCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupcallId uint64   `protobuf:"varint,1,opt,name=groupcall_id,json=groupcallId,proto3" json:"groupcall_id,omitempty"`
	GroupId     uint64   `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MessageId   uint64   `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	JoinedUins  []uint64 `protobuf:"varint,4,rep,packed,name=joined_uins,json=joinedUins,proto3" json:"joined_uins,omitempty"`
	CreatorUin  uint64   `protobuf:"varint,5,opt,name=creator_uin,json=creatorUin,proto3" json:"creator_uin,omitempty"`
}

func (x *JoinGroupCall) Reset() {
	*x = JoinGroupCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinGroupCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGroupCall) ProtoMessage() {}

func (x *JoinGroupCall) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGroupCall.ProtoReflect.Descriptor instead.
func (*JoinGroupCall) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{112}
}

func (x *JoinGroupCall) GetGroupcallId() uint64 {
	if x != nil {
		return x.GroupcallId
	}
	return 0
}

func (x *JoinGroupCall) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *JoinGroupCall) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *JoinGroupCall) GetJoinedUins() []uint64 {
	if x != nil {
		return x.JoinedUins
	}
	return nil
}

func (x *JoinGroupCall) GetCreatorUin() uint64 {
	if x != nil {
		return x.CreatorUin
	}
	return 0
}

type LeaveGroupCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupcallId uint64   `protobuf:"varint,1,opt,name=groupcall_id,json=groupcallId,proto3" json:"groupcall_id,omitempty"`
	GroupId     uint64   `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MessageId   uint64   `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	LeavingUins []uint64 `protobuf:"varint,4,rep,packed,name=leaving_uins,json=leavingUins,proto3" json:"leaving_uins,omitempty"`
}

func (x *LeaveGroupCall) Reset() {
	*x = LeaveGroupCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveGroupCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveGroupCall) ProtoMessage() {}

func (x *LeaveGroupCall) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveGroupCall.ProtoReflect.Descriptor instead.
func (*LeaveGroupCall) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{113}
}

func (x *LeaveGroupCall) GetGroupcallId() uint64 {
	if x != nil {
		return x.GroupcallId
	}
	return 0
}

func (x *LeaveGroupCall) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *LeaveGroupCall) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *LeaveGroupCall) GetLeavingUins() []uint64 {
	if x != nil {
		return x.LeavingUins
	}
	return nil
}

type InviteGroupCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupcallId uint64        `protobuf:"varint,1,opt,name=groupcall_id,json=groupcallId,proto3" json:"groupcall_id,omitempty"`
	GroupId     uint64        `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MessageId   uint64        `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	SenderUin   uint64        `protobuf:"varint,4,opt,name=sender_uin,json=senderUin,proto3" json:"sender_uin,omitempty"`
	InvitedUin  uint64        `protobuf:"varint,5,opt,name=invited_uin,json=invitedUin,proto3" json:"invited_uin,omitempty"`
	Type        GroupCallType `protobuf:"varint,6,opt,name=type,proto3,enum=voicechat.GroupCallType" json:"type,omitempty"`
	IsNotify    bool          `protobuf:"varint,7,opt,name=is_notify,json=isNotify,proto3" json:"is_notify,omitempty"`
}

func (x *InviteGroupCall) Reset() {
	*x = InviteGroupCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteGroupCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteGroupCall) ProtoMessage() {}

func (x *InviteGroupCall) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteGroupCall.ProtoReflect.Descriptor instead.
func (*InviteGroupCall) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{114}
}

func (x *InviteGroupCall) GetGroupcallId() uint64 {
	if x != nil {
		return x.GroupcallId
	}
	return 0
}

func (x *InviteGroupCall) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *InviteGroupCall) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *InviteGroupCall) GetSenderUin() uint64 {
	if x != nil {
		return x.SenderUin
	}
	return 0
}

func (x *InviteGroupCall) GetInvitedUin() uint64 {
	if x != nil {
		return x.InvitedUin
	}
	return 0
}

func (x *InviteGroupCall) GetType() GroupCallType {
	if x != nil {
		return x.Type
	}
	return GroupCallType_GROUPCALL_TYPE_UNKNOWN
}

func (x *InviteGroupCall) GetIsNotify() bool {
	if x != nil {
		return x.IsNotify
	}
	return false
}

type StopGroupCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupcallId uint64 `protobuf:"varint,1,opt,name=groupcall_id,json=groupcallId,proto3" json:"groupcall_id,omitempty"`
	GroupId     uint64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MessageId   uint64 `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *StopGroupCall) Reset() {
	*x = StopGroupCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopGroupCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopGroupCall) ProtoMessage() {}

func (x *StopGroupCall) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopGroupCall.ProtoReflect.Descriptor instead.
func (*StopGroupCall) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{115}
}

func (x *StopGroupCall) GetGroupcallId() uint64 {
	if x != nil {
		return x.GroupcallId
	}
	return 0
}

func (x *StopGroupCall) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *StopGroupCall) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type BroadcastGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header         *Header            `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId        uint64             `protobuf:"varint,11,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupType      GroupType          `protobuf:"varint,12,opt,name=group_type,json=groupType,proto3,enum=voicechat.GroupType" json:"group_type,omitempty"`
	Type           BroadcastGroupType `protobuf:"varint,2,opt,name=type,proto3,enum=voicechat.BroadcastGroupType" json:"type,omitempty"`
	RecipientInfos []*Header          `protobuf:"bytes,3,rep,name=recipient_infos,json=recipientInfos,proto3" json:"recipient_infos,omitempty"`
	// Types that are assignable to Msg:
	//	*BroadcastGroup_Group
	//	*BroadcastGroup_Update
	//	*BroadcastGroup_Delete
	//	*BroadcastGroup_Registration
	//	*BroadcastGroup_StartSecretChat
	//	*BroadcastGroup_AcceptSecretChat
	//	*BroadcastGroup_DeleteSecretChat
	//	*BroadcastGroup_StartGroupcall
	//	*BroadcastGroup_CreateGroupcall
	//	*BroadcastGroup_JoinGroupcall
	//	*BroadcastGroup_LeaveGroupcall
	//	*BroadcastGroup_InviteGroupcall
	//	*BroadcastGroup_StopGroupcall
	Msg isBroadcastGroup_Msg `protobuf_oneof:"msg"`
}

func (x *BroadcastGroup) Reset() {
	*x = BroadcastGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastGroup) ProtoMessage() {}

func (x *BroadcastGroup) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastGroup.ProtoReflect.Descriptor instead.
func (*BroadcastGroup) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{116}
}

func (x *BroadcastGroup) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BroadcastGroup) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *BroadcastGroup) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_GROUP_TYPE_UNKNOWN
}

func (x *BroadcastGroup) GetType() BroadcastGroupType {
	if x != nil {
		return x.Type
	}
	return BroadcastGroupType_BROADCAST_GROUP_TYPE_NEW
}

func (x *BroadcastGroup) GetRecipientInfos() []*Header {
	if x != nil {
		return x.RecipientInfos
	}
	return nil
}

func (m *BroadcastGroup) GetMsg() isBroadcastGroup_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *BroadcastGroup) GetGroup() *Group {
	if x, ok := x.GetMsg().(*BroadcastGroup_Group); ok {
		return x.Group
	}
	return nil
}

func (x *BroadcastGroup) GetUpdate() *UpdateGroup {
	if x, ok := x.GetMsg().(*BroadcastGroup_Update); ok {
		return x.Update
	}
	return nil
}

func (x *BroadcastGroup) GetDelete() *DeleteGroup {
	if x, ok := x.GetMsg().(*BroadcastGroup_Delete); ok {
		return x.Delete
	}
	return nil
}

func (x *BroadcastGroup) GetRegistration() *NewRegistration {
	if x, ok := x.GetMsg().(*BroadcastGroup_Registration); ok {
		return x.Registration
	}
	return nil
}

func (x *BroadcastGroup) GetStartSecretChat() *StartSecretChat {
	if x, ok := x.GetMsg().(*BroadcastGroup_StartSecretChat); ok {
		return x.StartSecretChat
	}
	return nil
}

func (x *BroadcastGroup) GetAcceptSecretChat() *AcceptSecretChat {
	if x, ok := x.GetMsg().(*BroadcastGroup_AcceptSecretChat); ok {
		return x.AcceptSecretChat
	}
	return nil
}

func (x *BroadcastGroup) GetDeleteSecretChat() *DeleteSecretChat {
	if x, ok := x.GetMsg().(*BroadcastGroup_DeleteSecretChat); ok {
		return x.DeleteSecretChat
	}
	return nil
}

func (x *BroadcastGroup) GetStartGroupcall() *GroupCall {
	if x, ok := x.GetMsg().(*BroadcastGroup_StartGroupcall); ok {
		return x.StartGroupcall
	}
	return nil
}

func (x *BroadcastGroup) GetCreateGroupcall() *GroupCall {
	if x, ok := x.GetMsg().(*BroadcastGroup_CreateGroupcall); ok {
		return x.CreateGroupcall
	}
	return nil
}

func (x *BroadcastGroup) GetJoinGroupcall() *JoinGroupCall {
	if x, ok := x.GetMsg().(*BroadcastGroup_JoinGroupcall); ok {
		return x.JoinGroupcall
	}
	return nil
}

func (x *BroadcastGroup) GetLeaveGroupcall() *LeaveGroupCall {
	if x, ok := x.GetMsg().(*BroadcastGroup_LeaveGroupcall); ok {
		return x.LeaveGroupcall
	}
	return nil
}

func (x *BroadcastGroup) GetInviteGroupcall() *InviteGroupCall {
	if x, ok := x.GetMsg().(*BroadcastGroup_InviteGroupcall); ok {
		return x.InviteGroupcall
	}
	return nil
}

func (x *BroadcastGroup) GetStopGroupcall() *StopGroupCall {
	if x, ok := x.GetMsg().(*BroadcastGroup_StopGroupcall); ok {
		return x.StopGroupcall
	}
	return nil
}

type isBroadcastGroup_Msg interface {
	isBroadcastGroup_Msg()
}

type BroadcastGroup_Group struct {
	Group *Group `protobuf:"bytes,4,opt,name=group,proto3,oneof"`
}

type BroadcastGroup_Update struct {
	Update *UpdateGroup `protobuf:"bytes,5,opt,name=update,proto3,oneof"`
}

type BroadcastGroup_Delete struct {
	Delete *DeleteGroup `protobuf:"bytes,6,opt,name=delete,proto3,oneof"`
}

type BroadcastGroup_Registration struct {
	Registration *NewRegistration `protobuf:"bytes,7,opt,name=registration,proto3,oneof"`
}

type BroadcastGroup_StartSecretChat struct {
	StartSecretChat *StartSecretChat `protobuf:"bytes,8,opt,name=start_secret_chat,json=startSecretChat,proto3,oneof"`
}

type BroadcastGroup_AcceptSecretChat struct {
	AcceptSecretChat *AcceptSecretChat `protobuf:"bytes,9,opt,name=accept_secret_chat,json=acceptSecretChat,proto3,oneof"`
}

type BroadcastGroup_DeleteSecretChat struct {
	DeleteSecretChat *DeleteSecretChat `protobuf:"bytes,10,opt,name=delete_secret_chat,json=deleteSecretChat,proto3,oneof"`
}

type BroadcastGroup_StartGroupcall struct {
	StartGroupcall *GroupCall `protobuf:"bytes,13,opt,name=start_groupcall,json=startGroupcall,proto3,oneof"`
}

type BroadcastGroup_CreateGroupcall struct {
	CreateGroupcall *GroupCall `protobuf:"bytes,14,opt,name=create_groupcall,json=createGroupcall,proto3,oneof"`
}

type BroadcastGroup_JoinGroupcall struct {
	JoinGroupcall *JoinGroupCall `protobuf:"bytes,15,opt,name=join_groupcall,json=joinGroupcall,proto3,oneof"`
}

type BroadcastGroup_LeaveGroupcall struct {
	LeaveGroupcall *LeaveGroupCall `protobuf:"bytes,16,opt,name=leave_groupcall,json=leaveGroupcall,proto3,oneof"`
}

type BroadcastGroup_InviteGroupcall struct {
	InviteGroupcall *InviteGroupCall `protobuf:"bytes,17,opt,name=invite_groupcall,json=inviteGroupcall,proto3,oneof"`
}

type BroadcastGroup_StopGroupcall struct {
	StopGroupcall *StopGroupCall `protobuf:"bytes,18,opt,name=stop_groupcall,json=stopGroupcall,proto3,oneof"`
}

func (*BroadcastGroup_Group) isBroadcastGroup_Msg() {}

func (*BroadcastGroup_Update) isBroadcastGroup_Msg() {}

func (*BroadcastGroup_Delete) isBroadcastGroup_Msg() {}

func (*BroadcastGroup_Registration) isBroadcastGroup_Msg() {}

func (*BroadcastGroup_StartSecretChat) isBroadcastGroup_Msg() {}

func (*BroadcastGroup_AcceptSecretChat) isBroadcastGroup_Msg() {}

func (*BroadcastGroup_DeleteSecretChat) isBroadcastGroup_Msg() {}

func (*BroadcastGroup_StartGroupcall) isBroadcastGroup_Msg() {}

func (*BroadcastGroup_CreateGroupcall) isBroadcastGroup_Msg() {}

func (*BroadcastGroup_JoinGroupcall) isBroadcastGroup_Msg() {}

func (*BroadcastGroup_LeaveGroupcall) isBroadcastGroup_Msg() {}

func (*BroadcastGroup_InviteGroupcall) isBroadcastGroup_Msg() {}

func (*BroadcastGroup_StopGroupcall) isBroadcastGroup_Msg() {}

type SeenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin    uint64 `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"`
	SeenAt uint64 `protobuf:"varint,2,opt,name=seen_at,json=seenAt,proto3" json:"seen_at,omitempty"`
}

func (x *SeenInfo) Reset() {
	*x = SeenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeenInfo) ProtoMessage() {}

func (x *SeenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeenInfo.ProtoReflect.Descriptor instead.
func (*SeenInfo) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{117}
}

func (x *SeenInfo) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *SeenInfo) GetSeenAt() uint64 {
	if x != nil {
		return x.SeenAt
	}
	return 0
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId     uint64          `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	GroupId       uint64          `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Message       string          `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	SenderUin     uint64          `protobuf:"varint,4,opt,name=sender_uin,json=senderUin,proto3" json:"sender_uin,omitempty"`
	CreatedAt     uint64          `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     uint64          `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	PinnedAt      uint64          `protobuf:"varint,22,opt,name=pinned_at,json=pinnedAt,proto3" json:"pinned_at,omitempty"`
	OrderId       uint64          `protobuf:"varint,25,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"` // used by pinned message
	Status        MessageStatus   `protobuf:"varint,7,opt,name=status,proto3,enum=voicechat.MessageStatus" json:"status,omitempty"`
	RecipientUins []uint64        `protobuf:"varint,8,rep,packed,name=recipient_uins,json=recipientUins,proto3" json:"recipient_uins,omitempty"`
	ReceivedUins  []uint64        `protobuf:"varint,9,rep,packed,name=received_uins,json=receivedUins,proto3" json:"received_uins,omitempty"`
	SeenUins      []uint64        `protobuf:"varint,10,rep,packed,name=seen_uins,json=seenUins,proto3" json:"seen_uins,omitempty"`
	DeletedUins   []uint64        `protobuf:"varint,11,rep,packed,name=deleted_uins,json=deletedUins,proto3" json:"deleted_uins,omitempty"`
	Type          MessageType     `protobuf:"varint,12,opt,name=type,proto3,enum=voicechat.MessageType" json:"type,omitempty"`
	Attachments   string          `protobuf:"bytes,13,opt,name=attachments,proto3" json:"attachments,omitempty"`
	GroupName     string          `protobuf:"bytes,14,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	GroupAvatar   string          `protobuf:"bytes,15,opt,name=group_avatar,json=groupAvatar,proto3" json:"group_avatar,omitempty"`
	SenderName    string          `protobuf:"bytes,16,opt,name=sender_name,json=senderName,proto3" json:"sender_name,omitempty"`
	SenderAvatar  string          `protobuf:"bytes,17,opt,name=sender_avatar,json=senderAvatar,proto3" json:"sender_avatar,omitempty"`
	GroupType     GroupType       `protobuf:"varint,18,opt,name=group_type,json=groupType,proto3,enum=voicechat.GroupType" json:"group_type,omitempty"`
	Nonce         string          `protobuf:"bytes,19,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Version       uint32          `protobuf:"varint,20,opt,name=version,proto3" json:"version,omitempty"`
	IsEncrypted   bool            `protobuf:"varint,21,opt,name=is_encrypted,json=isEncrypted,proto3" json:"is_encrypted,omitempty"`
	MentionedUins []uint64        `protobuf:"varint,23,rep,packed,name=mentioned_uins,json=mentionedUins,proto3" json:"mentioned_uins,omitempty"`
	MentionedAll  bool            `protobuf:"varint,24,opt,name=mentioned_all,json=mentionedAll,proto3" json:"mentioned_all,omitempty"`
	SeenInfos     []*SeenInfo     `protobuf:"bytes,26,rep,name=seen_infos,json=seenInfos,proto3" json:"seen_infos,omitempty"`
	Reactions     []*ReactionItem `protobuf:"bytes,27,rep,name=reactions,proto3" json:"reactions,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{118}
}

func (x *Message) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *Message) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *Message) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Message) GetSenderUin() uint64 {
	if x != nil {
		return x.SenderUin
	}
	return 0
}

func (x *Message) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Message) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Message) GetPinnedAt() uint64 {
	if x != nil {
		return x.PinnedAt
	}
	return 0
}

func (x *Message) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *Message) GetStatus() MessageStatus {
	if x != nil {
		return x.Status
	}
	return MessageStatus_MESSAGE_STATUS_UNKNOWN
}

func (x *Message) GetRecipientUins() []uint64 {
	if x != nil {
		return x.RecipientUins
	}
	return nil
}

func (x *Message) GetReceivedUins() []uint64 {
	if x != nil {
		return x.ReceivedUins
	}
	return nil
}

func (x *Message) GetSeenUins() []uint64 {
	if x != nil {
		return x.SeenUins
	}
	return nil
}

func (x *Message) GetDeletedUins() []uint64 {
	if x != nil {
		return x.DeletedUins
	}
	return nil
}

func (x *Message) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_MESSAGE_TYPE_TEXT
}

func (x *Message) GetAttachments() string {
	if x != nil {
		return x.Attachments
	}
	return ""
}

func (x *Message) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Message) GetGroupAvatar() string {
	if x != nil {
		return x.GroupAvatar
	}
	return ""
}

func (x *Message) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *Message) GetSenderAvatar() string {
	if x != nil {
		return x.SenderAvatar
	}
	return ""
}

func (x *Message) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_GROUP_TYPE_UNKNOWN
}

func (x *Message) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *Message) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Message) GetIsEncrypted() bool {
	if x != nil {
		return x.IsEncrypted
	}
	return false
}

func (x *Message) GetMentionedUins() []uint64 {
	if x != nil {
		return x.MentionedUins
	}
	return nil
}

func (x *Message) GetMentionedAll() bool {
	if x != nil {
		return x.MentionedAll
	}
	return false
}

func (x *Message) GetSeenInfos() []*SeenInfo {
	if x != nil {
		return x.SeenInfos
	}
	return nil
}

func (x *Message) GetReactions() []*ReactionItem {
	if x != nil {
		return x.Reactions
	}
	return nil
}

type CreateMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header        *Header     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId       uint64      `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Type          MessageType `protobuf:"varint,3,opt,name=type,proto3,enum=voicechat.MessageType" json:"type,omitempty"`
	Message       string      `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Attachments   string      `protobuf:"bytes,5,opt,name=attachments,proto3" json:"attachments,omitempty"`
	GroupName     string      `protobuf:"bytes,6,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	GroupAvatar   string      `protobuf:"bytes,7,opt,name=group_avatar,json=groupAvatar,proto3" json:"group_avatar,omitempty"`
	SenderName    string      `protobuf:"bytes,8,opt,name=sender_name,json=senderName,proto3" json:"sender_name,omitempty"`
	SenderAvatar  string      `protobuf:"bytes,9,opt,name=sender_avatar,json=senderAvatar,proto3" json:"sender_avatar,omitempty"`
	Nonce         string      `protobuf:"bytes,10,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Version       uint32      `protobuf:"varint,11,opt,name=version,proto3" json:"version,omitempty"`
	IsEncrypted   bool        `protobuf:"varint,12,opt,name=is_encrypted,json=isEncrypted,proto3" json:"is_encrypted,omitempty"`
	MentionedUins []uint64    `protobuf:"varint,13,rep,packed,name=mentioned_uins,json=mentionedUins,proto3" json:"mentioned_uins,omitempty"`
	MentionedAll  bool        `protobuf:"varint,14,opt,name=mentioned_all,json=mentionedAll,proto3" json:"mentioned_all,omitempty"`
}

func (x *CreateMessageReq) Reset() {
	*x = CreateMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMessageReq) ProtoMessage() {}

func (x *CreateMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMessageReq.ProtoReflect.Descriptor instead.
func (*CreateMessageReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{119}
}

func (x *CreateMessageReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateMessageReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CreateMessageReq) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_MESSAGE_TYPE_TEXT
}

func (x *CreateMessageReq) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateMessageReq) GetAttachments() string {
	if x != nil {
		return x.Attachments
	}
	return ""
}

func (x *CreateMessageReq) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *CreateMessageReq) GetGroupAvatar() string {
	if x != nil {
		return x.GroupAvatar
	}
	return ""
}

func (x *CreateMessageReq) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *CreateMessageReq) GetSenderAvatar() string {
	if x != nil {
		return x.SenderAvatar
	}
	return ""
}

func (x *CreateMessageReq) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *CreateMessageReq) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CreateMessageReq) GetIsEncrypted() bool {
	if x != nil {
		return x.IsEncrypted
	}
	return false
}

func (x *CreateMessageReq) GetMentionedUins() []uint64 {
	if x != nil {
		return x.MentionedUins
	}
	return nil
}

func (x *CreateMessageReq) GetMentionedAll() bool {
	if x != nil {
		return x.MentionedAll
	}
	return false
}

type CreateMessageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result  ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Message *Message  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateMessageResp) Reset() {
	*x = CreateMessageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMessageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMessageResp) ProtoMessage() {}

func (x *CreateMessageResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMessageResp.ProtoReflect.Descriptor instead.
func (*CreateMessageResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{120}
}

func (x *CreateMessageResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateMessageResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *CreateMessageResp) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type UpdateMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId   uint64        `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MessageId uint64        `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Status    MessageStatus `protobuf:"varint,4,opt,name=status,proto3,enum=voicechat.MessageStatus" json:"status,omitempty"`
	Message   string        `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"` //new text, only sender can update
}

func (x *UpdateMessageReq) Reset() {
	*x = UpdateMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMessageReq) ProtoMessage() {}

func (x *UpdateMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMessageReq.ProtoReflect.Descriptor instead.
func (*UpdateMessageReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{121}
}

func (x *UpdateMessageReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateMessageReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UpdateMessageReq) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *UpdateMessageReq) GetStatus() MessageStatus {
	if x != nil {
		return x.Status
	}
	return MessageStatus_MESSAGE_STATUS_UNKNOWN
}

func (x *UpdateMessageReq) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateMessageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result  ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Message *Message  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateMessageResp) Reset() {
	*x = UpdateMessageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMessageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMessageResp) ProtoMessage() {}

func (x *UpdateMessageResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMessageResp.ProtoReflect.Descriptor instead.
func (*UpdateMessageResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{122}
}

func (x *UpdateMessageResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UpdateMessageResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *UpdateMessageResp) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type DeleteMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId   uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MessageId uint64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	DeleteAll bool    `protobuf:"varint,4,opt,name=delete_all,json=deleteAll,proto3" json:"delete_all,omitempty"`
}

func (x *DeleteMessageReq) Reset() {
	*x = DeleteMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMessageReq) ProtoMessage() {}

func (x *DeleteMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMessageReq.ProtoReflect.Descriptor instead.
func (*DeleteMessageReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{123}
}

func (x *DeleteMessageReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteMessageReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *DeleteMessageReq) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *DeleteMessageReq) GetDeleteAll() bool {
	if x != nil {
		return x.DeleteAll
	}
	return false
}

type DeleteMessageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *DeleteMessageResp) Reset() {
	*x = DeleteMessageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMessageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMessageResp) ProtoMessage() {}

func (x *DeleteMessageResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMessageResp.ProtoReflect.Descriptor instead.
func (*DeleteMessageResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{124}
}

func (x *DeleteMessageResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteMessageResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

type ListMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header            *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId           uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	LastMessageId     uint64  `protobuf:"varint,3,opt,name=last_message_id,json=lastMessageId,proto3" json:"last_message_id,omitempty"`
	LastSeenMessageId uint64  `protobuf:"varint,6,opt,name=last_seen_message_id,json=lastSeenMessageId,proto3" json:"last_seen_message_id,omitempty"`
	Pindex            uint32  `protobuf:"varint,4,opt,name=pindex,proto3" json:"pindex,omitempty"`
	Psize             uint32  `protobuf:"varint,5,opt,name=psize,proto3" json:"psize,omitempty"`
}

func (x *ListMessageReq) Reset() {
	*x = ListMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessageReq) ProtoMessage() {}

func (x *ListMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessageReq.ProtoReflect.Descriptor instead.
func (*ListMessageReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{125}
}

func (x *ListMessageReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListMessageReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ListMessageReq) GetLastMessageId() uint64 {
	if x != nil {
		return x.LastMessageId
	}
	return 0
}

func (x *ListMessageReq) GetLastSeenMessageId() uint64 {
	if x != nil {
		return x.LastSeenMessageId
	}
	return 0
}

func (x *ListMessageReq) GetPindex() uint32 {
	if x != nil {
		return x.Pindex
	}
	return 0
}

func (x *ListMessageReq) GetPsize() uint32 {
	if x != nil {
		return x.Psize
	}
	return 0
}

type ListMessageResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header            *Header    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result            ErrorCode  `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	GroupId           uint64     `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	LastMessageId     uint64     `protobuf:"varint,4,opt,name=last_message_id,json=lastMessageId,proto3" json:"last_message_id,omitempty"`
	LastSeenMessageId uint64     `protobuf:"varint,8,opt,name=last_seen_message_id,json=lastSeenMessageId,proto3" json:"last_seen_message_id,omitempty"`
	Pindex            uint32     `protobuf:"varint,5,opt,name=pindex,proto3" json:"pindex,omitempty"`
	Psize             uint32     `protobuf:"varint,6,opt,name=psize,proto3" json:"psize,omitempty"`
	Messages          []*Message `protobuf:"bytes,7,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *ListMessageResp) Reset() {
	*x = ListMessageResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMessageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessageResp) ProtoMessage() {}

func (x *ListMessageResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessageResp.ProtoReflect.Descriptor instead.
func (*ListMessageResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{126}
}

func (x *ListMessageResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListMessageResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *ListMessageResp) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ListMessageResp) GetLastMessageId() uint64 {
	if x != nil {
		return x.LastMessageId
	}
	return 0
}

func (x *ListMessageResp) GetLastSeenMessageId() uint64 {
	if x != nil {
		return x.LastSeenMessageId
	}
	return 0
}

func (x *ListMessageResp) GetPindex() uint32 {
	if x != nil {
		return x.Pindex
	}
	return 0
}

func (x *ListMessageResp) GetPsize() uint32 {
	if x != nil {
		return x.Psize
	}
	return 0
}

func (x *ListMessageResp) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

type BroadcastMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header              `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupType GroupType            `protobuf:"varint,8,opt,name=group_type,json=groupType,proto3,enum=voicechat.GroupType" json:"group_type,omitempty"`
	GroupId   uint64               `protobuf:"varint,7,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Type      BroadcastMessageType `protobuf:"varint,2,opt,name=type,proto3,enum=voicechat.BroadcastMessageType" json:"type,omitempty"`
	Message   *Message             `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	//repeated uint64 recipient_uins = 4;
	RecipientInfos []*Header `protobuf:"bytes,4,rep,name=recipient_infos,json=recipientInfos,proto3" json:"recipient_infos,omitempty"`
	MutedUins      []uint64  `protobuf:"varint,5,rep,packed,name=muted_uins,json=mutedUins,proto3" json:"muted_uins,omitempty"`
	DeviceId       string    `protobuf:"bytes,6,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *BroadcastMessage) Reset() {
	*x = BroadcastMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastMessage) ProtoMessage() {}

func (x *BroadcastMessage) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastMessage.ProtoReflect.Descriptor instead.
func (*BroadcastMessage) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{127}
}

func (x *BroadcastMessage) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BroadcastMessage) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_GROUP_TYPE_UNKNOWN
}

func (x *BroadcastMessage) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *BroadcastMessage) GetType() BroadcastMessageType {
	if x != nil {
		return x.Type
	}
	return BroadcastMessageType_BROADCAST_MESSAGE_TYPE_NEW
}

func (x *BroadcastMessage) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *BroadcastMessage) GetRecipientInfos() []*Header {
	if x != nil {
		return x.RecipientInfos
	}
	return nil
}

func (x *BroadcastMessage) GetMutedUins() []uint64 {
	if x != nil {
		return x.MutedUins
	}
	return nil
}

func (x *BroadcastMessage) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type LiveLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId uint64             `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	GroupId   uint64             `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Status    LiveLocationStatus `protobuf:"varint,3,opt,name=status,proto3,enum=voicechat.LiveLocationStatus" json:"status,omitempty"`
	StartedAt uint64             `protobuf:"varint,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	UpdatedAt uint64             `protobuf:"varint,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	EndedAt   uint64             `protobuf:"varint,6,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	Duration  uint64             `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"` //seconds
	Latitude  string             `protobuf:"bytes,8,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude string             `protobuf:"bytes,9,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Altitude  string             `protobuf:"bytes,10,opt,name=altitude,proto3" json:"altitude,omitempty"`
	ImageUrl  string             `protobuf:"bytes,11,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Address   string             `protobuf:"bytes,12,opt,name=address,proto3" json:"address,omitempty"`
	Version   uint32             `protobuf:"varint,13,opt,name=version,proto3" json:"version,omitempty"`
	IsSos     bool               `protobuf:"varint,14,opt,name=is_sos,json=isSos,proto3" json:"is_sos,omitempty"`
}

func (x *LiveLocation) Reset() {
	*x = LiveLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveLocation) ProtoMessage() {}

func (x *LiveLocation) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveLocation.ProtoReflect.Descriptor instead.
func (*LiveLocation) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{128}
}

func (x *LiveLocation) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *LiveLocation) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *LiveLocation) GetStatus() LiveLocationStatus {
	if x != nil {
		return x.Status
	}
	return LiveLocationStatus_LIVE_LOCATION_STATUS_START
}

func (x *LiveLocation) GetStartedAt() uint64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *LiveLocation) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *LiveLocation) GetEndedAt() uint64 {
	if x != nil {
		return x.EndedAt
	}
	return 0
}

func (x *LiveLocation) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *LiveLocation) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *LiveLocation) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *LiveLocation) GetAltitude() string {
	if x != nil {
		return x.Altitude
	}
	return ""
}

func (x *LiveLocation) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *LiveLocation) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *LiveLocation) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *LiveLocation) GetIsSos() bool {
	if x != nil {
		return x.IsSos
	}
	return false
}

type LiveLocationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *Header            `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	MessageId  uint64             `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	GroupId    uint64             `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Status     LiveLocationStatus `protobuf:"varint,4,opt,name=status,proto3,enum=voicechat.LiveLocationStatus" json:"status,omitempty"`
	StartedAt  uint64             `protobuf:"varint,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	UpdatedAt  uint64             `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	EndedAt    uint64             `protobuf:"varint,7,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	Duration   uint64             `protobuf:"varint,8,opt,name=duration,proto3" json:"duration,omitempty"` //seconds
	Latitude   string             `protobuf:"bytes,9,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude  string             `protobuf:"bytes,10,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Altitude   string             `protobuf:"bytes,11,opt,name=altitude,proto3" json:"altitude,omitempty"`
	ImageUrl   string             `protobuf:"bytes,12,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	Address    string             `protobuf:"bytes,13,opt,name=address,proto3" json:"address,omitempty"`
	Version    uint32             `protobuf:"varint,14,opt,name=version,proto3" json:"version,omitempty"`
	RequestUin uint64             `protobuf:"varint,15,opt,name=request_uin,json=requestUin,proto3" json:"request_uin,omitempty"`
	IsSos      bool               `protobuf:"varint,16,opt,name=is_sos,json=isSos,proto3" json:"is_sos,omitempty"`
}

func (x *LiveLocationReq) Reset() {
	*x = LiveLocationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveLocationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveLocationReq) ProtoMessage() {}

func (x *LiveLocationReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveLocationReq.ProtoReflect.Descriptor instead.
func (*LiveLocationReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{129}
}

func (x *LiveLocationReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LiveLocationReq) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *LiveLocationReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *LiveLocationReq) GetStatus() LiveLocationStatus {
	if x != nil {
		return x.Status
	}
	return LiveLocationStatus_LIVE_LOCATION_STATUS_START
}

func (x *LiveLocationReq) GetStartedAt() uint64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *LiveLocationReq) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *LiveLocationReq) GetEndedAt() uint64 {
	if x != nil {
		return x.EndedAt
	}
	return 0
}

func (x *LiveLocationReq) GetDuration() uint64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *LiveLocationReq) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

func (x *LiveLocationReq) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *LiveLocationReq) GetAltitude() string {
	if x != nil {
		return x.Altitude
	}
	return ""
}

func (x *LiveLocationReq) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *LiveLocationReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *LiveLocationReq) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *LiveLocationReq) GetRequestUin() uint64 {
	if x != nil {
		return x.RequestUin
	}
	return 0
}

func (x *LiveLocationReq) GetIsSos() bool {
	if x != nil {
		return x.IsSos
	}
	return false
}

type LiveLocationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result  ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Errmsg  string    `protobuf:"bytes,3,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	Message *Message  `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LiveLocationResp) Reset() {
	*x = LiveLocationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveLocationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveLocationResp) ProtoMessage() {}

func (x *LiveLocationResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveLocationResp.ProtoReflect.Descriptor instead.
func (*LiveLocationResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{130}
}

func (x *LiveLocationResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LiveLocationResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *LiveLocationResp) GetErrmsg() string {
	if x != nil {
		return x.Errmsg
	}
	return ""
}

func (x *LiveLocationResp) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type MultiLiveLocationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header        *Header         `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	LiveLocations []*LiveLocation `protobuf:"bytes,2,rep,name=live_locations,json=liveLocations,proto3" json:"live_locations,omitempty"`
}

func (x *MultiLiveLocationReq) Reset() {
	*x = MultiLiveLocationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiLiveLocationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiLiveLocationReq) ProtoMessage() {}

func (x *MultiLiveLocationReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiLiveLocationReq.ProtoReflect.Descriptor instead.
func (*MultiLiveLocationReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{131}
}

func (x *MultiLiveLocationReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MultiLiveLocationReq) GetLiveLocations() []*LiveLocation {
	if x != nil {
		return x.LiveLocations
	}
	return nil
}

type MultiLiveLocationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Errmsg string    `protobuf:"bytes,3,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
}

func (x *MultiLiveLocationResp) Reset() {
	*x = MultiLiveLocationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiLiveLocationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiLiveLocationResp) ProtoMessage() {}

func (x *MultiLiveLocationResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiLiveLocationResp.ProtoReflect.Descriptor instead.
func (*MultiLiveLocationResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{132}
}

func (x *MultiLiveLocationResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MultiLiveLocationResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *MultiLiveLocationResp) GetErrmsg() string {
	if x != nil {
		return x.Errmsg
	}
	return ""
}

type FCMInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uin       int64             `protobuf:"varint,1,opt,name=uin,proto3" json:"uin,omitempty"`
	Type      TokenPlatformType `protobuf:"varint,2,opt,name=type,proto3,enum=voicechat.TokenPlatformType" json:"type,omitempty"`
	Token     string            `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	CreatedAt int64             `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *FCMInfo) Reset() {
	*x = FCMInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FCMInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FCMInfo) ProtoMessage() {}

func (x *FCMInfo) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FCMInfo.ProtoReflect.Descriptor instead.
func (*FCMInfo) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{133}
}

func (x *FCMInfo) GetUin() int64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *FCMInfo) GetType() TokenPlatformType {
	if x != nil {
		return x.Type
	}
	return TokenPlatformType_TOKEN_PLATFORM_UNKNOWN
}

func (x *FCMInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *FCMInfo) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type GetTokensReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header        *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	SenderName    string   `protobuf:"bytes,2,opt,name=sender_name,json=senderName,proto3" json:"sender_name,omitempty"`
	RecipientUins []uint64 `protobuf:"varint,3,rep,packed,name=recipient_uins,json=recipientUins,proto3" json:"recipient_uins,omitempty"`
	// Types that are assignable to Msg:
	//	*GetTokensReq_Message
	//	*GetTokensReq_StartCall
	//	*GetTokensReq_Registration
	Msg isGetTokensReq_Msg `protobuf_oneof:"msg"`
}

func (x *GetTokensReq) Reset() {
	*x = GetTokensReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokensReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokensReq) ProtoMessage() {}

func (x *GetTokensReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokensReq.ProtoReflect.Descriptor instead.
func (*GetTokensReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{134}
}

func (x *GetTokensReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetTokensReq) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *GetTokensReq) GetRecipientUins() []uint64 {
	if x != nil {
		return x.RecipientUins
	}
	return nil
}

func (m *GetTokensReq) GetMsg() isGetTokensReq_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *GetTokensReq) GetMessage() *Message {
	if x, ok := x.GetMsg().(*GetTokensReq_Message); ok {
		return x.Message
	}
	return nil
}

func (x *GetTokensReq) GetStartCall() *StartCall {
	if x, ok := x.GetMsg().(*GetTokensReq_StartCall); ok {
		return x.StartCall
	}
	return nil
}

func (x *GetTokensReq) GetRegistration() *NewRegistration {
	if x, ok := x.GetMsg().(*GetTokensReq_Registration); ok {
		return x.Registration
	}
	return nil
}

type isGetTokensReq_Msg interface {
	isGetTokensReq_Msg()
}

type GetTokensReq_Message struct {
	Message *Message `protobuf:"bytes,4,opt,name=message,proto3,oneof"`
}

type GetTokensReq_StartCall struct {
	StartCall *StartCall `protobuf:"bytes,5,opt,name=start_call,json=startCall,proto3,oneof"`
}

type GetTokensReq_Registration struct {
	Registration *NewRegistration `protobuf:"bytes,6,opt,name=registration,proto3,oneof"`
}

func (*GetTokensReq_Message) isGetTokensReq_Msg() {}

func (*GetTokensReq_StartCall) isGetTokensReq_Msg() {}

func (*GetTokensReq_Registration) isGetTokensReq_Msg() {}

type GetTokensResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *Header    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result     ErrorCode  `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	SenderName string     `protobuf:"bytes,3,opt,name=sender_name,json=senderName,proto3" json:"sender_name,omitempty"`
	Recipients []*FCMInfo `protobuf:"bytes,4,rep,name=recipients,proto3" json:"recipients,omitempty"`
	// Types that are assignable to Msg:
	//	*GetTokensResp_Message
	//	*GetTokensResp_StartCall
	//	*GetTokensResp_Registration
	Msg isGetTokensResp_Msg `protobuf_oneof:"msg"`
}

func (x *GetTokensResp) Reset() {
	*x = GetTokensResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokensResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokensResp) ProtoMessage() {}

func (x *GetTokensResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokensResp.ProtoReflect.Descriptor instead.
func (*GetTokensResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{135}
}

func (x *GetTokensResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetTokensResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *GetTokensResp) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *GetTokensResp) GetRecipients() []*FCMInfo {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (m *GetTokensResp) GetMsg() isGetTokensResp_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *GetTokensResp) GetMessage() *Message {
	if x, ok := x.GetMsg().(*GetTokensResp_Message); ok {
		return x.Message
	}
	return nil
}

func (x *GetTokensResp) GetStartCall() *StartCall {
	if x, ok := x.GetMsg().(*GetTokensResp_StartCall); ok {
		return x.StartCall
	}
	return nil
}

func (x *GetTokensResp) GetRegistration() *NewRegistration {
	if x, ok := x.GetMsg().(*GetTokensResp_Registration); ok {
		return x.Registration
	}
	return nil
}

type isGetTokensResp_Msg interface {
	isGetTokensResp_Msg()
}

type GetTokensResp_Message struct {
	Message *Message `protobuf:"bytes,5,opt,name=message,proto3,oneof"`
}

type GetTokensResp_StartCall struct {
	StartCall *StartCall `protobuf:"bytes,6,opt,name=start_call,json=startCall,proto3,oneof"`
}

type GetTokensResp_Registration struct {
	Registration *NewRegistration `protobuf:"bytes,7,opt,name=registration,proto3,oneof"`
}

func (*GetTokensResp_Message) isGetTokensResp_Msg() {}

func (*GetTokensResp_StartCall) isGetTokensResp_Msg() {}

func (*GetTokensResp_Registration) isGetTokensResp_Msg() {}

type NotificationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *Header    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	SenderName string     `protobuf:"bytes,2,opt,name=sender_name,json=senderName,proto3" json:"sender_name,omitempty"`
	Recipients []*FCMInfo `protobuf:"bytes,3,rep,name=recipients,proto3" json:"recipients,omitempty"`
	// Types that are assignable to Notification:
	//	*NotificationMessage_Message
	//	*NotificationMessage_StartCall
	//	*NotificationMessage_Registration
	//	*NotificationMessage_CreateGroupcall
	//	*NotificationMessage_InviteGroupcall
	//	*NotificationMessage_Reaction
	Notification   isNotificationMessage_Notification `protobuf_oneof:"notification"`
	IgnoredDevices []string                           `protobuf:"bytes,7,rep,name=ignored_devices,json=ignoredDevices,proto3" json:"ignored_devices,omitempty"`
}

func (x *NotificationMessage) Reset() {
	*x = NotificationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotificationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotificationMessage) ProtoMessage() {}

func (x *NotificationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotificationMessage.ProtoReflect.Descriptor instead.
func (*NotificationMessage) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{136}
}

func (x *NotificationMessage) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *NotificationMessage) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *NotificationMessage) GetRecipients() []*FCMInfo {
	if x != nil {
		return x.Recipients
	}
	return nil
}

func (m *NotificationMessage) GetNotification() isNotificationMessage_Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

func (x *NotificationMessage) GetMessage() *Message {
	if x, ok := x.GetNotification().(*NotificationMessage_Message); ok {
		return x.Message
	}
	return nil
}

func (x *NotificationMessage) GetStartCall() *StartCall {
	if x, ok := x.GetNotification().(*NotificationMessage_StartCall); ok {
		return x.StartCall
	}
	return nil
}

func (x *NotificationMessage) GetRegistration() *NewRegistration {
	if x, ok := x.GetNotification().(*NotificationMessage_Registration); ok {
		return x.Registration
	}
	return nil
}

func (x *NotificationMessage) GetCreateGroupcall() *GroupCall {
	if x, ok := x.GetNotification().(*NotificationMessage_CreateGroupcall); ok {
		return x.CreateGroupcall
	}
	return nil
}

func (x *NotificationMessage) GetInviteGroupcall() *InviteGroupCall {
	if x, ok := x.GetNotification().(*NotificationMessage_InviteGroupcall); ok {
		return x.InviteGroupcall
	}
	return nil
}

func (x *NotificationMessage) GetReaction() *BroadcastReactionItem {
	if x, ok := x.GetNotification().(*NotificationMessage_Reaction); ok {
		return x.Reaction
	}
	return nil
}

func (x *NotificationMessage) GetIgnoredDevices() []string {
	if x != nil {
		return x.IgnoredDevices
	}
	return nil
}

type isNotificationMessage_Notification interface {
	isNotificationMessage_Notification()
}

type NotificationMessage_Message struct {
	Message *Message `protobuf:"bytes,4,opt,name=message,proto3,oneof"`
}

type NotificationMessage_StartCall struct {
	StartCall *StartCall `protobuf:"bytes,5,opt,name=start_call,json=startCall,proto3,oneof"`
}

type NotificationMessage_Registration struct {
	Registration *NewRegistration `protobuf:"bytes,6,opt,name=registration,proto3,oneof"`
}

type NotificationMessage_CreateGroupcall struct {
	CreateGroupcall *GroupCall `protobuf:"bytes,8,opt,name=create_groupcall,json=createGroupcall,proto3,oneof"`
}

type NotificationMessage_InviteGroupcall struct {
	InviteGroupcall *InviteGroupCall `protobuf:"bytes,9,opt,name=invite_groupcall,json=inviteGroupcall,proto3,oneof"`
}

type NotificationMessage_Reaction struct {
	Reaction *BroadcastReactionItem `protobuf:"bytes,10,opt,name=reaction,proto3,oneof"`
}

func (*NotificationMessage_Message) isNotificationMessage_Notification() {}

func (*NotificationMessage_StartCall) isNotificationMessage_Notification() {}

func (*NotificationMessage_Registration) isNotificationMessage_Notification() {}

func (*NotificationMessage_CreateGroupcall) isNotificationMessage_Notification() {}

func (*NotificationMessage_InviteGroupcall) isNotificationMessage_Notification() {}

func (*NotificationMessage_Reaction) isNotificationMessage_Notification() {}

type DeviceNotificationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header   *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Uin      uint64  `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	DeviceId string  `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// Types that are assignable to Notification:
	//	*DeviceNotificationMessage_Message
	//	*DeviceNotificationMessage_StartSecretChat
	//	*DeviceNotificationMessage_AcceptSecretChat
	//	*DeviceNotificationMessage_DeleteSecretChat
	Notification isDeviceNotificationMessage_Notification `protobuf_oneof:"notification"`
}

func (x *DeviceNotificationMessage) Reset() {
	*x = DeviceNotificationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceNotificationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceNotificationMessage) ProtoMessage() {}

func (x *DeviceNotificationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceNotificationMessage.ProtoReflect.Descriptor instead.
func (*DeviceNotificationMessage) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{137}
}

func (x *DeviceNotificationMessage) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeviceNotificationMessage) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *DeviceNotificationMessage) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (m *DeviceNotificationMessage) GetNotification() isDeviceNotificationMessage_Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

func (x *DeviceNotificationMessage) GetMessage() *Message {
	if x, ok := x.GetNotification().(*DeviceNotificationMessage_Message); ok {
		return x.Message
	}
	return nil
}

func (x *DeviceNotificationMessage) GetStartSecretChat() *StartSecretChat {
	if x, ok := x.GetNotification().(*DeviceNotificationMessage_StartSecretChat); ok {
		return x.StartSecretChat
	}
	return nil
}

func (x *DeviceNotificationMessage) GetAcceptSecretChat() *AcceptSecretChat {
	if x, ok := x.GetNotification().(*DeviceNotificationMessage_AcceptSecretChat); ok {
		return x.AcceptSecretChat
	}
	return nil
}

func (x *DeviceNotificationMessage) GetDeleteSecretChat() *DeleteSecretChat {
	if x, ok := x.GetNotification().(*DeviceNotificationMessage_DeleteSecretChat); ok {
		return x.DeleteSecretChat
	}
	return nil
}

type isDeviceNotificationMessage_Notification interface {
	isDeviceNotificationMessage_Notification()
}

type DeviceNotificationMessage_Message struct {
	Message *Message `protobuf:"bytes,4,opt,name=message,proto3,oneof"`
}

type DeviceNotificationMessage_StartSecretChat struct {
	StartSecretChat *StartSecretChat `protobuf:"bytes,5,opt,name=start_secret_chat,json=startSecretChat,proto3,oneof"`
}

type DeviceNotificationMessage_AcceptSecretChat struct {
	AcceptSecretChat *AcceptSecretChat `protobuf:"bytes,6,opt,name=accept_secret_chat,json=acceptSecretChat,proto3,oneof"`
}

type DeviceNotificationMessage_DeleteSecretChat struct {
	DeleteSecretChat *DeleteSecretChat `protobuf:"bytes,7,opt,name=delete_secret_chat,json=deleteSecretChat,proto3,oneof"`
}

func (*DeviceNotificationMessage_Message) isDeviceNotificationMessage_Notification() {}

func (*DeviceNotificationMessage_StartSecretChat) isDeviceNotificationMessage_Notification() {}

func (*DeviceNotificationMessage_AcceptSecretChat) isDeviceNotificationMessage_Notification() {}

func (*DeviceNotificationMessage_DeleteSecretChat) isDeviceNotificationMessage_Notification() {}

type LoginNotificationMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header   *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Name     string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Uin      uint64  `protobuf:"varint,3,opt,name=uin,proto3" json:"uin,omitempty"`
	Message  string  `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	DeviceId string  `protobuf:"bytes,5,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *LoginNotificationMessage) Reset() {
	*x = LoginNotificationMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginNotificationMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginNotificationMessage) ProtoMessage() {}

func (x *LoginNotificationMessage) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginNotificationMessage.ProtoReflect.Descriptor instead.
func (*LoginNotificationMessage) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{138}
}

func (x *LoginNotificationMessage) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LoginNotificationMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoginNotificationMessage) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *LoginNotificationMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *LoginNotificationMessage) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type Call struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallId        uint64         `protobuf:"varint,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	GroupId       uint64         `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	CallType      CallType       `protobuf:"varint,3,opt,name=call_type,json=callType,proto3,enum=voicechat.CallType" json:"call_type,omitempty"`
	MediaType     MediaType      `protobuf:"varint,4,opt,name=media_type,json=mediaType,proto3,enum=voicechat.MediaType" json:"media_type,omitempty"`
	CallStatus    CallStatus     `protobuf:"varint,5,opt,name=call_status,json=callStatus,proto3,enum=voicechat.CallStatus" json:"call_status,omitempty"`
	StreamType    CallStreamType `protobuf:"varint,19,opt,name=stream_type,json=streamType,proto3,enum=voicechat.CallStreamType" json:"stream_type,omitempty"`
	CallerUin     uint64         `protobuf:"varint,6,opt,name=caller_uin,json=callerUin,proto3" json:"caller_uin,omitempty"`
	CalleeUins    []uint64       `protobuf:"varint,7,rep,packed,name=callee_uins,json=calleeUins,proto3" json:"callee_uins,omitempty"`
	AcceptedUins  []uint64       `protobuf:"varint,8,rep,packed,name=accepted_uins,json=acceptedUins,proto3" json:"accepted_uins,omitempty"`
	ConnectedUins []uint64       `protobuf:"varint,18,rep,packed,name=connected_uins,json=connectedUins,proto3" json:"connected_uins,omitempty"`
	StartedAt     uint64         `protobuf:"varint,9,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	StoppedAt     uint64         `protobuf:"varint,10,opt,name=stopped_at,json=stoppedAt,proto3" json:"stopped_at,omitempty"`
	AcceptedAt    uint64         `protobuf:"varint,16,opt,name=accepted_at,json=acceptedAt,proto3" json:"accepted_at,omitempty"`
	ConnectedAt   uint64         `protobuf:"varint,17,opt,name=connected_at,json=connectedAt,proto3" json:"connected_at,omitempty"`
	GroupName     string         `protobuf:"bytes,11,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	GroupAvatar   string         `protobuf:"bytes,12,opt,name=group_avatar,json=groupAvatar,proto3" json:"group_avatar,omitempty"`
	GroupType     GroupType      `protobuf:"varint,13,opt,name=group_type,json=groupType,proto3,enum=voicechat.GroupType" json:"group_type,omitempty"`
	SenderName    string         `protobuf:"bytes,14,opt,name=sender_name,json=senderName,proto3" json:"sender_name,omitempty"`
	SenderAvatar  string         `protobuf:"bytes,15,opt,name=sender_avatar,json=senderAvatar,proto3" json:"sender_avatar,omitempty"`
}

func (x *Call) Reset() {
	*x = Call{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call) ProtoMessage() {}

func (x *Call) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call.ProtoReflect.Descriptor instead.
func (*Call) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{139}
}

func (x *Call) GetCallId() uint64 {
	if x != nil {
		return x.CallId
	}
	return 0
}

func (x *Call) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *Call) GetCallType() CallType {
	if x != nil {
		return x.CallType
	}
	return CallType_CALL_TYPE_UNKNOWN
}

func (x *Call) GetMediaType() MediaType {
	if x != nil {
		return x.MediaType
	}
	return MediaType_MEDIA_TYPE_UNKNOWN
}

func (x *Call) GetCallStatus() CallStatus {
	if x != nil {
		return x.CallStatus
	}
	return CallStatus_CALL_STATUS_UNKNOWN
}

func (x *Call) GetStreamType() CallStreamType {
	if x != nil {
		return x.StreamType
	}
	return CallStreamType_CALL_STREAM_TYPE_UNKNOWN
}

func (x *Call) GetCallerUin() uint64 {
	if x != nil {
		return x.CallerUin
	}
	return 0
}

func (x *Call) GetCalleeUins() []uint64 {
	if x != nil {
		return x.CalleeUins
	}
	return nil
}

func (x *Call) GetAcceptedUins() []uint64 {
	if x != nil {
		return x.AcceptedUins
	}
	return nil
}

func (x *Call) GetConnectedUins() []uint64 {
	if x != nil {
		return x.ConnectedUins
	}
	return nil
}

func (x *Call) GetStartedAt() uint64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *Call) GetStoppedAt() uint64 {
	if x != nil {
		return x.StoppedAt
	}
	return 0
}

func (x *Call) GetAcceptedAt() uint64 {
	if x != nil {
		return x.AcceptedAt
	}
	return 0
}

func (x *Call) GetConnectedAt() uint64 {
	if x != nil {
		return x.ConnectedAt
	}
	return 0
}

func (x *Call) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Call) GetGroupAvatar() string {
	if x != nil {
		return x.GroupAvatar
	}
	return ""
}

func (x *Call) GetGroupType() GroupType {
	if x != nil {
		return x.GroupType
	}
	return GroupType_GROUP_TYPE_UNKNOWN
}

func (x *Call) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *Call) GetSenderAvatar() string {
	if x != nil {
		return x.SenderAvatar
	}
	return ""
}

type CreateCallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CALL_REQ_CREATE = 0x0301;
	Header       *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	CallType     CallType  `protobuf:"varint,2,opt,name=call_type,json=callType,proto3,enum=voicechat.CallType" json:"call_type,omitempty"`
	MediaType    MediaType `protobuf:"varint,3,opt,name=media_type,json=mediaType,proto3,enum=voicechat.MediaType" json:"media_type,omitempty"`
	GroupId      uint64    `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	CallerUin    uint64    `protobuf:"varint,5,opt,name=caller_uin,json=callerUin,proto3" json:"caller_uin,omitempty"`
	CalleeUins   []uint64  `protobuf:"varint,6,rep,packed,name=callee_uins,json=calleeUins,proto3" json:"callee_uins,omitempty"`
	GroupName    string    `protobuf:"bytes,7,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	GroupAvatar  string    `protobuf:"bytes,8,opt,name=group_avatar,json=groupAvatar,proto3" json:"group_avatar,omitempty"`
	SenderName   string    `protobuf:"bytes,9,opt,name=sender_name,json=senderName,proto3" json:"sender_name,omitempty"`
	SenderAvatar string    `protobuf:"bytes,10,opt,name=sender_avatar,json=senderAvatar,proto3" json:"sender_avatar,omitempty"`
}

func (x *CreateCallReq) Reset() {
	*x = CreateCallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCallReq) ProtoMessage() {}

func (x *CreateCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCallReq.ProtoReflect.Descriptor instead.
func (*CreateCallReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{140}
}

func (x *CreateCallReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateCallReq) GetCallType() CallType {
	if x != nil {
		return x.CallType
	}
	return CallType_CALL_TYPE_UNKNOWN
}

func (x *CreateCallReq) GetMediaType() MediaType {
	if x != nil {
		return x.MediaType
	}
	return MediaType_MEDIA_TYPE_UNKNOWN
}

func (x *CreateCallReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CreateCallReq) GetCallerUin() uint64 {
	if x != nil {
		return x.CallerUin
	}
	return 0
}

func (x *CreateCallReq) GetCalleeUins() []uint64 {
	if x != nil {
		return x.CalleeUins
	}
	return nil
}

func (x *CreateCallReq) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *CreateCallReq) GetGroupAvatar() string {
	if x != nil {
		return x.GroupAvatar
	}
	return ""
}

func (x *CreateCallReq) GetSenderName() string {
	if x != nil {
		return x.SenderName
	}
	return ""
}

func (x *CreateCallReq) GetSenderAvatar() string {
	if x != nil {
		return x.SenderAvatar
	}
	return ""
}

type CreateCallResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CALL_RSP_CREATE = 0x0301;
	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Call   *Call     `protobuf:"bytes,3,opt,name=call,proto3" json:"call,omitempty"`
}

func (x *CreateCallResp) Reset() {
	*x = CreateCallResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCallResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCallResp) ProtoMessage() {}

func (x *CreateCallResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCallResp.ProtoReflect.Descriptor instead.
func (*CreateCallResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{141}
}

func (x *CreateCallResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateCallResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *CreateCallResp) GetCall() *Call {
	if x != nil {
		return x.Call
	}
	return nil
}

type CallCache struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeUpdate TypeUpdate `protobuf:"varint,1,opt,name=type_update,json=typeUpdate,proto3,enum=voicechat.TypeUpdate" json:"type_update,omitempty"`
	SenderUin  uint64     `protobuf:"varint,2,opt,name=sender_uin,json=senderUin,proto3" json:"sender_uin,omitempty"`
	Call       *Call      `protobuf:"bytes,3,opt,name=call,proto3" json:"call,omitempty"`
}

func (x *CallCache) Reset() {
	*x = CallCache{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallCache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallCache) ProtoMessage() {}

func (x *CallCache) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallCache.ProtoReflect.Descriptor instead.
func (*CallCache) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{142}
}

func (x *CallCache) GetTypeUpdate() TypeUpdate {
	if x != nil {
		return x.TypeUpdate
	}
	return TypeUpdate_TYPECALLUPDATE_NORMAL
}

func (x *CallCache) GetSenderUin() uint64 {
	if x != nil {
		return x.SenderUin
	}
	return 0
}

func (x *CallCache) GetCall() *Call {
	if x != nil {
		return x.Call
	}
	return nil
}

type StartCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CALL_START = 0x0302;
	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Call    *Call   `protobuf:"bytes,2,opt,name=call,proto3" json:"call,omitempty"`
	GroupId uint64  `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *StartCall) Reset() {
	*x = StartCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartCall) ProtoMessage() {}

func (x *StartCall) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartCall.ProtoReflect.Descriptor instead.
func (*StartCall) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{143}
}

func (x *StartCall) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StartCall) GetCall() *Call {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *StartCall) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type AnswerCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CALL_ANSWER   = 0x0303;
	Header    *Header    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Answer    CallAnswer `protobuf:"varint,2,opt,name=answer,proto3,enum=voicechat.CallAnswer" json:"answer,omitempty"`
	CallId    uint64     `protobuf:"varint,3,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	CalleeUin uint64     `protobuf:"varint,4,opt,name=callee_uin,json=calleeUin,proto3" json:"callee_uin,omitempty"`
	GroupId   uint64     `protobuf:"varint,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *AnswerCall) Reset() {
	*x = AnswerCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerCall) ProtoMessage() {}

func (x *AnswerCall) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerCall.ProtoReflect.Descriptor instead.
func (*AnswerCall) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{144}
}

func (x *AnswerCall) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AnswerCall) GetAnswer() CallAnswer {
	if x != nil {
		return x.Answer
	}
	return CallAnswer_CALL_ANSWER_UNKNOWN
}

func (x *AnswerCall) GetCallId() uint64 {
	if x != nil {
		return x.CallId
	}
	return 0
}

func (x *AnswerCall) GetCalleeUin() uint64 {
	if x != nil {
		return x.CalleeUin
	}
	return 0
}

func (x *AnswerCall) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type StopCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CALL_STOP_ = 0x0304;
	Header    *Header      `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	CallId    uint64       `protobuf:"varint,2,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	Uin       uint64       `protobuf:"varint,3,opt,name=uin,proto3" json:"uin,omitempty"`
	GroupId   uint64       `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	CallerUin uint64       `protobuf:"varint,5,opt,name=caller_uin,json=callerUin,proto3" json:"caller_uin,omitempty"`
	Type      StopCallType `protobuf:"varint,6,opt,name=type,proto3,enum=voicechat.StopCallType" json:"type,omitempty"`
}

func (x *StopCall) Reset() {
	*x = StopCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCall) ProtoMessage() {}

func (x *StopCall) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCall.ProtoReflect.Descriptor instead.
func (*StopCall) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{145}
}

func (x *StopCall) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StopCall) GetCallId() uint64 {
	if x != nil {
		return x.CallId
	}
	return 0
}

func (x *StopCall) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *StopCall) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *StopCall) GetCallerUin() uint64 {
	if x != nil {
		return x.CallerUin
	}
	return 0
}

func (x *StopCall) GetType() StopCallType {
	if x != nil {
		return x.Type
	}
	return StopCallType_STOPCALL_TYPE_UNKNOWN
}

type CallIceSdp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CALL_ICE_SDP       = 0x0305;
	Header      *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	CallId      uint64  `protobuf:"varint,2,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	SenderUin   uint64  `protobuf:"varint,3,opt,name=sender_uin,json=senderUin,proto3" json:"sender_uin,omitempty"`
	ReceiverUin uint64  `protobuf:"varint,4,opt,name=receiver_uin,json=receiverUin,proto3" json:"receiver_uin,omitempty"`
	Type        SdpType `protobuf:"varint,5,opt,name=type,proto3,enum=voicechat.SdpType" json:"type,omitempty"`
	Sdp         string  `protobuf:"bytes,6,opt,name=sdp,proto3" json:"sdp,omitempty"`
	GroupId     uint64  `protobuf:"varint,7,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *CallIceSdp) Reset() {
	*x = CallIceSdp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallIceSdp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallIceSdp) ProtoMessage() {}

func (x *CallIceSdp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallIceSdp.ProtoReflect.Descriptor instead.
func (*CallIceSdp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{146}
}

func (x *CallIceSdp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CallIceSdp) GetCallId() uint64 {
	if x != nil {
		return x.CallId
	}
	return 0
}

func (x *CallIceSdp) GetSenderUin() uint64 {
	if x != nil {
		return x.SenderUin
	}
	return 0
}

func (x *CallIceSdp) GetReceiverUin() uint64 {
	if x != nil {
		return x.ReceiverUin
	}
	return 0
}

func (x *CallIceSdp) GetType() SdpType {
	if x != nil {
		return x.Type
	}
	return SdpType_SDP_TYPE_UNKNOWN
}

func (x *CallIceSdp) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

func (x *CallIceSdp) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type CallIceCandidate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CALL_ICE_CANDIDATE = 0x0306;
	Header        *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	CallId        uint64  `protobuf:"varint,2,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	SenderUin     uint64  `protobuf:"varint,3,opt,name=sender_uin,json=senderUin,proto3" json:"sender_uin,omitempty"`
	ReceiverUin   uint64  `protobuf:"varint,4,opt,name=receiver_uin,json=receiverUin,proto3" json:"receiver_uin,omitempty"`
	Candidate     string  `protobuf:"bytes,5,opt,name=candidate,proto3" json:"candidate,omitempty"`
	SdpMid        string  `protobuf:"bytes,6,opt,name=sdp_mid,json=sdpMid,proto3" json:"sdp_mid,omitempty"`
	SdpMlineIndex int32   `protobuf:"varint,7,opt,name=sdp_mline_index,json=sdpMlineIndex,proto3" json:"sdp_mline_index,omitempty"`
	GroupId       uint64  `protobuf:"varint,8,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *CallIceCandidate) Reset() {
	*x = CallIceCandidate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallIceCandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallIceCandidate) ProtoMessage() {}

func (x *CallIceCandidate) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallIceCandidate.ProtoReflect.Descriptor instead.
func (*CallIceCandidate) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{147}
}

func (x *CallIceCandidate) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CallIceCandidate) GetCallId() uint64 {
	if x != nil {
		return x.CallId
	}
	return 0
}

func (x *CallIceCandidate) GetSenderUin() uint64 {
	if x != nil {
		return x.SenderUin
	}
	return 0
}

func (x *CallIceCandidate) GetReceiverUin() uint64 {
	if x != nil {
		return x.ReceiverUin
	}
	return 0
}

func (x *CallIceCandidate) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

func (x *CallIceCandidate) GetSdpMid() string {
	if x != nil {
		return x.SdpMid
	}
	return ""
}

func (x *CallIceCandidate) GetSdpMlineIndex() int32 {
	if x != nil {
		return x.SdpMlineIndex
	}
	return 0
}

func (x *CallIceCandidate) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type BroadcastCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CALL_BROADCAST = 0x0307;
	Header        *Header  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RecipientUins []uint64 `protobuf:"varint,2,rep,packed,name=recipient_uins,json=recipientUins,proto3" json:"recipient_uins,omitempty"`
	// Types that are assignable to Call:
	//	*BroadcastCall_Start
	//	*BroadcastCall_Answer
	//	*BroadcastCall_Stop
	//	*BroadcastCall_Sdp
	//	*BroadcastCall_Candidate
	Call isBroadcastCall_Call `protobuf_oneof:"call"`
}

func (x *BroadcastCall) Reset() {
	*x = BroadcastCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastCall) ProtoMessage() {}

func (x *BroadcastCall) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastCall.ProtoReflect.Descriptor instead.
func (*BroadcastCall) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{148}
}

func (x *BroadcastCall) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BroadcastCall) GetRecipientUins() []uint64 {
	if x != nil {
		return x.RecipientUins
	}
	return nil
}

func (m *BroadcastCall) GetCall() isBroadcastCall_Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (x *BroadcastCall) GetStart() *StartCall {
	if x, ok := x.GetCall().(*BroadcastCall_Start); ok {
		return x.Start
	}
	return nil
}

func (x *BroadcastCall) GetAnswer() *AnswerCall {
	if x, ok := x.GetCall().(*BroadcastCall_Answer); ok {
		return x.Answer
	}
	return nil
}

func (x *BroadcastCall) GetStop() *StopCall {
	if x, ok := x.GetCall().(*BroadcastCall_Stop); ok {
		return x.Stop
	}
	return nil
}

func (x *BroadcastCall) GetSdp() *CallIceSdp {
	if x, ok := x.GetCall().(*BroadcastCall_Sdp); ok {
		return x.Sdp
	}
	return nil
}

func (x *BroadcastCall) GetCandidate() *CallIceCandidate {
	if x, ok := x.GetCall().(*BroadcastCall_Candidate); ok {
		return x.Candidate
	}
	return nil
}

type isBroadcastCall_Call interface {
	isBroadcastCall_Call()
}

type BroadcastCall_Start struct {
	Start *StartCall `protobuf:"bytes,3,opt,name=start,proto3,oneof"`
}

type BroadcastCall_Answer struct {
	Answer *AnswerCall `protobuf:"bytes,4,opt,name=answer,proto3,oneof"`
}

type BroadcastCall_Stop struct {
	Stop *StopCall `protobuf:"bytes,5,opt,name=stop,proto3,oneof"`
}

type BroadcastCall_Sdp struct {
	Sdp *CallIceSdp `protobuf:"bytes,6,opt,name=sdp,proto3,oneof"`
}

type BroadcastCall_Candidate struct {
	Candidate *CallIceCandidate `protobuf:"bytes,7,opt,name=candidate,proto3,oneof"`
}

func (*BroadcastCall_Start) isBroadcastCall_Call() {}

func (*BroadcastCall_Answer) isBroadcastCall_Call() {}

func (*BroadcastCall_Stop) isBroadcastCall_Call() {}

func (*BroadcastCall_Sdp) isBroadcastCall_Call() {}

func (*BroadcastCall_Candidate) isBroadcastCall_Call() {}

type CallStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CALL_REQ_STATUS = 0x0308;
	Header  *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	CallId  uint64  `protobuf:"varint,2,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	GroupId uint64  `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *CallStatusReq) Reset() {
	*x = CallStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallStatusReq) ProtoMessage() {}

func (x *CallStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallStatusReq.ProtoReflect.Descriptor instead.
func (*CallStatusReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{149}
}

func (x *CallStatusReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CallStatusReq) GetCallId() uint64 {
	if x != nil {
		return x.CallId
	}
	return 0
}

func (x *CallStatusReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

type CallStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CALL_RSP_STATUS = 0x0308;
	Header  *Header    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result  ErrorCode  `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	CallId  uint64     `protobuf:"varint,3,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	GroupId uint64     `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Status  CallStatus `protobuf:"varint,5,opt,name=status,proto3,enum=voicechat.CallStatus" json:"status,omitempty"`
}

func (x *CallStatusResp) Reset() {
	*x = CallStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallStatusResp) ProtoMessage() {}

func (x *CallStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallStatusResp.ProtoReflect.Descriptor instead.
func (*CallStatusResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{150}
}

func (x *CallStatusResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CallStatusResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *CallStatusResp) GetCallId() uint64 {
	if x != nil {
		return x.CallId
	}
	return 0
}

func (x *CallStatusResp) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CallStatusResp) GetStatus() CallStatus {
	if x != nil {
		return x.Status
	}
	return CallStatus_CALL_STATUS_UNKNOWN
}

type CallEventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CALL_EVENT = 0x0309;
	Header     *Header        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Uin        uint64         `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
	GroupId    uint64         `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	CallId     uint64         `protobuf:"varint,4,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	Event      CallEventType  `protobuf:"varint,5,opt,name=event,proto3,enum=voicechat.CallEventType" json:"event,omitempty"`
	StreamType CallStreamType `protobuf:"varint,6,opt,name=stream_type,json=streamType,proto3,enum=voicechat.CallStreamType" json:"stream_type,omitempty"`
}

func (x *CallEventMessage) Reset() {
	*x = CallEventMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallEventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallEventMessage) ProtoMessage() {}

func (x *CallEventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallEventMessage.ProtoReflect.Descriptor instead.
func (*CallEventMessage) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{151}
}

func (x *CallEventMessage) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CallEventMessage) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

func (x *CallEventMessage) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CallEventMessage) GetCallId() uint64 {
	if x != nil {
		return x.CallId
	}
	return 0
}

func (x *CallEventMessage) GetEvent() CallEventType {
	if x != nil {
		return x.Event
	}
	return CallEventType_CALL_EVENT_UNKNOWN
}

func (x *CallEventMessage) GetStreamType() CallStreamType {
	if x != nil {
		return x.StreamType
	}
	return CallStreamType_CALL_STREAM_TYPE_UNKNOWN
}

type UserStatusEventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Uin    uint64  `protobuf:"varint,2,opt,name=uin,proto3" json:"uin,omitempty"`
}

func (x *UserStatusEventMessage) Reset() {
	*x = UserStatusEventMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStatusEventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatusEventMessage) ProtoMessage() {}

func (x *UserStatusEventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatusEventMessage.ProtoReflect.Descriptor instead.
func (*UserStatusEventMessage) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{152}
}

func (x *UserStatusEventMessage) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UserStatusEventMessage) GetUin() uint64 {
	if x != nil {
		return x.Uin
	}
	return 0
}

type EventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EVENT_MESSAGE = 0x0800;
	Header      *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Type        EventType `protobuf:"varint,2,opt,name=type,proto3,enum=voicechat.EventType" json:"type,omitempty"`
	SenderUin   uint64    `protobuf:"varint,3,opt,name=sender_uin,json=senderUin,proto3" json:"sender_uin,omitempty"`
	ReceiverUin uint64    `protobuf:"varint,4,opt,name=receiver_uin,json=receiverUin,proto3" json:"receiver_uin,omitempty"`
	Data        string    `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	GroupId     uint64    `protobuf:"varint,6,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"` //optional
	CallId      uint64    `protobuf:"varint,7,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`    //optional
}

func (x *EventMessage) Reset() {
	*x = EventMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMessage) ProtoMessage() {}

func (x *EventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMessage.ProtoReflect.Descriptor instead.
func (*EventMessage) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{153}
}

func (x *EventMessage) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *EventMessage) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_EVENT_TYPE_UNKNOWN
}

func (x *EventMessage) GetSenderUin() uint64 {
	if x != nil {
		return x.SenderUin
	}
	return 0
}

func (x *EventMessage) GetReceiverUin() uint64 {
	if x != nil {
		return x.ReceiverUin
	}
	return 0
}

func (x *EventMessage) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *EventMessage) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *EventMessage) GetCallId() uint64 {
	if x != nil {
		return x.CallId
	}
	return 0
}

type BroadcastEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EVENT_BROADCAST = 0x0801;
	Header        *Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	RecipientUins []uint64      `protobuf:"varint,2,rep,packed,name=recipient_uins,json=recipientUins,proto3" json:"recipient_uins,omitempty"`
	Event         *EventMessage `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *BroadcastEvent) Reset() {
	*x = BroadcastEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastEvent) ProtoMessage() {}

func (x *BroadcastEvent) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastEvent.ProtoReflect.Descriptor instead.
func (*BroadcastEvent) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{154}
}

func (x *BroadcastEvent) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BroadcastEvent) GetRecipientUins() []uint64 {
	if x != nil {
		return x.RecipientUins
	}
	return nil
}

func (x *BroadcastEvent) GetEvent() *EventMessage {
	if x != nil {
		return x.Event
	}
	return nil
}

// GroupCall API
type JwtHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kid string `protobuf:"bytes,1,opt,name=kid,proto3" json:"kid,omitempty"` // "jitsi_app_secret", i.e. groupcall_id
	Typ string `protobuf:"bytes,2,opt,name=typ,proto3" json:"typ,omitempty"`
	Alg string `protobuf:"bytes,3,opt,name=alg,proto3" json:"alg,omitempty"`
}

func (x *JwtHeader) Reset() {
	*x = JwtHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwtHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtHeader) ProtoMessage() {}

func (x *JwtHeader) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtHeader.ProtoReflect.Descriptor instead.
func (*JwtHeader) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{155}
}

func (x *JwtHeader) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

func (x *JwtHeader) GetTyp() string {
	if x != nil {
		return x.Typ
	}
	return ""
}

func (x *JwtHeader) GetAlg() string {
	if x != nil {
		return x.Alg
	}
	return ""
}

type JwtUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avatar string `protobuf:"bytes,1,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email  string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *JwtUser) Reset() {
	*x = JwtUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwtUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtUser) ProtoMessage() {}

func (x *JwtUser) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtUser.ProtoReflect.Descriptor instead.
func (*JwtUser) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{156}
}

func (x *JwtUser) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *JwtUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JwtUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type JwtContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *JwtUser `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *JwtContext) Reset() {
	*x = JwtContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwtContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtContext) ProtoMessage() {}

func (x *JwtContext) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtContext.ProtoReflect.Descriptor instead.
func (*JwtContext) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{157}
}

func (x *JwtContext) GetUser() *JwtUser {
	if x != nil {
		return x.User
	}
	return nil
}

type JwtPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *JwtContext `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Aud     string      `protobuf:"bytes,2,opt,name=aud,proto3" json:"aud,omitempty"`   //"jitsi_app_id"
	Iss     string      `protobuf:"bytes,3,opt,name=iss,proto3" json:"iss,omitempty"`   //"jitsi_app_id"
	Sub     string      `protobuf:"bytes,4,opt,name=sub,proto3" json:"sub,omitempty"`   //"meet.jitsi"
	Room    string      `protobuf:"bytes,5,opt,name=room,proto3" json:"room,omitempty"` //groupcall_id
}

func (x *JwtPayload) Reset() {
	*x = JwtPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwtPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtPayload) ProtoMessage() {}

func (x *JwtPayload) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtPayload.ProtoReflect.Descriptor instead.
func (*JwtPayload) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{158}
}

func (x *JwtPayload) GetContext() *JwtContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *JwtPayload) GetAud() string {
	if x != nil {
		return x.Aud
	}
	return ""
}

func (x *JwtPayload) GetIss() string {
	if x != nil {
		return x.Iss
	}
	return ""
}

func (x *JwtPayload) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *JwtPayload) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

type GroupCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupcallId uint64          `protobuf:"varint,1,opt,name=groupcall_id,json=groupcallId,proto3" json:"groupcall_id,omitempty"`
	MessageId   uint64          `protobuf:"varint,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	GroupId     uint64          `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Type        GroupCallType   `protobuf:"varint,14,opt,name=type,proto3,enum=voicechat.GroupCallType" json:"type,omitempty"`
	Status      GroupCallStatus `protobuf:"varint,4,opt,name=status,proto3,enum=voicechat.GroupCallStatus" json:"status,omitempty"`
	SenderUin   uint64          `protobuf:"varint,13,opt,name=sender_uin,json=senderUin,proto3" json:"sender_uin,omitempty"`
	CreatedAt   uint64          `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   uint64          `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	StoppedAt   uint64          `protobuf:"varint,7,opt,name=stopped_at,json=stoppedAt,proto3" json:"stopped_at,omitempty"`
	SecretId    string          `protobuf:"bytes,8,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
	PrivateKey  string          `protobuf:"bytes,9,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	PublicKey   string          `protobuf:"bytes,10,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	InvitedUins []uint64        `protobuf:"varint,11,rep,packed,name=invited_uins,json=invitedUins,proto3" json:"invited_uins,omitempty"`
	JoinedUins  []uint64        `protobuf:"varint,12,rep,packed,name=joined_uins,json=joinedUins,proto3" json:"joined_uins,omitempty"`
	ActiveUins  []uint64        `protobuf:"varint,15,rep,packed,name=active_uins,json=activeUins,proto3" json:"active_uins,omitempty"`
}

func (x *GroupCall) Reset() {
	*x = GroupCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupCall) ProtoMessage() {}

func (x *GroupCall) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupCall.ProtoReflect.Descriptor instead.
func (*GroupCall) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{159}
}

func (x *GroupCall) GetGroupcallId() uint64 {
	if x != nil {
		return x.GroupcallId
	}
	return 0
}

func (x *GroupCall) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *GroupCall) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupCall) GetType() GroupCallType {
	if x != nil {
		return x.Type
	}
	return GroupCallType_GROUPCALL_TYPE_UNKNOWN
}

func (x *GroupCall) GetStatus() GroupCallStatus {
	if x != nil {
		return x.Status
	}
	return GroupCallStatus_GROUPCALL_STATUS_UNKNOWN
}

func (x *GroupCall) GetSenderUin() uint64 {
	if x != nil {
		return x.SenderUin
	}
	return 0
}

func (x *GroupCall) GetCreatedAt() uint64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GroupCall) GetUpdatedAt() uint64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *GroupCall) GetStoppedAt() uint64 {
	if x != nil {
		return x.StoppedAt
	}
	return 0
}

func (x *GroupCall) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

func (x *GroupCall) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *GroupCall) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *GroupCall) GetInvitedUins() []uint64 {
	if x != nil {
		return x.InvitedUins
	}
	return nil
}

func (x *GroupCall) GetJoinedUins() []uint64 {
	if x != nil {
		return x.JoinedUins
	}
	return nil
}

func (x *GroupCall) GetActiveUins() []uint64 {
	if x != nil {
		return x.ActiveUins
	}
	return nil
}

// GROUPCALL 0x0901
type StartGroupCallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId   uint64     `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Groupcall *GroupCall `protobuf:"bytes,3,opt,name=groupcall,proto3" json:"groupcall,omitempty"`
}

func (x *StartGroupCallReq) Reset() {
	*x = StartGroupCallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartGroupCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartGroupCallReq) ProtoMessage() {}

func (x *StartGroupCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartGroupCallReq.ProtoReflect.Descriptor instead.
func (*StartGroupCallReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{160}
}

func (x *StartGroupCallReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StartGroupCallReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *StartGroupCallReq) GetGroupcall() *GroupCall {
	if x != nil {
		return x.Groupcall
	}
	return nil
}

type StartGroupCallResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result    ErrorCode  `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Errmsg    string     `protobuf:"bytes,3,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	Groupcall *GroupCall `protobuf:"bytes,4,opt,name=groupcall,proto3" json:"groupcall,omitempty"`
}

func (x *StartGroupCallResp) Reset() {
	*x = StartGroupCallResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartGroupCallResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartGroupCallResp) ProtoMessage() {}

func (x *StartGroupCallResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartGroupCallResp.ProtoReflect.Descriptor instead.
func (*StartGroupCallResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{161}
}

func (x *StartGroupCallResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StartGroupCallResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *StartGroupCallResp) GetErrmsg() string {
	if x != nil {
		return x.Errmsg
	}
	return ""
}

func (x *StartGroupCallResp) GetGroupcall() *GroupCall {
	if x != nil {
		return x.Groupcall
	}
	return nil
}

// GROUPCALL 0x0902
type CreateGroupCallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId   uint64        `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Type      GroupCallType `protobuf:"varint,4,opt,name=type,proto3,enum=voicechat.GroupCallType" json:"type,omitempty"`
	Groupcall *GroupCall    `protobuf:"bytes,3,opt,name=groupcall,proto3" json:"groupcall,omitempty"`
}

func (x *CreateGroupCallReq) Reset() {
	*x = CreateGroupCallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupCallReq) ProtoMessage() {}

func (x *CreateGroupCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupCallReq.ProtoReflect.Descriptor instead.
func (*CreateGroupCallReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{162}
}

func (x *CreateGroupCallReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateGroupCallReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *CreateGroupCallReq) GetType() GroupCallType {
	if x != nil {
		return x.Type
	}
	return GroupCallType_GROUPCALL_TYPE_UNKNOWN
}

func (x *CreateGroupCallReq) GetGroupcall() *GroupCall {
	if x != nil {
		return x.Groupcall
	}
	return nil
}

type CreateGroupCallResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result    ErrorCode  `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Errmsg    string     `protobuf:"bytes,3,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	Groupcall *GroupCall `protobuf:"bytes,4,opt,name=groupcall,proto3" json:"groupcall,omitempty"`
}

func (x *CreateGroupCallResp) Reset() {
	*x = CreateGroupCallResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupCallResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupCallResp) ProtoMessage() {}

func (x *CreateGroupCallResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupCallResp.ProtoReflect.Descriptor instead.
func (*CreateGroupCallResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{163}
}

func (x *CreateGroupCallResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateGroupCallResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *CreateGroupCallResp) GetErrmsg() string {
	if x != nil {
		return x.Errmsg
	}
	return ""
}

func (x *CreateGroupCallResp) GetGroupcall() *GroupCall {
	if x != nil {
		return x.Groupcall
	}
	return nil
}

// GROUPCALL 0x0903
type JoinGroupCallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header      *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId     uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MessageId   uint64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	DisplayName string  `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	AvatarUrl   string  `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
}

func (x *JoinGroupCallReq) Reset() {
	*x = JoinGroupCallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinGroupCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGroupCallReq) ProtoMessage() {}

func (x *JoinGroupCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGroupCallReq.ProtoReflect.Descriptor instead.
func (*JoinGroupCallReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{164}
}

func (x *JoinGroupCallReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *JoinGroupCallReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *JoinGroupCallReq) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *JoinGroupCallReq) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *JoinGroupCallReq) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

type JoinGroupCallResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result     ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	Errmsg     string    `protobuf:"bytes,3,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	JwtToken   string    `protobuf:"bytes,4,opt,name=jwt_token,json=jwtToken,proto3" json:"jwt_token,omitempty"`
	GroupId    uint64    `protobuf:"varint,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MessageId  uint64    `protobuf:"varint,6,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	CreatorUin uint64    `protobuf:"varint,7,opt,name=creator_uin,json=creatorUin,proto3" json:"creator_uin,omitempty"`
}

func (x *JoinGroupCallResp) Reset() {
	*x = JoinGroupCallResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinGroupCallResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGroupCallResp) ProtoMessage() {}

func (x *JoinGroupCallResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGroupCallResp.ProtoReflect.Descriptor instead.
func (*JoinGroupCallResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{165}
}

func (x *JoinGroupCallResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *JoinGroupCallResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *JoinGroupCallResp) GetErrmsg() string {
	if x != nil {
		return x.Errmsg
	}
	return ""
}

func (x *JoinGroupCallResp) GetJwtToken() string {
	if x != nil {
		return x.JwtToken
	}
	return ""
}

func (x *JoinGroupCallResp) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *JoinGroupCallResp) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *JoinGroupCallResp) GetCreatorUin() uint64 {
	if x != nil {
		return x.CreatorUin
	}
	return 0
}

// GROUPCALL 0x0904
type LeaveGroupCallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId   uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MessageId uint64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *LeaveGroupCallReq) Reset() {
	*x = LeaveGroupCallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveGroupCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveGroupCallReq) ProtoMessage() {}

func (x *LeaveGroupCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveGroupCallReq.ProtoReflect.Descriptor instead.
func (*LeaveGroupCallReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{166}
}

func (x *LeaveGroupCallReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LeaveGroupCallReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *LeaveGroupCallReq) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type LeaveGroupCallResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *LeaveGroupCallResp) Reset() {
	*x = LeaveGroupCallResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveGroupCallResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveGroupCallResp) ProtoMessage() {}

func (x *LeaveGroupCallResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveGroupCallResp.ProtoReflect.Descriptor instead.
func (*LeaveGroupCallResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{167}
}

func (x *LeaveGroupCallResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LeaveGroupCallResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

// GROUPCALL 0x0905
type InviteGroupCallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId    uint64        `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MessageId  uint64        `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	SenderUin  uint64        `protobuf:"varint,4,opt,name=sender_uin,json=senderUin,proto3" json:"sender_uin,omitempty"`
	InvitedUin uint64        `protobuf:"varint,5,opt,name=invited_uin,json=invitedUin,proto3" json:"invited_uin,omitempty"`
	Type       GroupCallType `protobuf:"varint,6,opt,name=type,proto3,enum=voicechat.GroupCallType" json:"type,omitempty"`
}

func (x *InviteGroupCallReq) Reset() {
	*x = InviteGroupCallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteGroupCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteGroupCallReq) ProtoMessage() {}

func (x *InviteGroupCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteGroupCallReq.ProtoReflect.Descriptor instead.
func (*InviteGroupCallReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{168}
}

func (x *InviteGroupCallReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *InviteGroupCallReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *InviteGroupCallReq) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *InviteGroupCallReq) GetSenderUin() uint64 {
	if x != nil {
		return x.SenderUin
	}
	return 0
}

func (x *InviteGroupCallReq) GetInvitedUin() uint64 {
	if x != nil {
		return x.InvitedUin
	}
	return 0
}

func (x *InviteGroupCallReq) GetType() GroupCallType {
	if x != nil {
		return x.Type
	}
	return GroupCallType_GROUPCALL_TYPE_UNKNOWN
}

type InviteGroupCallResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header     *Header       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result     ErrorCode     `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	GroupId    uint64        `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MessageId  uint64        `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	SenderUin  uint64        `protobuf:"varint,5,opt,name=sender_uin,json=senderUin,proto3" json:"sender_uin,omitempty"`
	InvitedUin uint64        `protobuf:"varint,6,opt,name=invited_uin,json=invitedUin,proto3" json:"invited_uin,omitempty"`
	Type       GroupCallType `protobuf:"varint,7,opt,name=type,proto3,enum=voicechat.GroupCallType" json:"type,omitempty"`
}

func (x *InviteGroupCallResp) Reset() {
	*x = InviteGroupCallResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InviteGroupCallResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InviteGroupCallResp) ProtoMessage() {}

func (x *InviteGroupCallResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InviteGroupCallResp.ProtoReflect.Descriptor instead.
func (*InviteGroupCallResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{169}
}

func (x *InviteGroupCallResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *InviteGroupCallResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *InviteGroupCallResp) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *InviteGroupCallResp) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *InviteGroupCallResp) GetSenderUin() uint64 {
	if x != nil {
		return x.SenderUin
	}
	return 0
}

func (x *InviteGroupCallResp) GetInvitedUin() uint64 {
	if x != nil {
		return x.InvitedUin
	}
	return 0
}

func (x *InviteGroupCallResp) GetType() GroupCallType {
	if x != nil {
		return x.Type
	}
	return GroupCallType_GROUPCALL_TYPE_UNKNOWN
}

// GROUPCALL 0x0906
type PingGroupCallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId   uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MessageId uint64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *PingGroupCallReq) Reset() {
	*x = PingGroupCallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingGroupCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingGroupCallReq) ProtoMessage() {}

func (x *PingGroupCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingGroupCallReq.ProtoReflect.Descriptor instead.
func (*PingGroupCallReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{170}
}

func (x *PingGroupCallReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PingGroupCallReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *PingGroupCallReq) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type PingGroupCallResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *PingGroupCallResp) Reset() {
	*x = PingGroupCallResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingGroupCallResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingGroupCallResp) ProtoMessage() {}

func (x *PingGroupCallResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingGroupCallResp.ProtoReflect.Descriptor instead.
func (*PingGroupCallResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{171}
}

func (x *PingGroupCallResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PingGroupCallResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

// GROUPCALL 0x0907
type StopGroupCallReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId   uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MessageId uint64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *StopGroupCallReq) Reset() {
	*x = StopGroupCallReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopGroupCallReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopGroupCallReq) ProtoMessage() {}

func (x *StopGroupCallReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopGroupCallReq.ProtoReflect.Descriptor instead.
func (*StopGroupCallReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{172}
}

func (x *StopGroupCallReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StopGroupCallReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *StopGroupCallReq) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type StopGroupCallResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *Header   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result ErrorCode `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
}

func (x *StopGroupCallResp) Reset() {
	*x = StopGroupCallResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopGroupCallResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopGroupCallResp) ProtoMessage() {}

func (x *StopGroupCallResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopGroupCallResp.ProtoReflect.Descriptor instead.
func (*StopGroupCallResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{173}
}

func (x *StopGroupCallResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StopGroupCallResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

// GROUPCALL 0x0908
type GroupCallStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GroupId   uint64  `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MessageId uint64  `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *GroupCallStatusReq) Reset() {
	*x = GroupCallStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupCallStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupCallStatusReq) ProtoMessage() {}

func (x *GroupCallStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupCallStatusReq.ProtoReflect.Descriptor instead.
func (*GroupCallStatusReq) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{174}
}

func (x *GroupCallStatusReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GroupCallStatusReq) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupCallStatusReq) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type GroupCallStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *Header         `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result    ErrorCode       `protobuf:"varint,2,opt,name=result,proto3,enum=voicechat.ErrorCode" json:"result,omitempty"`
	GroupId   uint64          `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	MessageId uint64          `protobuf:"varint,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Status    GroupCallStatus `protobuf:"varint,5,opt,name=status,proto3,enum=voicechat.GroupCallStatus" json:"status,omitempty"`
	Groupcall *GroupCall      `protobuf:"bytes,6,opt,name=groupcall,proto3" json:"groupcall,omitempty"`
}

func (x *GroupCallStatusResp) Reset() {
	*x = GroupCallStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voicechat_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupCallStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupCallStatusResp) ProtoMessage() {}

func (x *GroupCallStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_voicechat_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupCallStatusResp.ProtoReflect.Descriptor instead.
func (*GroupCallStatusResp) Descriptor() ([]byte, []int) {
	return file_voicechat_proto_rawDescGZIP(), []int{175}
}

func (x *GroupCallStatusResp) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GroupCallStatusResp) GetResult() ErrorCode {
	if x != nil {
		return x.Result
	}
	return ErrorCode_ERRORCODE_OK
}

func (x *GroupCallStatusResp) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupCallStatusResp) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *GroupCallStatusResp) GetStatus() GroupCallStatus {
	if x != nil {
		return x.Status
	}
	return GroupCallStatus_GROUPCALL_STATUS_UNKNOWN
}

func (x *GroupCallStatusResp) GetGroupcall() *GroupCall {
	if x != nil {
		return x.Groupcall
	}
	return nil
}

var File_voicechat_proto protoreflect.FileDescriptor

var file_voicechat_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x22, 0x4c, 0x0a, 0x0c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xa6, 0x03, 0x0a, 0x06, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x12, 0x1e, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x64, 0x54, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4f, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x64, 0x69, 0x72, 0x22, 0x69, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x75, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x64, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4c,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x22, 0xb6, 0x01, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x75, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xbb,
	0x01, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xea, 0x01, 0x0a,
	0x18, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x75, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x19, 0x55, 0x6e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x75, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x1a, 0x55, 0x6e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x75, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x0a, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x0d, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x41,
	0x74, 0x22, 0xa1, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75,
	0x69, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x83, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x36, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x53, 0x0a, 0x08, 0x49, 0x4d, 0x43, 0x5f, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x6d, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x69, 0x6d, 0x63, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x6d, 0x63, 0x5f,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6d, 0x63, 0x49, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x6d, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x69, 0x6d, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x0c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x2e, 0x0a, 0x08, 0x69, 0x6d, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x49, 0x4d, 0x43, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x69, 0x6d, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xeb, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x29,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06,
	0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73,
	0x4e, 0x65, 0x77, 0x12, 0x3a, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xae, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e,
	0x22, 0x62, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x58, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73,
	0x65, 0x65, 0x6e, 0x41, 0x74, 0x22, 0xa2, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x27, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x6e, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x66, 0x0a, 0x0d, 0x50, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x3b, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22,
	0xff, 0x09, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6f,
	0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x55, 0x69,
	0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x69, 0x6e, 0x73,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x69, 0x6e,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x73, 0x12,
	0x49, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0a, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0f,
	0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x0e, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x35, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x73, 0x65, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x6f, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x6f, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x41,
	0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c,
	0x6c, 0x22, 0xa4, 0x03, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6f,
	0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x55, 0x69,
	0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xc8, 0x02,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x75, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55,
	0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x70, 0x75, 0x6c, 0x6c, 0x41, 0x6c, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x07, 0x70, 0x75, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x22, 0x92, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x56, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12,
	0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x55, 0x0a, 0x0d, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x76,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x31, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x22, 0x92, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x76, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x22,
	0x69, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x78, 0x0a, 0x0f, 0x55, 0x6e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x75,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x55, 0x69, 0x6e, 0x22, 0x6b, 0x0a, 0x10, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0x3a, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0x9b, 0x01, 0x0a, 0x14, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x5b,
	0x0a, 0x13, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x14,
	0x4c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x54, 0x0a, 0x0c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x73, 0x69, 0x7a, 0x65, 0x22,
	0xf1, 0x01, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x70, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x71, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x55,
	0x69, 0x6e, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x26, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x54, 0x0a, 0x0c, 0x4d, 0x75, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x68, 0x0a,
	0x0d, 0x4d, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x56, 0x0a, 0x0e, 0x55, 0x6e, 0x6d, 0x75, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0x6a, 0x0a, 0x0f, 0x55, 0x6e, 0x6d, 0x75, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x13,
	0x4e, 0x65, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x55,
	0x69, 0x6e, 0x73, 0x22, 0x6f, 0x0a, 0x14, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x53, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x0c, 0x50, 0x69, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x55, 0x0a, 0x0d, 0x55, 0x6e, 0x70, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x0e, 0x55, 0x6e, 0x70,
	0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x88, 0x02, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f,
	0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x22,
	0x9b, 0x01, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x3b, 0x0a,
	0x0e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12,
	0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x0f, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x18, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x55, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f,
	0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x9c, 0x01, 0x0a,
	0x19, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x60, 0x0a, 0x18, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x74, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x5a, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0x82, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x80, 0x01, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x4c, 0x69, 0x6e,
	0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x11, 0x4a, 0x6f, 0x69, 0x6e,
	0x4c, 0x69, 0x6e, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x86,
	0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x70, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x56, 0x0a, 0x13,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6f, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6e, 0x0a, 0x10, 0x4c, 0x69, 0x6e, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x6e, 0x6b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xa1, 0x01, 0x0a,
	0x0c, 0x53, 0x79, 0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x70, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xd1, 0x02, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0c, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x0a, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x61, 0x64, 0x64, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75,
	0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x4d, 0x6f, 0x76, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x26, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x8f, 0x01, 0x0a, 0x0d, 0x50, 0x69,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x0e, 0x50,
	0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x0f, 0x55, 0x6e, 0x70, 0x69, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x22, 0x6b, 0x0a, 0x10,
	0x55, 0x6e, 0x70, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5c, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x0c, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6e, 0x74, 0x22, 0x65, 0x0a, 0x10, 0x52, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2b, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x04, 0x75, 0x69, 0x6e, 0x73,
	0x22, 0xc9, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x75, 0x69, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x69, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x75, 0x69, 0x6e, 0x73, 0x1a, 0x3c, 0x0a, 0x0e,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x50, 0x0a, 0x09, 0x55, 0x69,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x01, 0x0a,
	0x15, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbf, 0x02, 0x0a, 0x11,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x33, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e,
	0x73, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x86, 0x01,
	0x0a, 0x0b, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x35, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x72, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x77, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x69, 0x6e, 0x73, 0x22, 0x6c, 0x0a, 0x11, 0x41, 0x64, 0x64,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x7a, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x29,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x69,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x69, 0x6e, 0x73, 0x22, 0x6f, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x70, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x75, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x73, 0x22, 0xe9, 0x04, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x75, 0x6c,
	0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x70, 0x75, 0x6c,
	0x6c, 0x41, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x6c,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x70, 0x75, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x6c, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x6c,
	0x6c, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x41, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d,
	0x61, 0x64, 0x64, 0x65, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x12, 0x2a, 0x0a,
	0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61,
	0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x12, 0x39, 0x0a, 0x0e, 0x70, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x14, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x28,
	0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x75, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61,
	0x73, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x22, 0xc3,
	0x01, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x10, 0x6f,
	0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x72,
	0x65, 0x4b, 0x65, 0x79, 0x22, 0x6f, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0xae, 0x01, 0x0a, 0x0d, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x75,
	0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x65,
	0x64, 0x55, 0x69, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x75, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x55, 0x69, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x69, 0x6e,
	0x67, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x65,
	0x61, 0x76, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x6e, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x0f, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x22, 0x6c, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x22, 0xce, 0x08, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x28, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x48, 0x00, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x30, 0x0a, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x06,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x40,
	0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x48, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x48, 0x00, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x48, 0x00, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x41, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4a, 0x6f, 0x69,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x6a, 0x6f,
	0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x44, 0x0a, 0x0f, 0x6c,
	0x65, 0x61, 0x76, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c,
	0x6c, 0x12, 0x47, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53,
	0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0d,
	0x73, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x05, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0x35, 0x0a, 0x08, 0x53, 0x65, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75,
	0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x65, 0x65, 0x6e, 0x41, 0x74, 0x22, 0xc5, 0x07, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x69, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x65, 0x65, 0x6e, 0x55, 0x69, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x73, 0x12, 0x2a,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x55,
	0x69, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x65, 0x65, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x65, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x73, 0x65, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x35, 0x0a, 0x09,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xe7, 0x03, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x75,
	0x69, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x22, 0x9a, 0x01,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x9a, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x96, 0x01,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x22, 0x6c, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65,
	0x65, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70,
	0x73, 0x69, 0x7a, 0x65, 0x22, 0xbc, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65,
	0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x22, 0xe8, 0x02, 0x0a, 0x10, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x75, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xb2,
	0x03, 0x0a, 0x0c, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06,
	0x69, 0x73, 0x5f, 0x73, 0x6f, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73,
	0x53, 0x6f, 0x73, 0x22, 0x81, 0x04, 0x0a, 0x0f, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x69, 0x6e,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x73, 0x6f, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x69, 0x73, 0x53, 0x6f, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x76, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x2c, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x14,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x3e, 0x0a, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x88, 0x01, 0x0a, 0x15, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x22, 0x82, 0x01, 0x0a, 0x07, 0x46,
	0x43, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xb1, 0x02, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x55,
	0x69, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x0c, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4e, 0x65, 0x77,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0xed, 0x02, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x46, 0x43, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x0c, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4e, 0x65, 0x77,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x22, 0xc3, 0x04, 0x0a, 0x13, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x43, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x47, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c,
	0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x99, 0x03, 0x0a, 0x19, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x75, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x48, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x48, 0x00, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x48, 0x00, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa2, 0x01, 0x0a, 0x18, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x75, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xe0, 0x05, 0x0a, 0x04, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36,
	0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x69,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x55, 0x69,
	0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x75,
	0x69, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22, 0x84, 0x03,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x09, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0a,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x65, 0x55, 0x69, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x23, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52,
	0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x87, 0x01, 0x0a, 0x09, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x0a, 0x74, 0x79, 0x70, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22,
	0x76, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x29, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x0a, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63,
	0x61, 0x6c, 0x6c, 0x65, 0x65, 0x55, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x61,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x55, 0x69, 0x6e,
	0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43,
	0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe7, 0x01,
	0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x63, 0x65, 0x53, 0x64, 0x70, 0x12, 0x29, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x55,
	0x69, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x64, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x92, 0x02, 0x0a, 0x10, 0x43, 0x61, 0x6c, 0x6c,
	0x49, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x55,
	0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x64, 0x70, 0x5f, 0x6d, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x64, 0x70, 0x4d, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x64, 0x70,
	0x5f, 0x6d, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x73, 0x64, 0x70, 0x4d, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xdb, 0x02, 0x0a,
	0x0d, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x29,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x69, 0x6e, 0x73,
	0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2f,
	0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x29, 0x0a, 0x03, 0x73, 0x64,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x63, 0x65, 0x53, 0x64, 0x70, 0x48, 0x00,
	0x52, 0x03, 0x73, 0x64, 0x70, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x64,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x6e, 0x0a, 0x0d, 0x43, 0x61,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x0e, 0x43,
	0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x10, 0x43, 0x61,
	0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x3a, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x55, 0x0a, 0x16, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75,
	0x69, 0x6e, 0x22, 0xed, 0x01, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c,
	0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x69,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x69, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x41, 0x0a, 0x09, 0x4a, 0x77, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x79, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x79, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x6c, 0x67, 0x22, 0x4b, 0x0a, 0x07, 0x4a, 0x77, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x34, 0x0a, 0x0a, 0x4a, 0x77, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4a,
	0x77, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x87, 0x01, 0x0a,
	0x0a, 0x4a, 0x77, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4a, 0x77, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x75, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x75, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x73, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x75, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x22, 0x88, 0x04, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55,
	0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x69, 0x6e,
	0x73, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c,
	0x6c, 0x22, 0xb9, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0xbc, 0x01,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0xba, 0x01, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0xb9, 0x01, 0x0a, 0x10, 0x4a, 0x6f,
	0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x29,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x55, 0x72, 0x6c, 0x22, 0xfc, 0x01, 0x0a, 0x11, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x6a, 0x77, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6a, 0x77, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75,
	0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x55, 0x69, 0x6e, 0x22, 0x78, 0x0a, 0x11, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x6d,
	0x0a, 0x12, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe7, 0x01,
	0x0a, 0x12, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x69,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x69, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x64, 0x55,
	0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x77, 0x0a, 0x10, 0x50, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x11, 0x50, 0x69, 0x6e,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x77, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x22, 0x6c, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x79,
	0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x90, 0x02, 0x0a, 0x13, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x29, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x63, 0x61, 0x6c, 0x6c, 0x2a, 0xd4, 0x12, 0x0a,
	0x0f, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x81, 0x04, 0x12, 0x17, 0x0a, 0x12, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x82, 0x04, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x10, 0x83, 0x04, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x53, 0x10,
	0x84, 0x04, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10,
	0x85, 0x04, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x10, 0x86, 0x04, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x87, 0x04, 0x12, 0x17, 0x0a,
	0x12, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4c, 0x4f, 0x47,
	0x4f, 0x55, 0x54, 0x10, 0x88, 0x04, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0xf0, 0x05, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0xf1, 0x05, 0x12, 0x14,
	0x0a, 0x0f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x10, 0x81, 0x06, 0x12, 0x0f, 0x0a, 0x0a, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x10, 0x82, 0x06, 0x12, 0x10, 0x0a, 0x0b, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x4e,
	0x53, 0x57, 0x45, 0x52, 0x10, 0x83, 0x06, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x10, 0x84, 0x06, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x44, 0x50, 0x10, 0x85, 0x06, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x86, 0x06, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x42, 0x52, 0x4f, 0x41,
	0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x87, 0x06, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x52, 0x45, 0x51, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x88, 0x06, 0x12, 0x0f,
	0x0a, 0x0a, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x89, 0x06, 0x12,
	0x15, 0x0a, 0x10, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x10, 0x81, 0x0a, 0x12, 0x15, 0x0a, 0x10, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x52, 0x45, 0x51, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x82, 0x0a, 0x12, 0x14, 0x0a,
	0x0f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45,
	0x10, 0x83, 0x0a, 0x12, 0x15, 0x0a, 0x10, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x84, 0x0a, 0x12, 0x13, 0x0a, 0x0e, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x85, 0x0a, 0x12,
	0x14, 0x0a, 0x0f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x10, 0x86, 0x0a, 0x12, 0x16, 0x0a, 0x11, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52,
	0x45, 0x51, 0x5f, 0x55, 0x4e, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x87, 0x0a, 0x12, 0x1b, 0x0a,
	0x16, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x88, 0x0a, 0x12, 0x19, 0x0a, 0x14, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x10, 0x89, 0x0a, 0x12, 0x1a, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52,
	0x45, 0x51, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x8a,
	0x0a, 0x12, 0x22, 0x0a, 0x1d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x8b, 0x0a, 0x12, 0x14, 0x0a, 0x0f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52,
	0x45, 0x51, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x8c, 0x0a, 0x12, 0x13, 0x0a, 0x0e, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4d, 0x55, 0x54, 0x45, 0x10, 0x8d, 0x0a,
	0x12, 0x15, 0x0a, 0x10, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x55, 0x4e,
	0x4d, 0x55, 0x54, 0x45, 0x10, 0x8e, 0x0a, 0x12, 0x1b, 0x0a, 0x16, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45,
	0x52, 0x10, 0x8f, 0x0a, 0x12, 0x12, 0x0a, 0x0d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45,
	0x51, 0x5f, 0x50, 0x49, 0x4e, 0x10, 0x90, 0x0a, 0x12, 0x14, 0x0a, 0x0f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x55, 0x4e, 0x50, 0x49, 0x4e, 0x10, 0x91, 0x0a, 0x12, 0x20,
	0x0a, 0x1b, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x92, 0x0a,
	0x12, 0x21, 0x0a, 0x1c, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x50, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x54,
	0x10, 0x93, 0x0a, 0x12, 0x15, 0x0a, 0x10, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51,
	0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x10, 0x94, 0x0a, 0x12, 0x1a, 0x0a, 0x15, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x10, 0x95, 0x0a, 0x12, 0x18, 0x0a, 0x13, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x52, 0x45, 0x51, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x96, 0x0a,
	0x12, 0x18, 0x0a, 0x13, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x97, 0x0a, 0x12, 0x1b, 0x0a, 0x16, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x98, 0x0a, 0x12, 0x13, 0x0a, 0x0e, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x52, 0x45, 0x51, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x99, 0x0a, 0x12, 0x21, 0x0a, 0x1c,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x9a, 0x0a, 0x12,
	0x1b, 0x0a, 0x16, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x9b, 0x0a, 0x12, 0x1a, 0x0a, 0x15,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x9c, 0x0a, 0x12, 0x1c, 0x0a, 0x17, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x55, 0x4e, 0x50, 0x49, 0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x9d, 0x0a, 0x12, 0x22, 0x0a, 0x1d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x52, 0x45, 0x51, 0x5f, 0x50, 0x49, 0x4e, 0x4e, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x9e, 0x0a, 0x12, 0x18, 0x0a, 0x13, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x10, 0x9f, 0x0a, 0x12, 0x18, 0x0a, 0x13, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45,
	0x51, 0x5f, 0x44, 0x45, 0x4c, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0xa0, 0x0a, 0x12, 0x1e,
	0x0a, 0x19, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xa1, 0x0a, 0x12, 0x19,
	0x0a, 0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4d, 0x4f, 0x56, 0x45,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0xa2, 0x0a, 0x12, 0x21, 0x0a, 0x1c, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0xa3, 0x0a, 0x12, 0x0e, 0x0a, 0x09,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0xf0, 0x0b, 0x12, 0x11, 0x0a, 0x0c,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xf1, 0x0b, 0x12,
	0x11, 0x0a, 0x0c, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0xf2, 0x0b, 0x12, 0x14, 0x0a, 0x0f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x52, 0x4f, 0x41,
	0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0xf3, 0x0b, 0x12, 0x18, 0x0a, 0x13, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0xf4, 0x0b, 0x12, 0x1b, 0x0a, 0x16, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x56, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0xf5, 0x0b, 0x12,
	0x18, 0x0a, 0x13, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0xf6, 0x0b, 0x12, 0x18, 0x0a, 0x13, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47,
	0x10, 0xf7, 0x0b, 0x12, 0x16, 0x0a, 0x11, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xf8, 0x0b, 0x12, 0x17, 0x0a, 0x12, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x10, 0x81, 0x0c, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x82, 0x0c, 0x12, 0x17, 0x0a,
	0x12, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x83, 0x0c, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x84, 0x0c, 0x12, 0x1e, 0x0a,
	0x19, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4c, 0x49, 0x56,
	0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x85, 0x0c, 0x12, 0x23, 0x0a,
	0x1e, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4d, 0x55, 0x4c,
	0x54, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x87, 0x0c, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x91, 0x0c, 0x12, 0x1e, 0x0a,
	0x19, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x52, 0x45, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x92, 0x0c, 0x12, 0x26, 0x0a,
	0x21, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x93, 0x0c, 0x12, 0x1f, 0x0a, 0x1a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43,
	0x41, 0x53, 0x54, 0x10, 0x94, 0x0c, 0x12, 0x18, 0x0a, 0x13, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x56, 0x32, 0x10, 0x95, 0x0c,
	0x12, 0x10, 0x0a, 0x0b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x10,
	0xf1, 0x0d, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x10, 0xf2, 0x0d, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0xf3, 0x0d, 0x12, 0x16, 0x0a, 0x11,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53,
	0x54, 0x10, 0xf4, 0x0d, 0x12, 0x19, 0x0a, 0x14, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x80, 0x0e, 0x12,
	0x20, 0x0a, 0x1b, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x81,
	0x0e, 0x12, 0x12, 0x0a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x10, 0x80, 0x10, 0x12, 0x14, 0x0a, 0x0f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42,
	0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x81, 0x10, 0x12, 0x18, 0x0a, 0x13, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x10, 0x81, 0x12, 0x12, 0x19, 0x0a, 0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x82, 0x12,
	0x12, 0x17, 0x0a, 0x12, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45,
	0x51, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x83, 0x12, 0x12, 0x18, 0x0a, 0x13, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45,
	0x10, 0x84, 0x12, 0x12, 0x19, 0x0a, 0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x52, 0x45, 0x51, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x85, 0x12, 0x12, 0x17,
	0x0a, 0x12, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x5f,
	0x50, 0x49, 0x4e, 0x47, 0x10, 0x86, 0x12, 0x12, 0x17, 0x0a, 0x12, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x87, 0x12,
	0x12, 0x19, 0x0a, 0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45,
	0x51, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x88, 0x12, 0x12, 0x16, 0x0a, 0x11, 0x43,
	0x41, 0x43, 0x48, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x81, 0x08, 0x2a, 0xb1, 0x0d, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x47, 0x45,
	0x54, 0x10, 0x81, 0x04, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x52, 0x53, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x82, 0x04, 0x12, 0x1f, 0x0a,
	0x1a, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x83, 0x04, 0x12, 0x1b,
	0x0a, 0x16, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x53, 0x10, 0x84, 0x04, 0x12, 0x1e, 0x0a, 0x19, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x85, 0x04, 0x12, 0x21, 0x0a, 0x1c, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x86, 0x04, 0x12, 0x16,
	0x0a, 0x11, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x4c, 0x4f,
	0x47, 0x49, 0x4e, 0x10, 0x87, 0x04, 0x12, 0x17, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x10, 0x88, 0x04, 0x12,
	0x14, 0x0a, 0x0f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x10, 0x81, 0x06, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x53,
	0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x88, 0x06, 0x12, 0x15, 0x0a, 0x10, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10,
	0x81, 0x0a, 0x12, 0x15, 0x0a, 0x10, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x82, 0x0a, 0x12, 0x14, 0x0a, 0x0f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x83, 0x0a, 0x12,
	0x15, 0x0a, 0x10, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x84, 0x0a, 0x12, 0x13, 0x0a, 0x0e, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x52, 0x53, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x85, 0x0a, 0x12, 0x14, 0x0a, 0x0f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x86,
	0x0a, 0x12, 0x16, 0x0a, 0x11, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x55,
	0x4e, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x87, 0x0a, 0x12, 0x1b, 0x0a, 0x16, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x10, 0x88, 0x0a, 0x12, 0x19, 0x0a, 0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x52, 0x53, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x89,
	0x0a, 0x12, 0x1a, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x8a, 0x0a, 0x12, 0x22, 0x0a,
	0x1d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x8b,
	0x0a, 0x12, 0x14, 0x0a, 0x0f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x10, 0x8c, 0x0a, 0x12, 0x13, 0x0a, 0x0e, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x52, 0x53, 0x50, 0x5f, 0x4d, 0x55, 0x54, 0x45, 0x10, 0x8d, 0x0a, 0x12, 0x15, 0x0a, 0x10,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x55, 0x4e, 0x4d, 0x55, 0x54, 0x45,
	0x10, 0x8e, 0x0a, 0x12, 0x1b, 0x0a, 0x16, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50,
	0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x8f, 0x0a,
	0x12, 0x12, 0x0a, 0x0d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x50, 0x49,
	0x4e, 0x10, 0x90, 0x0a, 0x12, 0x14, 0x0a, 0x0f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53,
	0x50, 0x5f, 0x55, 0x4e, 0x50, 0x49, 0x4e, 0x10, 0x91, 0x0a, 0x12, 0x20, 0x0a, 0x1b, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x53, 0x45,
	0x43, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x92, 0x0a, 0x12, 0x21, 0x0a, 0x1c,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54,
	0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x93, 0x0a, 0x12,
	0x15, 0x0a, 0x10, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x4c, 0x4f, 0x47,
	0x4f, 0x55, 0x54, 0x10, 0x94, 0x0a, 0x12, 0x1a, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x52, 0x53, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10,
	0x95, 0x0a, 0x12, 0x18, 0x0a, 0x13, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f,
	0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x96, 0x0a, 0x12, 0x18, 0x0a, 0x13,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x10, 0x97, 0x0a, 0x12, 0x1b, 0x0a, 0x16, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x52, 0x53, 0x50, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x10, 0x98, 0x0a, 0x12, 0x13, 0x0a, 0x0e, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50,
	0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x99, 0x0a, 0x12, 0x21, 0x0a, 0x1c, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x43,
	0x52, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x9a, 0x0a, 0x12, 0x1b, 0x0a, 0x16, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x9b, 0x0a, 0x12, 0x1a, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x10, 0x9c, 0x0a, 0x12, 0x1c, 0x0a, 0x17, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53,
	0x50, 0x5f, 0x55, 0x4e, 0x50, 0x49, 0x4e, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x9d, 0x0a, 0x12, 0x22, 0x0a, 0x1d, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f,
	0x50, 0x49, 0x4e, 0x4e, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0x9e, 0x0a, 0x12, 0x18, 0x0a, 0x13, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x52, 0x53, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x9f, 0x0a,
	0x12, 0x18, 0x0a, 0x13, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x44, 0x45,
	0x4c, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0xa0, 0x0a, 0x12, 0x1e, 0x0a, 0x19, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xa1, 0x0a, 0x12, 0x19, 0x0a, 0x14, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x10, 0xa2, 0x0a, 0x12, 0x21, 0x0a, 0x1c, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52,
	0x53, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0xa3, 0x0a, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x81,
	0x0c, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x53, 0x50,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x82, 0x0c, 0x12, 0x17, 0x0a, 0x12, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x83, 0x0c, 0x12, 0x15, 0x0a, 0x10, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52,
	0x53, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x84, 0x0c, 0x12, 0x1e, 0x0a, 0x19, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x85, 0x0c, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x91, 0x0c, 0x12, 0x1e, 0x0a, 0x19, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x52, 0x53, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x10, 0x92, 0x0c, 0x12, 0x26, 0x0a, 0x21, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x52, 0x53, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48,
	0x45, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x93, 0x0c, 0x12, 0x18, 0x0a,
	0x13, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x76, 0x32, 0x10, 0x95, 0x0c, 0x12, 0x18, 0x0a, 0x13, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x81,
	0x12, 0x12, 0x19, 0x0a, 0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52,
	0x53, 0x50, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x82, 0x12, 0x12, 0x17, 0x0a, 0x12,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x4a, 0x4f,
	0x49, 0x4e, 0x10, 0x83, 0x12, 0x12, 0x18, 0x0a, 0x13, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x84, 0x12, 0x12,
	0x19, 0x0a, 0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x53, 0x50,
	0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x10, 0x85, 0x12, 0x12, 0x17, 0x0a, 0x12, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x50, 0x49, 0x4e, 0x47,
	0x10, 0x86, 0x12, 0x12, 0x17, 0x0a, 0x12, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x52, 0x53, 0x50, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x87, 0x12, 0x12, 0x19, 0x0a, 0x14,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x53, 0x50, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x88, 0x12, 0x2a, 0x96, 0x04, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x58, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x05,
	0x12, 0x22, 0x0a, 0x1e, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41,
	0x52, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54,
	0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x08,
	0x12, 0x25, 0x0a, 0x21, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x57, 0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x41, 0x50, 0x50, 0x49, 0x44, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x0c,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10,
	0x0d, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x0e, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x10, 0x12, 0x20,
	0x0a, 0x1c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x11,
	0x2a, 0x9b, 0x01, 0x0a, 0x11, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x54,
	0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x49, 0x4f, 0x53, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f,
	0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x57, 0x45, 0x42, 0x10, 0x03, 0x12, 0x1e,
	0x0a, 0x1a, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x49, 0x4f, 0x53, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x4b, 0x49, 0x54, 0x10, 0x04, 0x2a, 0xbc,
	0x01, 0x0a, 0x0c, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x14, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x4e, 0x4c,
	0x49, 0x4e, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x4c,
	0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12,
	0x15, 0x0a, 0x11, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x57, 0x41, 0x59, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x06, 0x2a, 0x9b, 0x01,
	0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59,
	0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x05, 0x2a, 0x50, 0x0a, 0x09, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x67, 0x0a,
	0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f,
	0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x41, 0x54, 0x10, 0x02, 0x2a, 0xad, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c,
	0x4f, 0x56, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x41, 0x48, 0x41, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x59, 0x41, 0x59,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x57, 0x4f, 0x57, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x41, 0x44, 0x10, 0x05, 0x12, 0x16,
	0x0a, 0x12, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41,
	0x4e, 0x47, 0x52, 0x59, 0x10, 0x06, 0x2a, 0xc4, 0x04, 0x0a, 0x12, 0x42, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x42,
	0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b,
	0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x25, 0x0a,
	0x21, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53,
	0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x04,
	0x12, 0x2b, 0x0a, 0x27, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f,
	0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x05, 0x12, 0x2b, 0x0a,
	0x27, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x43,
	0x52, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x52,
	0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10,
	0x07, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x08, 0x12, 0x29, 0x0a, 0x25, 0x42,
	0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x09, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43,
	0x41, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x0a, 0x12,
	0x28, 0x0a, 0x24, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x0b, 0x12, 0x29, 0x0a, 0x25, 0x42, 0x52, 0x4f,
	0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x49,
	0x54, 0x45, 0x10, 0x0c, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53,
	0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x0d, 0x2a, 0x96, 0x01,
	0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x2a, 0xce, 0x03, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x44,
	0x49, 0x4f, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x52,
	0x53, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x56,
	0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10,
	0x08, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x49, 0x43,
	0x4b, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x0d,
	0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x56, 0x45,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x10, 0x2a, 0xf7, 0x02, 0x0a, 0x14, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x1d, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43,
	0x41, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x03, 0x12, 0x28, 0x0a,
	0x24, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x2e, 0x0a, 0x2a, 0x42, 0x52, 0x4f, 0x41, 0x44,
	0x43, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29, 0x42, 0x52, 0x4f, 0x41, 0x44,
	0x43, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43,
	0x41, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f,
	0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x08, 0x2a, 0x74, 0x0a, 0x12, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x49, 0x56, 0x45, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x49, 0x56, 0x45, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x49, 0x56, 0x45,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x2a, 0x4f, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x02, 0x2a, 0x4d, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x2a, 0x9d, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f,
	0x4e, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x45, 0x4e, 0x10,
	0x04, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x2a, 0x64, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x6c, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x32, 0x50, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x02, 0x2a, 0x45, 0x0a,
	0x0a, 0x54, 0x79, 0x70, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x54,
	0x59, 0x50, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x59, 0x50, 0x45, 0x43, 0x41,
	0x4c, 0x4c, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x2a, 0x86, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x4e, 0x53, 0x57,
	0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x50, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x4e, 0x53,
	0x57, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x4e,
	0x53, 0x57, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x5e, 0x0a,
	0x0c, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x54, 0x4f, 0x50, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x50,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55,
	0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x4f, 0x50, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x10, 0x02, 0x2a, 0x48, 0x0a,
	0x07, 0x53, 0x64, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x44, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x44, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x44, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x5e, 0x0a, 0x0d, 0x43, 0x61, 0x6c, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xdc, 0x02, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x49,
	0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x05, 0x12,
	0x20, 0x0a, 0x1c, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10,
	0x06, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x08,
	0x12, 0x24, 0x0a, 0x20, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x2a, 0x5f, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x02, 0x2a, 0x6c, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x47,
	0x4f, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53,
	0x48, 0x45, 0x44, 0x10, 0x02, 0x42, 0x4e, 0x0a, 0x1b, 0x69, 0x6f, 0x2e, 0x73, 0x6e, 0x6f, 0x77,
	0x65, 0x6d, 0x2e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x69, 0x6d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x07, 0x49, 0x4d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x26, 0x6e,
	0x65, 0x74, 0x61, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x6e, 0x2f, 0x6e, 0x65, 0x74, 0x61, 0x63, 0x68,
	0x61, 0x74, 0x2f, 0x69, 0x6d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_voicechat_proto_rawDescOnce sync.Once
	file_voicechat_proto_rawDescData = file_voicechat_proto_rawDesc
)

func file_voicechat_proto_rawDescGZIP() []byte {
	file_voicechat_proto_rawDescOnce.Do(func() {
		file_voicechat_proto_rawDescData = protoimpl.X.CompressGZIP(file_voicechat_proto_rawDescData)
	})
	return file_voicechat_proto_rawDescData
}

var file_voicechat_proto_enumTypes = make([]protoimpl.EnumInfo, 26)
var file_voicechat_proto_msgTypes = make([]protoimpl.MessageInfo, 178)
var file_voicechat_proto_goTypes = []interface{}{
	(ChatRequestType)(0),               // 0: voicechat.ChatRequestType
	(ChatResponseType)(0),              // 1: voicechat.ChatResponseType
	(ErrorCode)(0),                     // 2: voicechat.ErrorCode
	(TokenPlatformType)(0),             // 3: voicechat.TokenPlatformType
	(OnlineStatus)(0),                  // 4: voicechat.OnlineStatus
	(GroupType)(0),                     // 5: voicechat.GroupType
	(GroupMode)(0),                     // 6: voicechat.GroupMode
	(GroupSortType)(0),                 // 7: voicechat.GroupSortType
	(ReactionCode)(0),                  // 8: voicechat.ReactionCode
	(BroadcastGroupType)(0),            // 9: voicechat.BroadcastGroupType
	(MessageStatus)(0),                 // 10: voicechat.MessageStatus
	(MessageType)(0),                   // 11: voicechat.MessageType
	(BroadcastMessageType)(0),          // 12: voicechat.BroadcastMessageType
	(LiveLocationStatus)(0),            // 13: voicechat.LiveLocationStatus
	(MediaType)(0),                     // 14: voicechat.MediaType
	(CallType)(0),                      // 15: voicechat.CallType
	(CallStatus)(0),                    // 16: voicechat.CallStatus
	(CallStreamType)(0),                // 17: voicechat.CallStreamType
	(TypeUpdate)(0),                    // 18: voicechat.TypeUpdate
	(CallAnswer)(0),                    // 19: voicechat.CallAnswer
	(StopCallType)(0),                  // 20: voicechat.StopCallType
	(SdpType)(0),                       // 21: voicechat.SdpType
	(CallEventType)(0),                 // 22: voicechat.CallEventType
	(EventType)(0),                     // 23: voicechat.EventType
	(GroupCallType)(0),                 // 24: voicechat.GroupCallType
	(GroupCallStatus)(0),               // 25: voicechat.GroupCallStatus
	(*ErrorMessage)(nil),               // 26: voicechat.ErrorMessage
	(*Header)(nil),                     // 27: voicechat.Header
	(*UserProfile)(nil),                // 28: voicechat.UserProfile
	(*GetProfileReq)(nil),              // 29: voicechat.GetProfileReq
	(*GetProfileResp)(nil),             // 30: voicechat.GetProfileResp
	(*UpdateProfileReq)(nil),           // 31: voicechat.UpdateProfileReq
	(*UpdateProfileResp)(nil),          // 32: voicechat.UpdateProfileResp
	(*RegisterProfileTokenReq)(nil),    // 33: voicechat.RegisterProfileTokenReq
	(*RegisterProfileTokenResp)(nil),   // 34: voicechat.RegisterProfileTokenResp
	(*UnregisterProfileTokenReq)(nil),  // 35: voicechat.UnregisterProfileTokenReq
	(*UnregisterProfileTokenResp)(nil), // 36: voicechat.UnregisterProfileTokenResp
	(*UserStatus)(nil),                 // 37: voicechat.UserStatus
	(*ChangeStatusReq)(nil),            // 38: voicechat.ChangeStatusReq
	(*ChangeStatusResp)(nil),           // 39: voicechat.ChangeStatusResp
	(*StatusUpdate)(nil),               // 40: voicechat.StatusUpdate
	(*IMC_Info)(nil),                   // 41: voicechat.IMC_Info
	(*StatusNotify)(nil),               // 42: voicechat.StatusNotify
	(*LoginReq)(nil),                   // 43: voicechat.LoginReq
	(*LoginResp)(nil),                  // 44: voicechat.LoginResp
	(*LogoutReq)(nil),                  // 45: voicechat.LogoutReq
	(*LogoutResp)(nil),                 // 46: voicechat.LogoutResp
	(*DeliveryInfo)(nil),               // 47: voicechat.DeliveryInfo
	(*SecretInfo)(nil),                 // 48: voicechat.SecretInfo
	(*PinnedMessage)(nil),              // 49: voicechat.PinnedMessage
	(*Location)(nil),                   // 50: voicechat.Location
	(*Group)(nil),                      // 51: voicechat.Group
	(*CreateGroupReq)(nil),             // 52: voicechat.CreateGroupReq
	(*CreateGroupResp)(nil),            // 53: voicechat.CreateGroupResp
	(*UpdateGroupReq)(nil),             // 54: voicechat.UpdateGroupReq
	(*UpdateGroupResp)(nil),            // 55: voicechat.UpdateGroupResp
	(*DeleteGroupReq)(nil),             // 56: voicechat.DeleteGroupReq
	(*DeleteGroupResp)(nil),            // 57: voicechat.DeleteGroupResp
	(*LeaveGroupReq)(nil),              // 58: voicechat.LeaveGroupReq
	(*LeaveGroupResp)(nil),             // 59: voicechat.LeaveGroupResp
	(*ListGroupReq)(nil),               // 60: voicechat.ListGroupReq
	(*ListGroupResp)(nil),              // 61: voicechat.ListGroupResp
	(*BlockGroupReq)(nil),              // 62: voicechat.BlockGroupReq
	(*BlockGroupResp)(nil),             // 63: voicechat.BlockGroupResp
	(*UnblockGroupReq)(nil),            // 64: voicechat.UnblockGroupReq
	(*UnblockGroupResp)(nil),           // 65: voicechat.UnblockGroupResp
	(*BlockedListGroupReq)(nil),        // 66: voicechat.BlockedListGroupReq
	(*BlockedInfo)(nil),                // 67: voicechat.BlockedInfo
	(*BlockedListGroupResp)(nil),       // 68: voicechat.BlockedListGroupResp
	(*LastMessageGroupReq)(nil),        // 69: voicechat.LastMessageGroupReq
	(*LastMessageGroupResp)(nil),       // 70: voicechat.LastMessageGroupResp
	(*GroupInfoReq)(nil),               // 71: voicechat.GroupInfoReq
	(*GroupInfoResp)(nil),              // 72: voicechat.GroupInfoResp
	(*GroupUserStatusReq)(nil),         // 73: voicechat.GroupUserStatusReq
	(*GroupUserStatusResp)(nil),        // 74: voicechat.GroupUserStatusResp
	(*DeleteConversationReq)(nil),      // 75: voicechat.DeleteConversationReq
	(*DeleteConversationResp)(nil),     // 76: voicechat.DeleteConversationResp
	(*CheckGroupReq)(nil),              // 77: voicechat.CheckGroupReq
	(*CheckGroupResp)(nil),             // 78: voicechat.CheckGroupResp
	(*MuteGroupReq)(nil),               // 79: voicechat.MuteGroupReq
	(*MuteGroupResp)(nil),              // 80: voicechat.MuteGroupResp
	(*UnmuteGroupReq)(nil),             // 81: voicechat.UnmuteGroupReq
	(*UnmuteGroupResp)(nil),            // 82: voicechat.UnmuteGroupResp
	(*NewRegisterGroupReq)(nil),        // 83: voicechat.NewRegisterGroupReq
	(*NewRegisterGroupResp)(nil),       // 84: voicechat.NewRegisterGroupResp
	(*PinGroupReq)(nil),                // 85: voicechat.PinGroupReq
	(*PinGroupResp)(nil),               // 86: voicechat.PinGroupResp
	(*UnpinGroupReq)(nil),              // 87: voicechat.UnpinGroupReq
	(*UnpinGroupResp)(nil),             // 88: voicechat.UnpinGroupResp
	(*StartSecretChatGroupReq)(nil),    // 89: voicechat.StartSecretChatGroupReq
	(*StartSecretChatGroupResp)(nil),   // 90: voicechat.StartSecretChatGroupResp
	(*LogoutGroupReq)(nil),             // 91: voicechat.LogoutGroupReq
	(*LogoutGroupResp)(nil),            // 92: voicechat.LogoutGroupResp
	(*AcceptSecretChatGroupReq)(nil),   // 93: voicechat.AcceptSecretChatGroupReq
	(*AcceptSecretChatGroupResp)(nil),  // 94: voicechat.AcceptSecretChatGroupResp
	(*DeleteSecretChatGroupReq)(nil),   // 95: voicechat.DeleteSecretChatGroupReq
	(*DeleteSecretChatGroupResp)(nil),  // 96: voicechat.DeleteSecretChatGroupResp
	(*CreateLinkGroupReq)(nil),         // 97: voicechat.CreateLinkGroupReq
	(*CreateLinkGroupResp)(nil),        // 98: voicechat.CreateLinkGroupResp
	(*JoinLinkGroupReq)(nil),           // 99: voicechat.JoinLinkGroupReq
	(*JoinLinkGroupResp)(nil),          // 100: voicechat.JoinLinkGroupResp
	(*ListLinkGroupReq)(nil),           // 101: voicechat.ListLinkGroupReq
	(*ListLinkGroupResp)(nil),          // 102: voicechat.ListLinkGroupResp
	(*DisableLinkGroupReq)(nil),        // 103: voicechat.DisableLinkGroupReq
	(*DisableLinkGroupResp)(nil),       // 104: voicechat.DisableLinkGroupResp
	(*LinkGroupInfoReq)(nil),           // 105: voicechat.LinkGroupInfoReq
	(*LinkGroupInfoResp)(nil),          // 106: voicechat.LinkGroupInfoResp
	(*SyncGroupReq)(nil),               // 107: voicechat.SyncGroupReq
	(*SyncGroupResp)(nil),              // 108: voicechat.SyncGroupResp
	(*MoveGroupReq)(nil),               // 109: voicechat.MoveGroupReq
	(*MoveGroupResp)(nil),              // 110: voicechat.MoveGroupResp
	(*PinMessageReq)(nil),              // 111: voicechat.PinMessageReq
	(*PinMessageResp)(nil),             // 112: voicechat.PinMessageResp
	(*UnpinMessageReq)(nil),            // 113: voicechat.UnpinMessageReq
	(*UnpinMessageResp)(nil),           // 114: voicechat.UnpinMessageResp
	(*ListPinnedMessageReq)(nil),       // 115: voicechat.ListPinnedMessageReq
	(*ListPinnedMessageResp)(nil),      // 116: voicechat.ListPinnedMessageResp
	(*ReactionItem)(nil),               // 117: voicechat.ReactionItem
	(*ReactionListItem)(nil),           // 118: voicechat.ReactionListItem
	(*Reaction)(nil),                   // 119: voicechat.Reaction
	(*BroadcastReactionItem)(nil),      // 120: voicechat.BroadcastReactionItem
	(*BroadcastReaction)(nil),          // 121: voicechat.BroadcastReaction
	(*ReactionReq)(nil),                // 122: voicechat.ReactionReq
	(*ReactionResp)(nil),               // 123: voicechat.ReactionResp
	(*ListReactionResp)(nil),           // 124: voicechat.ListReactionResp
	(*AddAdminGroupReq)(nil),           // 125: voicechat.AddAdminGroupReq
	(*AddAdminGroupResp)(nil),          // 126: voicechat.AddAdminGroupResp
	(*DeleteAdminGroupReq)(nil),        // 127: voicechat.DeleteAdminGroupReq
	(*DeleteAdminGroupResp)(nil),       // 128: voicechat.DeleteAdminGroupResp
	(*ListPendingGroupReq)(nil),        // 129: voicechat.ListPendingGroupReq
	(*ListPendingGroupResp)(nil),       // 130: voicechat.ListPendingGroupResp
	(*GroupUserStatus)(nil),            // 131: voicechat.GroupUserStatus
	(*UpdateGroup)(nil),                // 132: voicechat.UpdateGroup
	(*DeleteGroup)(nil),                // 133: voicechat.DeleteGroup
	(*NewRegistration)(nil),            // 134: voicechat.NewRegistration
	(*StartSecretChat)(nil),            // 135: voicechat.StartSecretChat
	(*AcceptSecretChat)(nil),           // 136: voicechat.AcceptSecretChat
	(*DeleteSecretChat)(nil),           // 137: voicechat.DeleteSecretChat
	(*JoinGroupCall)(nil),              // 138: voicechat.JoinGroupCall
	(*LeaveGroupCall)(nil),             // 139: voicechat.LeaveGroupCall
	(*InviteGroupCall)(nil),            // 140: voicechat.InviteGroupCall
	(*StopGroupCall)(nil),              // 141: voicechat.StopGroupCall
	(*BroadcastGroup)(nil),             // 142: voicechat.BroadcastGroup
	(*SeenInfo)(nil),                   // 143: voicechat.SeenInfo
	(*Message)(nil),                    // 144: voicechat.Message
	(*CreateMessageReq)(nil),           // 145: voicechat.CreateMessageReq
	(*CreateMessageResp)(nil),          // 146: voicechat.CreateMessageResp
	(*UpdateMessageReq)(nil),           // 147: voicechat.UpdateMessageReq
	(*UpdateMessageResp)(nil),          // 148: voicechat.UpdateMessageResp
	(*DeleteMessageReq)(nil),           // 149: voicechat.DeleteMessageReq
	(*DeleteMessageResp)(nil),          // 150: voicechat.DeleteMessageResp
	(*ListMessageReq)(nil),             // 151: voicechat.ListMessageReq
	(*ListMessageResp)(nil),            // 152: voicechat.ListMessageResp
	(*BroadcastMessage)(nil),           // 153: voicechat.BroadcastMessage
	(*LiveLocation)(nil),               // 154: voicechat.LiveLocation
	(*LiveLocationReq)(nil),            // 155: voicechat.LiveLocationReq
	(*LiveLocationResp)(nil),           // 156: voicechat.LiveLocationResp
	(*MultiLiveLocationReq)(nil),       // 157: voicechat.MultiLiveLocationReq
	(*MultiLiveLocationResp)(nil),      // 158: voicechat.MultiLiveLocationResp
	(*FCMInfo)(nil),                    // 159: voicechat.FCMInfo
	(*GetTokensReq)(nil),               // 160: voicechat.GetTokensReq
	(*GetTokensResp)(nil),              // 161: voicechat.GetTokensResp
	(*NotificationMessage)(nil),        // 162: voicechat.NotificationMessage
	(*DeviceNotificationMessage)(nil),  // 163: voicechat.DeviceNotificationMessage
	(*LoginNotificationMessage)(nil),   // 164: voicechat.LoginNotificationMessage
	(*Call)(nil),                       // 165: voicechat.Call
	(*CreateCallReq)(nil),              // 166: voicechat.CreateCallReq
	(*CreateCallResp)(nil),             // 167: voicechat.CreateCallResp
	(*CallCache)(nil),                  // 168: voicechat.CallCache
	(*StartCall)(nil),                  // 169: voicechat.StartCall
	(*AnswerCall)(nil),                 // 170: voicechat.AnswerCall
	(*StopCall)(nil),                   // 171: voicechat.StopCall
	(*CallIceSdp)(nil),                 // 172: voicechat.CallIceSdp
	(*CallIceCandidate)(nil),           // 173: voicechat.CallIceCandidate
	(*BroadcastCall)(nil),              // 174: voicechat.BroadcastCall
	(*CallStatusReq)(nil),              // 175: voicechat.CallStatusReq
	(*CallStatusResp)(nil),             // 176: voicechat.CallStatusResp
	(*CallEventMessage)(nil),           // 177: voicechat.CallEventMessage
	(*UserStatusEventMessage)(nil),     // 178: voicechat.UserStatusEventMessage
	(*EventMessage)(nil),               // 179: voicechat.EventMessage
	(*BroadcastEvent)(nil),             // 180: voicechat.BroadcastEvent
	(*JwtHeader)(nil),                  // 181: voicechat.JwtHeader
	(*JwtUser)(nil),                    // 182: voicechat.JwtUser
	(*JwtContext)(nil),                 // 183: voicechat.JwtContext
	(*JwtPayload)(nil),                 // 184: voicechat.JwtPayload
	(*GroupCall)(nil),                  // 185: voicechat.GroupCall
	(*StartGroupCallReq)(nil),          // 186: voicechat.StartGroupCallReq
	(*StartGroupCallResp)(nil),         // 187: voicechat.StartGroupCallResp
	(*CreateGroupCallReq)(nil),         // 188: voicechat.CreateGroupCallReq
	(*CreateGroupCallResp)(nil),        // 189: voicechat.CreateGroupCallResp
	(*JoinGroupCallReq)(nil),           // 190: voicechat.JoinGroupCallReq
	(*JoinGroupCallResp)(nil),          // 191: voicechat.JoinGroupCallResp
	(*LeaveGroupCallReq)(nil),          // 192: voicechat.LeaveGroupCallReq
	(*LeaveGroupCallResp)(nil),         // 193: voicechat.LeaveGroupCallResp
	(*InviteGroupCallReq)(nil),         // 194: voicechat.InviteGroupCallReq
	(*InviteGroupCallResp)(nil),        // 195: voicechat.InviteGroupCallResp
	(*PingGroupCallReq)(nil),           // 196: voicechat.PingGroupCallReq
	(*PingGroupCallResp)(nil),          // 197: voicechat.PingGroupCallResp
	(*StopGroupCallReq)(nil),           // 198: voicechat.StopGroupCallReq
	(*StopGroupCallResp)(nil),          // 199: voicechat.StopGroupCallResp
	(*GroupCallStatusReq)(nil),         // 200: voicechat.GroupCallStatusReq
	(*GroupCallStatusResp)(nil),        // 201: voicechat.GroupCallStatusResp
	nil,                                // 202: voicechat.Reaction.ReactionsEntry
	nil,                                // 203: voicechat.Reaction.UinsEntry
}
var file_voicechat_proto_depIdxs = []int32{
	2,   // 0: voicechat.ErrorMessage.error:type_name -> voicechat.ErrorCode
	27,  // 1: voicechat.GetProfileReq.header:type_name -> voicechat.Header
	27,  // 2: voicechat.GetProfileResp.header:type_name -> voicechat.Header
	2,   // 3: voicechat.GetProfileResp.result:type_name -> voicechat.ErrorCode
	28,  // 4: voicechat.GetProfileResp.user_profile:type_name -> voicechat.UserProfile
	27,  // 5: voicechat.UpdateProfileReq.header:type_name -> voicechat.Header
	28,  // 6: voicechat.UpdateProfileReq.user_profile:type_name -> voicechat.UserProfile
	27,  // 7: voicechat.UpdateProfileResp.header:type_name -> voicechat.Header
	2,   // 8: voicechat.UpdateProfileResp.result:type_name -> voicechat.ErrorCode
	28,  // 9: voicechat.UpdateProfileResp.user_profile:type_name -> voicechat.UserProfile
	27,  // 10: voicechat.RegisterProfileTokenReq.header:type_name -> voicechat.Header
	3,   // 11: voicechat.RegisterProfileTokenReq.type:type_name -> voicechat.TokenPlatformType
	27,  // 12: voicechat.RegisterProfileTokenResp.header:type_name -> voicechat.Header
	2,   // 13: voicechat.RegisterProfileTokenResp.result:type_name -> voicechat.ErrorCode
	3,   // 14: voicechat.RegisterProfileTokenResp.type:type_name -> voicechat.TokenPlatformType
	27,  // 15: voicechat.UnregisterProfileTokenReq.header:type_name -> voicechat.Header
	27,  // 16: voicechat.UnregisterProfileTokenResp.header:type_name -> voicechat.Header
	2,   // 17: voicechat.UnregisterProfileTokenResp.result:type_name -> voicechat.ErrorCode
	4,   // 18: voicechat.UserStatus.online_status:type_name -> voicechat.OnlineStatus
	27,  // 19: voicechat.ChangeStatusReq.header:type_name -> voicechat.Header
	37,  // 20: voicechat.ChangeStatusReq.user_status:type_name -> voicechat.UserStatus
	27,  // 21: voicechat.ChangeStatusResp.header:type_name -> voicechat.Header
	37,  // 22: voicechat.ChangeStatusResp.user_status:type_name -> voicechat.UserStatus
	27,  // 23: voicechat.StatusUpdate.header:type_name -> voicechat.Header
	37,  // 24: voicechat.StatusUpdate.user_status:type_name -> voicechat.UserStatus
	27,  // 25: voicechat.StatusNotify.header:type_name -> voicechat.Header
	37,  // 26: voicechat.StatusNotify.user_status:type_name -> voicechat.UserStatus
	41,  // 27: voicechat.StatusNotify.imc_info:type_name -> voicechat.IMC_Info
	27,  // 28: voicechat.LoginReq.header:type_name -> voicechat.Header
	4,   // 29: voicechat.LoginReq.login_status:type_name -> voicechat.OnlineStatus
	27,  // 30: voicechat.LoginResp.header:type_name -> voicechat.Header
	2,   // 31: voicechat.LoginResp.result:type_name -> voicechat.ErrorCode
	37,  // 32: voicechat.LoginResp.user_status:type_name -> voicechat.UserStatus
	27,  // 33: voicechat.LogoutReq.header:type_name -> voicechat.Header
	27,  // 34: voicechat.LogoutResp.header:type_name -> voicechat.Header
	2,   // 35: voicechat.LogoutResp.result:type_name -> voicechat.ErrorCode
	5,   // 36: voicechat.Group.type:type_name -> voicechat.GroupType
	6,   // 37: voicechat.Group.mode:type_name -> voicechat.GroupMode
	50,  // 38: voicechat.Group.locations:type_name -> voicechat.Location
	47,  // 39: voicechat.Group.last_active_messages:type_name -> voicechat.DeliveryInfo
	48,  // 40: voicechat.Group.secrets:type_name -> voicechat.SecretInfo
	49,  // 41: voicechat.Group.pinned_messages:type_name -> voicechat.PinnedMessage
	144, // 42: voicechat.Group.last_message:type_name -> voicechat.Message
	47,  // 43: voicechat.Group.received_list:type_name -> voicechat.DeliveryInfo
	47,  // 44: voicechat.Group.seen_list:type_name -> voicechat.DeliveryInfo
	37,  // 45: voicechat.Group.status_list:type_name -> voicechat.UserStatus
	155, // 46: voicechat.Group.last_sos_messages:type_name -> voicechat.LiveLocationReq
	185, // 47: voicechat.Group.current_groupcall:type_name -> voicechat.GroupCall
	27,  // 48: voicechat.CreateGroupReq.header:type_name -> voicechat.Header
	5,   // 49: voicechat.CreateGroupReq.type:type_name -> voicechat.GroupType
	6,   // 50: voicechat.CreateGroupReq.mode:type_name -> voicechat.GroupMode
	27,  // 51: voicechat.CreateGroupResp.header:type_name -> voicechat.Header
	2,   // 52: voicechat.CreateGroupResp.result:type_name -> voicechat.ErrorCode
	51,  // 53: voicechat.CreateGroupResp.group:type_name -> voicechat.Group
	27,  // 54: voicechat.UpdateGroupReq.header:type_name -> voicechat.Header
	6,   // 55: voicechat.UpdateGroupReq.mode:type_name -> voicechat.GroupMode
	27,  // 56: voicechat.UpdateGroupResp.header:type_name -> voicechat.Header
	2,   // 57: voicechat.UpdateGroupResp.result:type_name -> voicechat.ErrorCode
	51,  // 58: voicechat.UpdateGroupResp.group:type_name -> voicechat.Group
	27,  // 59: voicechat.DeleteGroupReq.header:type_name -> voicechat.Header
	27,  // 60: voicechat.DeleteGroupResp.header:type_name -> voicechat.Header
	2,   // 61: voicechat.DeleteGroupResp.result:type_name -> voicechat.ErrorCode
	27,  // 62: voicechat.LeaveGroupReq.header:type_name -> voicechat.Header
	27,  // 63: voicechat.LeaveGroupResp.header:type_name -> voicechat.Header
	2,   // 64: voicechat.LeaveGroupResp.result:type_name -> voicechat.ErrorCode
	27,  // 65: voicechat.ListGroupReq.header:type_name -> voicechat.Header
	7,   // 66: voicechat.ListGroupReq.sort_by:type_name -> voicechat.GroupSortType
	27,  // 67: voicechat.ListGroupResp.header:type_name -> voicechat.Header
	2,   // 68: voicechat.ListGroupResp.result:type_name -> voicechat.ErrorCode
	51,  // 69: voicechat.ListGroupResp.groups:type_name -> voicechat.Group
	27,  // 70: voicechat.BlockGroupReq.header:type_name -> voicechat.Header
	27,  // 71: voicechat.BlockGroupResp.header:type_name -> voicechat.Header
	2,   // 72: voicechat.BlockGroupResp.result:type_name -> voicechat.ErrorCode
	27,  // 73: voicechat.UnblockGroupReq.header:type_name -> voicechat.Header
	27,  // 74: voicechat.UnblockGroupResp.header:type_name -> voicechat.Header
	2,   // 75: voicechat.UnblockGroupResp.result:type_name -> voicechat.ErrorCode
	27,  // 76: voicechat.BlockedListGroupReq.header:type_name -> voicechat.Header
	27,  // 77: voicechat.BlockedListGroupResp.header:type_name -> voicechat.Header
	2,   // 78: voicechat.BlockedListGroupResp.result:type_name -> voicechat.ErrorCode
	67,  // 79: voicechat.BlockedListGroupResp.list:type_name -> voicechat.BlockedInfo
	27,  // 80: voicechat.LastMessageGroupReq.header:type_name -> voicechat.Header
	27,  // 81: voicechat.LastMessageGroupResp.header:type_name -> voicechat.Header
	2,   // 82: voicechat.LastMessageGroupResp.result:type_name -> voicechat.ErrorCode
	144, // 83: voicechat.LastMessageGroupResp.message:type_name -> voicechat.Message
	27,  // 84: voicechat.GroupInfoReq.header:type_name -> voicechat.Header
	27,  // 85: voicechat.GroupInfoResp.header:type_name -> voicechat.Header
	2,   // 86: voicechat.GroupInfoResp.result:type_name -> voicechat.ErrorCode
	51,  // 87: voicechat.GroupInfoResp.group:type_name -> voicechat.Group
	27,  // 88: voicechat.GroupUserStatusReq.header:type_name -> voicechat.Header
	27,  // 89: voicechat.GroupUserStatusResp.header:type_name -> voicechat.Header
	2,   // 90: voicechat.GroupUserStatusResp.result:type_name -> voicechat.ErrorCode
	37,  // 91: voicechat.GroupUserStatusResp.status_list:type_name -> voicechat.UserStatus
	27,  // 92: voicechat.DeleteConversationReq.header:type_name -> voicechat.Header
	27,  // 93: voicechat.DeleteConversationResp.header:type_name -> voicechat.Header
	2,   // 94: voicechat.DeleteConversationResp.result:type_name -> voicechat.ErrorCode
	27,  // 95: voicechat.CheckGroupReq.header:type_name -> voicechat.Header
	5,   // 96: voicechat.CheckGroupReq.type:type_name -> voicechat.GroupType
	27,  // 97: voicechat.CheckGroupResp.header:type_name -> voicechat.Header
	2,   // 98: voicechat.CheckGroupResp.result:type_name -> voicechat.ErrorCode
	51,  // 99: voicechat.CheckGroupResp.group:type_name -> voicechat.Group
	27,  // 100: voicechat.MuteGroupReq.header:type_name -> voicechat.Header
	27,  // 101: voicechat.MuteGroupResp.header:type_name -> voicechat.Header
	2,   // 102: voicechat.MuteGroupResp.result:type_name -> voicechat.ErrorCode
	27,  // 103: voicechat.UnmuteGroupReq.header:type_name -> voicechat.Header
	27,  // 104: voicechat.UnmuteGroupResp.header:type_name -> voicechat.Header
	2,   // 105: voicechat.UnmuteGroupResp.result:type_name -> voicechat.ErrorCode
	27,  // 106: voicechat.NewRegisterGroupReq.header:type_name -> voicechat.Header
	27,  // 107: voicechat.NewRegisterGroupResp.header:type_name -> voicechat.Header
	2,   // 108: voicechat.NewRegisterGroupResp.result:type_name -> voicechat.ErrorCode
	27,  // 109: voicechat.PinGroupReq.header:type_name -> voicechat.Header
	27,  // 110: voicechat.PinGroupResp.header:type_name -> voicechat.Header
	2,   // 111: voicechat.PinGroupResp.result:type_name -> voicechat.ErrorCode
	27,  // 112: voicechat.UnpinGroupReq.header:type_name -> voicechat.Header
	27,  // 113: voicechat.UnpinGroupResp.header:type_name -> voicechat.Header
	2,   // 114: voicechat.UnpinGroupResp.result:type_name -> voicechat.ErrorCode
	27,  // 115: voicechat.StartSecretChatGroupReq.header:type_name -> voicechat.Header
	27,  // 116: voicechat.StartSecretChatGroupResp.header:type_name -> voicechat.Header
	2,   // 117: voicechat.StartSecretChatGroupResp.result:type_name -> voicechat.ErrorCode
	51,  // 118: voicechat.StartSecretChatGroupResp.group:type_name -> voicechat.Group
	27,  // 119: voicechat.LogoutGroupReq.header:type_name -> voicechat.Header
	27,  // 120: voicechat.LogoutGroupResp.header:type_name -> voicechat.Header
	2,   // 121: voicechat.LogoutGroupResp.result:type_name -> voicechat.ErrorCode
	27,  // 122: voicechat.AcceptSecretChatGroupReq.header:type_name -> voicechat.Header
	27,  // 123: voicechat.AcceptSecretChatGroupResp.header:type_name -> voicechat.Header
	2,   // 124: voicechat.AcceptSecretChatGroupResp.result:type_name -> voicechat.ErrorCode
	51,  // 125: voicechat.AcceptSecretChatGroupResp.group:type_name -> voicechat.Group
	27,  // 126: voicechat.DeleteSecretChatGroupReq.header:type_name -> voicechat.Header
	27,  // 127: voicechat.DeleteSecretChatGroupResp.header:type_name -> voicechat.Header
	2,   // 128: voicechat.DeleteSecretChatGroupResp.result:type_name -> voicechat.ErrorCode
	27,  // 129: voicechat.CreateLinkGroupReq.header:type_name -> voicechat.Header
	27,  // 130: voicechat.CreateLinkGroupResp.header:type_name -> voicechat.Header
	2,   // 131: voicechat.CreateLinkGroupResp.result:type_name -> voicechat.ErrorCode
	27,  // 132: voicechat.JoinLinkGroupReq.header:type_name -> voicechat.Header
	27,  // 133: voicechat.JoinLinkGroupResp.header:type_name -> voicechat.Header
	2,   // 134: voicechat.JoinLinkGroupResp.result:type_name -> voicechat.ErrorCode
	51,  // 135: voicechat.JoinLinkGroupResp.group:type_name -> voicechat.Group
	27,  // 136: voicechat.ListLinkGroupReq.header:type_name -> voicechat.Header
	27,  // 137: voicechat.ListLinkGroupResp.header:type_name -> voicechat.Header
	2,   // 138: voicechat.ListLinkGroupResp.result:type_name -> voicechat.ErrorCode
	27,  // 139: voicechat.DisableLinkGroupReq.header:type_name -> voicechat.Header
	27,  // 140: voicechat.DisableLinkGroupResp.header:type_name -> voicechat.Header
	2,   // 141: voicechat.DisableLinkGroupResp.result:type_name -> voicechat.ErrorCode
	27,  // 142: voicechat.LinkGroupInfoReq.header:type_name -> voicechat.Header
	27,  // 143: voicechat.LinkGroupInfoResp.header:type_name -> voicechat.Header
	2,   // 144: voicechat.LinkGroupInfoResp.result:type_name -> voicechat.ErrorCode
	51,  // 145: voicechat.LinkGroupInfoResp.group:type_name -> voicechat.Group
	27,  // 146: voicechat.SyncGroupReq.header:type_name -> voicechat.Header
	27,  // 147: voicechat.SyncGroupResp.header:type_name -> voicechat.Header
	2,   // 148: voicechat.SyncGroupResp.result:type_name -> voicechat.ErrorCode
	51,  // 149: voicechat.SyncGroupResp.updated_list:type_name -> voicechat.Group
	51,  // 150: voicechat.SyncGroupResp.added_list:type_name -> voicechat.Group
	51,  // 151: voicechat.SyncGroupResp.deleted_list:type_name -> voicechat.Group
	27,  // 152: voicechat.MoveGroupReq.header:type_name -> voicechat.Header
	27,  // 153: voicechat.MoveGroupResp.header:type_name -> voicechat.Header
	2,   // 154: voicechat.MoveGroupResp.result:type_name -> voicechat.ErrorCode
	51,  // 155: voicechat.MoveGroupResp.group:type_name -> voicechat.Group
	27,  // 156: voicechat.PinMessageReq.header:type_name -> voicechat.Header
	27,  // 157: voicechat.PinMessageResp.header:type_name -> voicechat.Header
	2,   // 158: voicechat.PinMessageResp.result:type_name -> voicechat.ErrorCode
	27,  // 159: voicechat.UnpinMessageReq.header:type_name -> voicechat.Header
	27,  // 160: voicechat.UnpinMessageResp.header:type_name -> voicechat.Header
	2,   // 161: voicechat.UnpinMessageResp.result:type_name -> voicechat.ErrorCode
	27,  // 162: voicechat.ListPinnedMessageReq.header:type_name -> voicechat.Header
	27,  // 163: voicechat.ListPinnedMessageResp.header:type_name -> voicechat.Header
	2,   // 164: voicechat.ListPinnedMessageResp.result:type_name -> voicechat.ErrorCode
	144, // 165: voicechat.ListPinnedMessageResp.messages:type_name -> voicechat.Message
	8,   // 166: voicechat.ReactionItem.type:type_name -> voicechat.ReactionCode
	8,   // 167: voicechat.ReactionListItem.type:type_name -> voicechat.ReactionCode
	202, // 168: voicechat.Reaction.reactions:type_name -> voicechat.Reaction.ReactionsEntry
	203, // 169: voicechat.Reaction.uins:type_name -> voicechat.Reaction.UinsEntry
	117, // 170: voicechat.BroadcastReactionItem.reactions:type_name -> voicechat.ReactionItem
	27,  // 171: voicechat.BroadcastReaction.header:type_name -> voicechat.Header
	12,  // 172: voicechat.BroadcastReaction.type:type_name -> voicechat.BroadcastMessageType
	5,   // 173: voicechat.BroadcastReaction.group_type:type_name -> voicechat.GroupType
	27,  // 174: voicechat.BroadcastReaction.recipient_infos:type_name -> voicechat.Header
	120, // 175: voicechat.BroadcastReaction.message:type_name -> voicechat.BroadcastReactionItem
	27,  // 176: voicechat.ReactionReq.header:type_name -> voicechat.Header
	27,  // 177: voicechat.ReactionResp.header:type_name -> voicechat.Header
	2,   // 178: voicechat.ReactionResp.result:type_name -> voicechat.ErrorCode
	117, // 179: voicechat.ReactionResp.reactions:type_name -> voicechat.ReactionItem
	27,  // 180: voicechat.ListReactionResp.header:type_name -> voicechat.Header
	2,   // 181: voicechat.ListReactionResp.result:type_name -> voicechat.ErrorCode
	118, // 182: voicechat.ListReactionResp.reactions:type_name -> voicechat.ReactionListItem
	27,  // 183: voicechat.AddAdminGroupReq.header:type_name -> voicechat.Header
	27,  // 184: voicechat.AddAdminGroupResp.header:type_name -> voicechat.Header
	2,   // 185: voicechat.AddAdminGroupResp.result:type_name -> voicechat.ErrorCode
	27,  // 186: voicechat.DeleteAdminGroupReq.header:type_name -> voicechat.Header
	27,  // 187: voicechat.DeleteAdminGroupResp.header:type_name -> voicechat.Header
	2,   // 188: voicechat.DeleteAdminGroupResp.result:type_name -> voicechat.ErrorCode
	27,  // 189: voicechat.ListPendingGroupReq.header:type_name -> voicechat.Header
	27,  // 190: voicechat.ListPendingGroupResp.header:type_name -> voicechat.Header
	2,   // 191: voicechat.ListPendingGroupResp.result:type_name -> voicechat.ErrorCode
	51,  // 192: voicechat.ListPendingGroupResp.groups:type_name -> voicechat.Group
	27,  // 193: voicechat.GroupUserStatus.header:type_name -> voicechat.Header
	4,   // 194: voicechat.GroupUserStatus.status:type_name -> voicechat.OnlineStatus
	6,   // 195: voicechat.UpdateGroup.mode:type_name -> voicechat.GroupMode
	144, // 196: voicechat.UpdateGroup.pinned_message:type_name -> voicechat.Message
	144, // 197: voicechat.UpdateGroup.unpinned_message_all:type_name -> voicechat.Message
	185, // 198: voicechat.UpdateGroup.groupcall:type_name -> voicechat.GroupCall
	24,  // 199: voicechat.InviteGroupCall.type:type_name -> voicechat.GroupCallType
	27,  // 200: voicechat.BroadcastGroup.header:type_name -> voicechat.Header
	5,   // 201: voicechat.BroadcastGroup.group_type:type_name -> voicechat.GroupType
	9,   // 202: voicechat.BroadcastGroup.type:type_name -> voicechat.BroadcastGroupType
	27,  // 203: voicechat.BroadcastGroup.recipient_infos:type_name -> voicechat.Header
	51,  // 204: voicechat.BroadcastGroup.group:type_name -> voicechat.Group
	132, // 205: voicechat.BroadcastGroup.update:type_name -> voicechat.UpdateGroup
	133, // 206: voicechat.BroadcastGroup.delete:type_name -> voicechat.DeleteGroup
	134, // 207: voicechat.BroadcastGroup.registration:type_name -> voicechat.NewRegistration
	135, // 208: voicechat.BroadcastGroup.start_secret_chat:type_name -> voicechat.StartSecretChat
	136, // 209: voicechat.BroadcastGroup.accept_secret_chat:type_name -> voicechat.AcceptSecretChat
	137, // 210: voicechat.BroadcastGroup.delete_secret_chat:type_name -> voicechat.DeleteSecretChat
	185, // 211: voicechat.BroadcastGroup.start_groupcall:type_name -> voicechat.GroupCall
	185, // 212: voicechat.BroadcastGroup.create_groupcall:type_name -> voicechat.GroupCall
	138, // 213: voicechat.BroadcastGroup.join_groupcall:type_name -> voicechat.JoinGroupCall
	139, // 214: voicechat.BroadcastGroup.leave_groupcall:type_name -> voicechat.LeaveGroupCall
	140, // 215: voicechat.BroadcastGroup.invite_groupcall:type_name -> voicechat.InviteGroupCall
	141, // 216: voicechat.BroadcastGroup.stop_groupcall:type_name -> voicechat.StopGroupCall
	10,  // 217: voicechat.Message.status:type_name -> voicechat.MessageStatus
	11,  // 218: voicechat.Message.type:type_name -> voicechat.MessageType
	5,   // 219: voicechat.Message.group_type:type_name -> voicechat.GroupType
	143, // 220: voicechat.Message.seen_infos:type_name -> voicechat.SeenInfo
	117, // 221: voicechat.Message.reactions:type_name -> voicechat.ReactionItem
	27,  // 222: voicechat.CreateMessageReq.header:type_name -> voicechat.Header
	11,  // 223: voicechat.CreateMessageReq.type:type_name -> voicechat.MessageType
	27,  // 224: voicechat.CreateMessageResp.header:type_name -> voicechat.Header
	2,   // 225: voicechat.CreateMessageResp.result:type_name -> voicechat.ErrorCode
	144, // 226: voicechat.CreateMessageResp.message:type_name -> voicechat.Message
	27,  // 227: voicechat.UpdateMessageReq.header:type_name -> voicechat.Header
	10,  // 228: voicechat.UpdateMessageReq.status:type_name -> voicechat.MessageStatus
	27,  // 229: voicechat.UpdateMessageResp.header:type_name -> voicechat.Header
	2,   // 230: voicechat.UpdateMessageResp.result:type_name -> voicechat.ErrorCode
	144, // 231: voicechat.UpdateMessageResp.message:type_name -> voicechat.Message
	27,  // 232: voicechat.DeleteMessageReq.header:type_name -> voicechat.Header
	27,  // 233: voicechat.DeleteMessageResp.header:type_name -> voicechat.Header
	2,   // 234: voicechat.DeleteMessageResp.result:type_name -> voicechat.ErrorCode
	27,  // 235: voicechat.ListMessageReq.header:type_name -> voicechat.Header
	27,  // 236: voicechat.ListMessageResp.header:type_name -> voicechat.Header
	2,   // 237: voicechat.ListMessageResp.result:type_name -> voicechat.ErrorCode
	144, // 238: voicechat.ListMessageResp.messages:type_name -> voicechat.Message
	27,  // 239: voicechat.BroadcastMessage.header:type_name -> voicechat.Header
	5,   // 240: voicechat.BroadcastMessage.group_type:type_name -> voicechat.GroupType
	12,  // 241: voicechat.BroadcastMessage.type:type_name -> voicechat.BroadcastMessageType
	144, // 242: voicechat.BroadcastMessage.message:type_name -> voicechat.Message
	27,  // 243: voicechat.BroadcastMessage.recipient_infos:type_name -> voicechat.Header
	13,  // 244: voicechat.LiveLocation.status:type_name -> voicechat.LiveLocationStatus
	27,  // 245: voicechat.LiveLocationReq.header:type_name -> voicechat.Header
	13,  // 246: voicechat.LiveLocationReq.status:type_name -> voicechat.LiveLocationStatus
	27,  // 247: voicechat.LiveLocationResp.header:type_name -> voicechat.Header
	2,   // 248: voicechat.LiveLocationResp.result:type_name -> voicechat.ErrorCode
	144, // 249: voicechat.LiveLocationResp.message:type_name -> voicechat.Message
	27,  // 250: voicechat.MultiLiveLocationReq.header:type_name -> voicechat.Header
	154, // 251: voicechat.MultiLiveLocationReq.live_locations:type_name -> voicechat.LiveLocation
	27,  // 252: voicechat.MultiLiveLocationResp.header:type_name -> voicechat.Header
	2,   // 253: voicechat.MultiLiveLocationResp.result:type_name -> voicechat.ErrorCode
	3,   // 254: voicechat.FCMInfo.type:type_name -> voicechat.TokenPlatformType
	27,  // 255: voicechat.GetTokensReq.header:type_name -> voicechat.Header
	144, // 256: voicechat.GetTokensReq.message:type_name -> voicechat.Message
	169, // 257: voicechat.GetTokensReq.start_call:type_name -> voicechat.StartCall
	134, // 258: voicechat.GetTokensReq.registration:type_name -> voicechat.NewRegistration
	27,  // 259: voicechat.GetTokensResp.header:type_name -> voicechat.Header
	2,   // 260: voicechat.GetTokensResp.result:type_name -> voicechat.ErrorCode
	159, // 261: voicechat.GetTokensResp.recipients:type_name -> voicechat.FCMInfo
	144, // 262: voicechat.GetTokensResp.message:type_name -> voicechat.Message
	169, // 263: voicechat.GetTokensResp.start_call:type_name -> voicechat.StartCall
	134, // 264: voicechat.GetTokensResp.registration:type_name -> voicechat.NewRegistration
	27,  // 265: voicechat.NotificationMessage.header:type_name -> voicechat.Header
	159, // 266: voicechat.NotificationMessage.recipients:type_name -> voicechat.FCMInfo
	144, // 267: voicechat.NotificationMessage.message:type_name -> voicechat.Message
	169, // 268: voicechat.NotificationMessage.start_call:type_name -> voicechat.StartCall
	134, // 269: voicechat.NotificationMessage.registration:type_name -> voicechat.NewRegistration
	185, // 270: voicechat.NotificationMessage.create_groupcall:type_name -> voicechat.GroupCall
	140, // 271: voicechat.NotificationMessage.invite_groupcall:type_name -> voicechat.InviteGroupCall
	120, // 272: voicechat.NotificationMessage.reaction:type_name -> voicechat.BroadcastReactionItem
	27,  // 273: voicechat.DeviceNotificationMessage.header:type_name -> voicechat.Header
	144, // 274: voicechat.DeviceNotificationMessage.message:type_name -> voicechat.Message
	135, // 275: voicechat.DeviceNotificationMessage.start_secret_chat:type_name -> voicechat.StartSecretChat
	136, // 276: voicechat.DeviceNotificationMessage.accept_secret_chat:type_name -> voicechat.AcceptSecretChat
	137, // 277: voicechat.DeviceNotificationMessage.delete_secret_chat:type_name -> voicechat.DeleteSecretChat
	27,  // 278: voicechat.LoginNotificationMessage.header:type_name -> voicechat.Header
	15,  // 279: voicechat.Call.call_type:type_name -> voicechat.CallType
	14,  // 280: voicechat.Call.media_type:type_name -> voicechat.MediaType
	16,  // 281: voicechat.Call.call_status:type_name -> voicechat.CallStatus
	17,  // 282: voicechat.Call.stream_type:type_name -> voicechat.CallStreamType
	5,   // 283: voicechat.Call.group_type:type_name -> voicechat.GroupType
	27,  // 284: voicechat.CreateCallReq.header:type_name -> voicechat.Header
	15,  // 285: voicechat.CreateCallReq.call_type:type_name -> voicechat.CallType
	14,  // 286: voicechat.CreateCallReq.media_type:type_name -> voicechat.MediaType
	27,  // 287: voicechat.CreateCallResp.header:type_name -> voicechat.Header
	2,   // 288: voicechat.CreateCallResp.result:type_name -> voicechat.ErrorCode
	165, // 289: voicechat.CreateCallResp.call:type_name -> voicechat.Call
	18,  // 290: voicechat.CallCache.type_update:type_name -> voicechat.TypeUpdate
	165, // 291: voicechat.CallCache.call:type_name -> voicechat.Call
	27,  // 292: voicechat.StartCall.header:type_name -> voicechat.Header
	165, // 293: voicechat.StartCall.call:type_name -> voicechat.Call
	27,  // 294: voicechat.AnswerCall.header:type_name -> voicechat.Header
	19,  // 295: voicechat.AnswerCall.answer:type_name -> voicechat.CallAnswer
	27,  // 296: voicechat.StopCall.header:type_name -> voicechat.Header
	20,  // 297: voicechat.StopCall.type:type_name -> voicechat.StopCallType
	27,  // 298: voicechat.CallIceSdp.header:type_name -> voicechat.Header
	21,  // 299: voicechat.CallIceSdp.type:type_name -> voicechat.SdpType
	27,  // 300: voicechat.CallIceCandidate.header:type_name -> voicechat.Header
	27,  // 301: voicechat.BroadcastCall.header:type_name -> voicechat.Header
	169, // 302: voicechat.BroadcastCall.start:type_name -> voicechat.StartCall
	170, // 303: voicechat.BroadcastCall.answer:type_name -> voicechat.AnswerCall
	171, // 304: voicechat.BroadcastCall.stop:type_name -> voicechat.StopCall
	172, // 305: voicechat.BroadcastCall.sdp:type_name -> voicechat.CallIceSdp
	173, // 306: voicechat.BroadcastCall.candidate:type_name -> voicechat.CallIceCandidate
	27,  // 307: voicechat.CallStatusReq.header:type_name -> voicechat.Header
	27,  // 308: voicechat.CallStatusResp.header:type_name -> voicechat.Header
	2,   // 309: voicechat.CallStatusResp.result:type_name -> voicechat.ErrorCode
	16,  // 310: voicechat.CallStatusResp.status:type_name -> voicechat.CallStatus
	27,  // 311: voicechat.CallEventMessage.header:type_name -> voicechat.Header
	22,  // 312: voicechat.CallEventMessage.event:type_name -> voicechat.CallEventType
	17,  // 313: voicechat.CallEventMessage.stream_type:type_name -> voicechat.CallStreamType
	27,  // 314: voicechat.UserStatusEventMessage.header:type_name -> voicechat.Header
	27,  // 315: voicechat.EventMessage.header:type_name -> voicechat.Header
	23,  // 316: voicechat.EventMessage.type:type_name -> voicechat.EventType
	27,  // 317: voicechat.BroadcastEvent.header:type_name -> voicechat.Header
	179, // 318: voicechat.BroadcastEvent.event:type_name -> voicechat.EventMessage
	182, // 319: voicechat.JwtContext.user:type_name -> voicechat.JwtUser
	183, // 320: voicechat.JwtPayload.context:type_name -> voicechat.JwtContext
	24,  // 321: voicechat.GroupCall.type:type_name -> voicechat.GroupCallType
	25,  // 322: voicechat.GroupCall.status:type_name -> voicechat.GroupCallStatus
	27,  // 323: voicechat.StartGroupCallReq.header:type_name -> voicechat.Header
	185, // 324: voicechat.StartGroupCallReq.groupcall:type_name -> voicechat.GroupCall
	27,  // 325: voicechat.StartGroupCallResp.header:type_name -> voicechat.Header
	2,   // 326: voicechat.StartGroupCallResp.result:type_name -> voicechat.ErrorCode
	185, // 327: voicechat.StartGroupCallResp.groupcall:type_name -> voicechat.GroupCall
	27,  // 328: voicechat.CreateGroupCallReq.header:type_name -> voicechat.Header
	24,  // 329: voicechat.CreateGroupCallReq.type:type_name -> voicechat.GroupCallType
	185, // 330: voicechat.CreateGroupCallReq.groupcall:type_name -> voicechat.GroupCall
	27,  // 331: voicechat.CreateGroupCallResp.header:type_name -> voicechat.Header
	2,   // 332: voicechat.CreateGroupCallResp.result:type_name -> voicechat.ErrorCode
	185, // 333: voicechat.CreateGroupCallResp.groupcall:type_name -> voicechat.GroupCall
	27,  // 334: voicechat.JoinGroupCallReq.header:type_name -> voicechat.Header
	27,  // 335: voicechat.JoinGroupCallResp.header:type_name -> voicechat.Header
	2,   // 336: voicechat.JoinGroupCallResp.result:type_name -> voicechat.ErrorCode
	27,  // 337: voicechat.LeaveGroupCallReq.header:type_name -> voicechat.Header
	27,  // 338: voicechat.LeaveGroupCallResp.header:type_name -> voicechat.Header
	2,   // 339: voicechat.LeaveGroupCallResp.result:type_name -> voicechat.ErrorCode
	27,  // 340: voicechat.InviteGroupCallReq.header:type_name -> voicechat.Header
	24,  // 341: voicechat.InviteGroupCallReq.type:type_name -> voicechat.GroupCallType
	27,  // 342: voicechat.InviteGroupCallResp.header:type_name -> voicechat.Header
	2,   // 343: voicechat.InviteGroupCallResp.result:type_name -> voicechat.ErrorCode
	24,  // 344: voicechat.InviteGroupCallResp.type:type_name -> voicechat.GroupCallType
	27,  // 345: voicechat.PingGroupCallReq.header:type_name -> voicechat.Header
	27,  // 346: voicechat.PingGroupCallResp.header:type_name -> voicechat.Header
	2,   // 347: voicechat.PingGroupCallResp.result:type_name -> voicechat.ErrorCode
	27,  // 348: voicechat.StopGroupCallReq.header:type_name -> voicechat.Header
	27,  // 349: voicechat.StopGroupCallResp.header:type_name -> voicechat.Header
	2,   // 350: voicechat.StopGroupCallResp.result:type_name -> voicechat.ErrorCode
	27,  // 351: voicechat.GroupCallStatusReq.header:type_name -> voicechat.Header
	27,  // 352: voicechat.GroupCallStatusResp.header:type_name -> voicechat.Header
	2,   // 353: voicechat.GroupCallStatusResp.result:type_name -> voicechat.ErrorCode
	25,  // 354: voicechat.GroupCallStatusResp.status:type_name -> voicechat.GroupCallStatus
	185, // 355: voicechat.GroupCallStatusResp.groupcall:type_name -> voicechat.GroupCall
	8,   // 356: voicechat.Reaction.UinsEntry.value:type_name -> voicechat.ReactionCode
	357, // [357:357] is the sub-list for method output_type
	357, // [357:357] is the sub-list for method input_type
	357, // [357:357] is the sub-list for extension type_name
	357, // [357:357] is the sub-list for extension extendee
	0,   // [0:357] is the sub-list for field type_name
}

func init() { file_voicechat_proto_init() }
func file_voicechat_proto_init() {
	if File_voicechat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_voicechat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProfileResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProfileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProfileResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterProfileTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterProfileTokenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnregisterProfileTokenReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnregisterProfileTokenResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMC_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliveryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinnedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnblockGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnblockGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockedListGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockedListGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastMessageGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastMessageGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupUserStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupUserStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConversationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteConversationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuteGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuteGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmuteGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmuteGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewRegisterGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewRegisterGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnpinGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnpinGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartSecretChatGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartSecretChatGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptSecretChatGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptSecretChatGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSecretChatGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSecretChatGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLinkGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLinkGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinLinkGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinLinkGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLinkGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLinkGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableLinkGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableLinkGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkGroupInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkGroupInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PinMessageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnpinMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnpinMessageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPinnedMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPinnedMessageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactionListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastReactionItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastReaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReactionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListReactionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAdminGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAdminGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdminGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAdminGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPendingGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPendingGroupResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupUserStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartSecretChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceptSecretChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSecretChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinGroupCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveGroupCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteGroupCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopGroupCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMessageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMessageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMessageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMessageResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveLocationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveLocationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiLiveLocationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiLiveLocationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FCMInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokensReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokensResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotificationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceNotificationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginNotificationMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCallResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallCache); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallIceSdp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallIceCandidate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallEventMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStatusEventMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwtHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwtUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwtContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwtPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartGroupCallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartGroupCallResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupCallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupCallResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinGroupCallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinGroupCallResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveGroupCallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveGroupCallResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteGroupCallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InviteGroupCallResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingGroupCallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingGroupCallResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopGroupCallReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopGroupCallResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupCallStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voicechat_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupCallStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_voicechat_proto_msgTypes[116].OneofWrappers = []interface{}{
		(*BroadcastGroup_Group)(nil),
		(*BroadcastGroup_Update)(nil),
		(*BroadcastGroup_Delete)(nil),
		(*BroadcastGroup_Registration)(nil),
		(*BroadcastGroup_StartSecretChat)(nil),
		(*BroadcastGroup_AcceptSecretChat)(nil),
		(*BroadcastGroup_DeleteSecretChat)(nil),
		(*BroadcastGroup_StartGroupcall)(nil),
		(*BroadcastGroup_CreateGroupcall)(nil),
		(*BroadcastGroup_JoinGroupcall)(nil),
		(*BroadcastGroup_LeaveGroupcall)(nil),
		(*BroadcastGroup_InviteGroupcall)(nil),
		(*BroadcastGroup_StopGroupcall)(nil),
	}
	file_voicechat_proto_msgTypes[134].OneofWrappers = []interface{}{
		(*GetTokensReq_Message)(nil),
		(*GetTokensReq_StartCall)(nil),
		(*GetTokensReq_Registration)(nil),
	}
	file_voicechat_proto_msgTypes[135].OneofWrappers = []interface{}{
		(*GetTokensResp_Message)(nil),
		(*GetTokensResp_StartCall)(nil),
		(*GetTokensResp_Registration)(nil),
	}
	file_voicechat_proto_msgTypes[136].OneofWrappers = []interface{}{
		(*NotificationMessage_Message)(nil),
		(*NotificationMessage_StartCall)(nil),
		(*NotificationMessage_Registration)(nil),
		(*NotificationMessage_CreateGroupcall)(nil),
		(*NotificationMessage_InviteGroupcall)(nil),
		(*NotificationMessage_Reaction)(nil),
	}
	file_voicechat_proto_msgTypes[137].OneofWrappers = []interface{}{
		(*DeviceNotificationMessage_Message)(nil),
		(*DeviceNotificationMessage_StartSecretChat)(nil),
		(*DeviceNotificationMessage_AcceptSecretChat)(nil),
		(*DeviceNotificationMessage_DeleteSecretChat)(nil),
	}
	file_voicechat_proto_msgTypes[148].OneofWrappers = []interface{}{
		(*BroadcastCall_Start)(nil),
		(*BroadcastCall_Answer)(nil),
		(*BroadcastCall_Stop)(nil),
		(*BroadcastCall_Sdp)(nil),
		(*BroadcastCall_Candidate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_voicechat_proto_rawDesc,
			NumEnums:      26,
			NumMessages:   178,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_voicechat_proto_goTypes,
		DependencyIndexes: file_voicechat_proto_depIdxs,
		EnumInfos:         file_voicechat_proto_enumTypes,
		MessageInfos:      file_voicechat_proto_msgTypes,
	}.Build()
	File_voicechat_proto = out.File
	file_voicechat_proto_rawDesc = nil
	file_voicechat_proto_goTypes = nil
	file_voicechat_proto_depIdxs = nil
}
